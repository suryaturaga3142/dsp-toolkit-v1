
fft-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cde8  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a48  0800cfe8  0800cfe8  0000dfe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020a30  08020a30  00022318  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08020a30  08020a30  00021a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020a38  08020a38  00022318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020a38  08020a38  00021a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020a3c  08020a3c  00021a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08020a40  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d8  08020c18  000221d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000278  08020cb8  00022278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00003e14  20000318  08020d58  00022318  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000412c  08020d58  0002312c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00022318  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ea4f  00000000  00000000  00022346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f6b  00000000  00000000  00040d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001868  00000000  00000000  00044d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012ad  00000000  00000000  00046568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d825  00000000  00000000  00047815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020f6e  00000000  00000000  0007503a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00110966  00000000  00000000  00095fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001a690e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007504  00000000  00000000  001a6954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  001ade58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000318 	.word	0x20000318
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cfd0 	.word	0x0800cfd0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000031c 	.word	0x2000031c
 800023c:	0800cfd0 	.word	0x0800cfd0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000624:	1d39      	adds	r1, r7, #4
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	2201      	movs	r2, #1
 800062c:	4803      	ldr	r0, [pc, #12]	@ (800063c <__io_putchar+0x20>)
 800062e:	f007 fe7d 	bl	800832c <HAL_UART_Transmit>
  return ch;
 8000632:	687b      	ldr	r3, [r7, #4]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000584 	.word	0x20000584

08000640 <HAL_ADC_ConvHalfCpltCallback>:
static uint8_t uart_buf[2][UART_BUF_LEN];
static uint8_t uart_buf_index_tx = 0;   // buffer currently being transmitted
static uint8_t uart_buf_index_fill = 1; // buffer being filled

// ADC DMA half complete callback
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a05      	ldr	r2, [pc, #20]	@ (8000664 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d103      	bne.n	800065a <HAL_ADC_ConvHalfCpltCallback+0x1a>
        procData(adc_buf, 0);
 8000652:	2100      	movs	r1, #0
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000656:	f000 f845 	bl	80006e4 <procData>
    }
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40012000 	.word	0x40012000
 8000668:	20000b4c 	.word	0x20000b4c

0800066c <HAL_ADC_ConvCpltCallback>:

// ADC DMA full complete callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a05      	ldr	r2, [pc, #20]	@ (8000690 <HAL_ADC_ConvCpltCallback+0x24>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d104      	bne.n	8000688 <HAL_ADC_ConvCpltCallback+0x1c>
        procData(adc_buf, (ADC_BUF_LEN / 2));
 800067e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <HAL_ADC_ConvCpltCallback+0x28>)
 8000684:	f000 f82e 	bl	80006e4 <procData>
    }
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40012000 	.word	0x40012000
 8000694:	20000b4c 	.word	0x20000b4c

08000698 <HAL_UART_TxCpltCallback>:

// UART DMA transmit complete callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a0b      	ldr	r2, [pc, #44]	@ (80006d4 <HAL_UART_TxCpltCallback+0x3c>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d10d      	bne.n	80006c6 <HAL_UART_TxCpltCallback+0x2e>
        uart3_busy = 0;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <HAL_UART_TxCpltCallback+0x40>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]

        // Swap TX and fill buffer indices for next transmission
        uart_buf_index_tx = uart_buf_index_fill;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <HAL_UART_TxCpltCallback+0x44>)
 80006b2:	781a      	ldrb	r2, [r3, #0]
 80006b4:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <HAL_UART_TxCpltCallback+0x48>)
 80006b6:	701a      	strb	r2, [r3, #0]
        uart_buf_index_fill = 1 - uart_buf_index_tx;
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <HAL_UART_TxCpltCallback+0x48>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	f1c3 0301 	rsb	r3, r3, #1
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <HAL_UART_TxCpltCallback+0x44>)
 80006c4:	701a      	strb	r2, [r3, #0]
    }
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40004800 	.word	0x40004800
 80006d8:	20002365 	.word	0x20002365
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20003bcc 	.word	0x20003bcc

080006e4 <procData>:

// FFT processing and UART buffer filling
void procData(volatile uint16_t *adc_data, int st_idx) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	f5ad 5d20 	sub.w	sp, sp, #10240	@ 0x2800
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80006f2:	f6a3 0314 	subw	r3, r3, #2068	@ 0x814
 80006f6:	6018      	str	r0, [r3, #0]
 80006f8:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80006fc:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8000700:	6019      	str	r1, [r3, #0]
    float output[FFT_SIZE];
    float mag_f32[NUM_BINS];
    static uint16_t mag_u16[NUM_BINS];

    // Convert ADC samples to normalized float values [0..1)
    for (int i = 0; i < FFT_SIZE; i++) {
 8000702:	2300      	movs	r3, #0
 8000704:	f642 0214 	movw	r2, #10260	@ 0x2814
 8000708:	443a      	add	r2, r7
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	e030      	b.n	8000770 <procData+0x8c>
        input[i] = (float)(adc_data[st_idx + i]) / 4096.0f;
 800070e:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 8000712:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	f642 0314 	movw	r3, #10260	@ 0x2814
 800071c:	443b      	add	r3, r7
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4413      	add	r3, r2
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	f607 0218 	addw	r2, r7, #2072	@ 0x818
 8000728:	f6a2 0214 	subw	r2, r2, #2068	@ 0x814
 800072c:	6812      	ldr	r2, [r2, #0]
 800072e:	4413      	add	r3, r2
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	b29b      	uxth	r3, r3
 8000734:	ee07 3a90 	vmov	s15, r3
 8000738:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800073c:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8000880 <procData+0x19c>
 8000740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000744:	f641 0318 	movw	r3, #6168	@ 0x1818
 8000748:	443b      	add	r3, r7
 800074a:	461a      	mov	r2, r3
 800074c:	f642 0314 	movw	r3, #10260	@ 0x2814
 8000750:	443b      	add	r3, r7
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	3b0c      	subs	r3, #12
 800075a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < FFT_SIZE; i++) {
 800075e:	f642 0314 	movw	r3, #10260	@ 0x2814
 8000762:	443b      	add	r3, r7
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	f642 0214 	movw	r2, #10260	@ 0x2814
 800076c:	443a      	add	r2, r7
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	f642 0314 	movw	r3, #10260	@ 0x2814
 8000774:	443b      	add	r3, r7
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800077c:	dbc7      	blt.n	800070e <procData+0x2a>
    }

    if (!fft_initialized) {
 800077e:	4b41      	ldr	r3, [pc, #260]	@ (8000884 <procData+0x1a0>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d107      	bne.n	8000796 <procData+0xb2>
        arm_rfft_fast_init_f32(&fft_instance, FFT_SIZE);
 8000786:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800078a:	483f      	ldr	r0, [pc, #252]	@ (8000888 <procData+0x1a4>)
 800078c:	f003 fe6c 	bl	8004468 <arm_rfft_fast_init_f32>
        fft_initialized = 1;
 8000790:	4b3c      	ldr	r3, [pc, #240]	@ (8000884 <procData+0x1a0>)
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
    }

    arm_rfft_fast_f32(&fft_instance, input, output, 0);
 8000796:	4a3d      	ldr	r2, [pc, #244]	@ (800088c <procData+0x1a8>)
 8000798:	f642 0318 	movw	r3, #10264	@ 0x2818
 800079c:	4413      	add	r3, r2
 800079e:	19da      	adds	r2, r3, r7
 80007a0:	493b      	ldr	r1, [pc, #236]	@ (8000890 <procData+0x1ac>)
 80007a2:	f642 0318 	movw	r3, #10264	@ 0x2818
 80007a6:	440b      	add	r3, r1
 80007a8:	19d9      	adds	r1, r3, r7
 80007aa:	2300      	movs	r3, #0
 80007ac:	4836      	ldr	r0, [pc, #216]	@ (8000888 <procData+0x1a4>)
 80007ae:	f003 fd0a 	bl	80041c6 <arm_rfft_fast_f32>

    arm_cmplx_mag_f32(output, mag_f32, NUM_BINS);
 80007b2:	4938      	ldr	r1, [pc, #224]	@ (8000894 <procData+0x1b0>)
 80007b4:	f642 0318 	movw	r3, #10264	@ 0x2818
 80007b8:	440b      	add	r3, r1
 80007ba:	19d9      	adds	r1, r3, r7
 80007bc:	4b33      	ldr	r3, [pc, #204]	@ (800088c <procData+0x1a8>)
 80007be:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80007c2:	f103 0318 	add.w	r3, r3, #24
 80007c6:	443b      	add	r3, r7
 80007c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 f8ac 	bl	800192a <arm_cmplx_mag_f32>

    // Scale magnitudes to 16-bit unsigned ints (e.g., scale factor = 1000)
    for (int i = 0; i < NUM_BINS; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	f642 0210 	movw	r2, #10256	@ 0x2810
 80007d8:	443a      	add	r2, r7
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	e03f      	b.n	800085e <procData+0x17a>
        float scaled = mag_f32[i] * 1000.0f;
 80007de:	f607 0318 	addw	r3, r7, #2072	@ 0x818
 80007e2:	f6a3 020c 	subw	r2, r3, #2060	@ 0x80c
 80007e6:	f642 0310 	movw	r3, #10256	@ 0x2810
 80007ea:	443b      	add	r3, r7
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	edd3 7a00 	vldr	s15, [r3]
 80007f6:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8000898 <procData+0x1b4>
 80007fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007fe:	f642 030c 	movw	r3, #10252	@ 0x280c
 8000802:	443b      	add	r3, r7
 8000804:	edc3 7a00 	vstr	s15, [r3]
        if (scaled > 65535.0f) scaled = 65535.0f;
 8000808:	f642 030c 	movw	r3, #10252	@ 0x280c
 800080c:	443b      	add	r3, r7
 800080e:	edd3 7a00 	vldr	s15, [r3]
 8000812:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800089c <procData+0x1b8>
 8000816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800081a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081e:	dd04      	ble.n	800082a <procData+0x146>
 8000820:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <procData+0x1bc>)
 8000822:	f642 020c 	movw	r2, #10252	@ 0x280c
 8000826:	443a      	add	r2, r7
 8000828:	6013      	str	r3, [r2, #0]
        mag_u16[i] = (uint16_t)scaled;
 800082a:	f642 030c 	movw	r3, #10252	@ 0x280c
 800082e:	443b      	add	r3, r7
 8000830:	edd3 7a00 	vldr	s15, [r3]
 8000834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000838:	ee17 3a90 	vmov	r3, s15
 800083c:	b299      	uxth	r1, r3
 800083e:	4a19      	ldr	r2, [pc, #100]	@ (80008a4 <procData+0x1c0>)
 8000840:	f642 0310 	movw	r3, #10256	@ 0x2810
 8000844:	443b      	add	r3, r7
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < NUM_BINS; i++) {
 800084c:	f642 0310 	movw	r3, #10256	@ 0x2810
 8000850:	443b      	add	r3, r7
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	f642 0210 	movw	r2, #10256	@ 0x2810
 800085a:	443a      	add	r2, r7
 800085c:	6013      	str	r3, [r2, #0]
 800085e:	f642 0310 	movw	r3, #10256	@ 0x2810
 8000862:	443b      	add	r3, r7
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800086a:	dbb8      	blt.n	80007de <procData+0xfa>
    }

    // Format and prepare UART buffer for DMA transfer
    printDataDMA(mag_u16);
 800086c:	480d      	ldr	r0, [pc, #52]	@ (80008a4 <procData+0x1c0>)
 800086e:	f000 f81b 	bl	80008a8 <printDataDMA>
}
 8000872:	bf00      	nop
 8000874:	f507 5720 	add.w	r7, r7, #10240	@ 0x2800
 8000878:	3718      	adds	r7, #24
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	45800000 	.word	0x45800000
 8000884:	20002364 	.word	0x20002364
 8000888:	2000234c 	.word	0x2000234c
 800088c:	ffffdff4 	.word	0xffffdff4
 8000890:	ffffeff4 	.word	0xffffeff4
 8000894:	ffffd7f4 	.word	0xffffd7f4
 8000898:	447a0000 	.word	0x447a0000
 800089c:	477fff00 	.word	0x477fff00
 80008a0:	477fff00 	.word	0x477fff00
 80008a4:	20003bd0 	.word	0x20003bd0

080008a8 <printDataDMA>:

void printDataDMA(uint16_t *magnitude)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
    // Pointer to the current fill buffer in our 2-buffer system
    uint8_t *fill_buf = uart_buf[uart_buf_index_fill];
 80008b0:	4b3f      	ldr	r3, [pc, #252]	@ (80009b0 <printDataDMA+0x108>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	461a      	mov	r2, r3
 80008b6:	f640 4332 	movw	r3, #3122	@ 0xc32
 80008ba:	fb02 f303 	mul.w	r3, r2, r3
 80008be:	4a3d      	ldr	r2, [pc, #244]	@ (80009b4 <printDataDMA+0x10c>)
 80008c0:	4413      	add	r3, r2
 80008c2:	60fb      	str	r3, [r7, #12]
    int len = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]

    // Example header (optional) - 2 bytes: marker and bin count
    // You can define any binary header structure you want
    fill_buf[len++] = 0xAA;                   // Start byte marker
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	617a      	str	r2, [r7, #20]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4413      	add	r3, r2
 80008d4:	22aa      	movs	r2, #170	@ 0xaa
 80008d6:	701a      	strb	r2, [r3, #0]
    fill_buf[len++] = (uint8_t)(NUM_BINS & 0xFF);      // Number of bins
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	617a      	str	r2, [r7, #20]
 80008de:	461a      	mov	r2, r3
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4413      	add	r3, r2
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
    fill_buf[len++] = (uint8_t)((NUM_BINS >> 8) & 0xFF);
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	617a      	str	r2, [r7, #20]
 80008ee:	461a      	mov	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4413      	add	r3, r2
 80008f4:	2202      	movs	r2, #2
 80008f6:	701a      	strb	r2, [r3, #0]
    fill_buf[len++] = (uint8_t)(SAMPLE_FREQ & 0xFF); //Sampling frequency
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	617a      	str	r2, [r7, #20]
 80008fe:	461a      	mov	r2, r3
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	2240      	movs	r2, #64	@ 0x40
 8000906:	701a      	strb	r2, [r3, #0]
    fill_buf[len++] = (uint8_t)((SAMPLE_FREQ >> 8) & 0xFF);
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	617a      	str	r2, [r7, #20]
 800090e:	461a      	mov	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4413      	add	r3, r2
 8000914:	229c      	movs	r2, #156	@ 0x9c
 8000916:	701a      	strb	r2, [r3, #0]


    // Copy raw uint16_t magnitudes into buffer (little-endian)
    for (int i = 0; i < NUM_BINS; i++) {
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	e01e      	b.n	800095c <printDataDMA+0xb4>
        fill_buf[len++] = (uint8_t)(magnitude[i] & 0xFF);       // LSB
 800091e:	693b      	ldr	r3, [r7, #16]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	8819      	ldrh	r1, [r3, #0]
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	1c5a      	adds	r2, r3, #1
 800092c:	617a      	str	r2, [r7, #20]
 800092e:	461a      	mov	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4413      	add	r3, r2
 8000934:	b2ca      	uxtb	r2, r1
 8000936:	701a      	strb	r2, [r3, #0]
        fill_buf[len++] = (uint8_t)((magnitude[i] >> 8) & 0xFF); // MSB
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	4413      	add	r3, r2
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	0a1b      	lsrs	r3, r3, #8
 8000944:	b299      	uxth	r1, r3
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	1c5a      	adds	r2, r3, #1
 800094a:	617a      	str	r2, [r7, #20]
 800094c:	461a      	mov	r2, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4413      	add	r3, r2
 8000952:	b2ca      	uxtb	r2, r1
 8000954:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_BINS; i++) {
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	3301      	adds	r3, #1
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000962:	dbdc      	blt.n	800091e <printDataDMA+0x76>
    }

    // Optional: append end marker
    fill_buf[len++] = 0x55;
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	1c5a      	adds	r2, r3, #1
 8000968:	617a      	str	r2, [r7, #20]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	2255      	movs	r2, #85	@ 0x55
 8000972:	701a      	strb	r2, [r3, #0]

    // Start UART DMA transmit if not already busy
    if (!uart3_busy) {
 8000974:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <printDataDMA+0x110>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d115      	bne.n	80009a8 <printDataDMA+0x100>
        uart3_busy = 1;
 800097c:	4b0e      	ldr	r3, [pc, #56]	@ (80009b8 <printDataDMA+0x110>)
 800097e:	2201      	movs	r2, #1
 8000980:	701a      	strb	r2, [r3, #0]

        // Swap buffer indices: the fill buffer becomes tx buffer
        uart_buf_index_tx   = uart_buf_index_fill;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <printDataDMA+0x108>)
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <printDataDMA+0x114>)
 8000988:	701a      	strb	r2, [r3, #0]
        uart_buf_index_fill = 1 - uart_buf_index_tx;
 800098a:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <printDataDMA+0x114>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	f1c3 0301 	rsb	r3, r3, #1
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <printDataDMA+0x108>)
 8000996:	701a      	strb	r2, [r3, #0]

        HAL_UART_Transmit_DMA(&huart3, fill_buf, len);
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	b29b      	uxth	r3, r3
 800099c:	461a      	mov	r2, r3
 800099e:	68f9      	ldr	r1, [r7, #12]
 80009a0:	4807      	ldr	r0, [pc, #28]	@ (80009c0 <printDataDMA+0x118>)
 80009a2:	f007 fd4d 	bl	8008440 <HAL_UART_Transmit_DMA>
    }
    // If busy, the frame will remain in fill buffer until callback swaps it
    return;
 80009a6:	bf00      	nop
 80009a8:	bf00      	nop
}
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000000 	.word	0x20000000
 80009b4:	20002368 	.word	0x20002368
 80009b8:	20002365 	.word	0x20002365
 80009bc:	20003bcc 	.word	0x20003bcc
 80009c0:	20000584 	.word	0x20000584
 80009c4:	00000000 	.word	0x00000000

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	for (int n = 0; n < DAC_BUF_LEN; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	e034      	b.n	8000a3e <main+0x76>
		float angle = 2.0f * M_PI * 5000 * n / 40000;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009de:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8000a98 <main+0xd0>
 80009e2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80009e6:	ed9f 5b2e 	vldr	d5, [pc, #184]	@ 8000aa0 <main+0xd8>
 80009ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009f2:	edc7 7a02 	vstr	s15, [r7, #8]
	    float value = (sin(angle) + 1.0f) * (4095 / 2.0f);
 80009f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80009fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009fe:	eeb0 0b47 	vmov.f64	d0, d7
 8000a02:	f00b fd25 	bl	800c450 <sin>
 8000a06:	eeb0 7b40 	vmov.f64	d7, d0
 8000a0a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8000a0e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a12:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8000aa8 <main+0xe0>
 8000a16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a1a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a1e:	edc7 7a01 	vstr	s15, [r7, #4]
	    dac_buf[n] = (uint16_t)value;
 8000a22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a2a:	ee17 3a90 	vmov	r3, s15
 8000a2e:	b299      	uxth	r1, r3
 8000a30:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab0 <main+0xe8>)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int n = 0; n < DAC_BUF_LEN; n++) {
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a44:	dbc6      	blt.n	80009d4 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f003 fd76 	bl	8004536 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f83b 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 fa59 	bl	8000f04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a52:	f000 fa1d 	bl	8000e90 <MX_DMA_Init>
  MX_ETH_Init();
 8000a56:	f000 f923 	bl	8000ca0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a5a:	f000 f9bb 	bl	8000dd4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a5e:	f000 f9e9 	bl	8000e34 <MX_USB_OTG_FS_PCD_Init>
  MX_DAC_Init();
 8000a62:	f000 f8f3 	bl	8000c4c <MX_DAC_Init>
  MX_ADC1_Init();
 8000a66:	f000 f89f 	bl	8000ba8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a6a:	f000 f967 	bl	8000d3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000a6e:	4811      	ldr	r0, [pc, #68]	@ (8000ab4 <main+0xec>)
 8000a70:	f007 f906 	bl	8007c80 <HAL_TIM_Base_Start>

  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*) dac_buf, DAC_BUF_LEN, DAC_ALIGN_12B_R);
 8000a74:	2300      	movs	r3, #0
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab0 <main+0xe8>)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	480d      	ldr	r0, [pc, #52]	@ (8000ab8 <main+0xf0>)
 8000a82:	f004 fb2f 	bl	80050e4 <HAL_DAC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8000a86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a8a:	490c      	ldr	r1, [pc, #48]	@ (8000abc <main+0xf4>)
 8000a8c:	480c      	ldr	r0, [pc, #48]	@ (8000ac0 <main+0xf8>)
 8000a8e:	f003 fe17 	bl	80046c0 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a92:	bf00      	nop
 8000a94:	e7fd      	b.n	8000a92 <main+0xca>
 8000a96:	bf00      	nop
 8000a98:	4c5d390c 	.word	0x4c5d390c
 8000a9c:	40deadfb 	.word	0x40deadfb
 8000aa0:	00000000 	.word	0x00000000
 8000aa4:	40e38800 	.word	0x40e38800
 8000aa8:	00000000 	.word	0x00000000
 8000aac:	409ffe00 	.word	0x409ffe00
 8000ab0:	20001b4c 	.word	0x20001b4c
 8000ab4:	20000538 	.word	0x20000538
 8000ab8:	20000414 	.word	0x20000414
 8000abc:	20000b4c 	.word	0x20000b4c
 8000ac0:	2000036c 	.word	0x2000036c

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b094      	sub	sp, #80	@ 0x50
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	2234      	movs	r2, #52	@ 0x34
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f009 fe07 	bl	800a6e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ae8:	f005 ff16 	bl	8006918 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aec:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba0 <SystemClock_Config+0xdc>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af0:	4a2b      	ldr	r2, [pc, #172]	@ (8000ba0 <SystemClock_Config+0xdc>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000af6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af8:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <SystemClock_Config+0xdc>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b04:	4b27      	ldr	r3, [pc, #156]	@ (8000ba4 <SystemClock_Config+0xe0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b0c:	4a25      	ldr	r2, [pc, #148]	@ (8000ba4 <SystemClock_Config+0xe0>)
 8000b0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b23      	ldr	r3, [pc, #140]	@ (8000ba4 <SystemClock_Config+0xe0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b24:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b32:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b34:	2304      	movs	r3, #4
 8000b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b38:	2360      	movs	r3, #96	@ 0x60
 8000b3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b40:	2304      	movs	r3, #4
 8000b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f005 ff43 	bl	80069d8 <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b58:	f000 fa92 	bl	8001080 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b5c:	f005 feec 	bl	8006938 <HAL_PWREx_EnableOverDrive>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b66:	f000 fa8b 	bl	8001080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	2103      	movs	r1, #3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f006 f9d4 	bl	8006f34 <HAL_RCC_ClockConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b92:	f000 fa75 	bl	8001080 <Error_Handler>
  }
}
 8000b96:	bf00      	nop
 8000b98:	3750      	adds	r7, #80	@ 0x50
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40007000 	.word	0x40007000

08000ba8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bba:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000bbc:	4a22      	ldr	r2, [pc, #136]	@ (8000c48 <MX_ADC1_Init+0xa0>)
 8000bbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bc0:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000bc2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bce:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000be2:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000be4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000be8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000bea:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000bec:	f04f 6230 	mov.w	r2, #184549376	@ 0xb000000
 8000bf0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c0c:	480d      	ldr	r0, [pc, #52]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000c0e:	f003 fd13 	bl	8004638 <HAL_ADC_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000c18:	f000 fa32 	bl	8001080 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <MX_ADC1_Init+0x9c>)
 8000c2e:	f003 fe4f 	bl	80048d0 <HAL_ADC_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000c38:	f000 fa22 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2000036c 	.word	0x2000036c
 8000c48:	40012000 	.word	0x40012000

08000c4c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c52:	463b      	mov	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <MX_DAC_Init+0x4c>)
 8000c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000c9c <MX_DAC_Init+0x50>)
 8000c5e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c60:	480d      	ldr	r0, [pc, #52]	@ (8000c98 <MX_DAC_Init+0x4c>)
 8000c62:	f004 fa1c 	bl	800509e <HAL_DAC_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c6c:	f000 fa08 	bl	8001080 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000c70:	2324      	movs	r3, #36	@ 0x24
 8000c72:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	@ (8000c98 <MX_DAC_Init+0x4c>)
 8000c80:	f004 fb0e 	bl	80052a0 <HAL_DAC_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000c8a:	f000 f9f9 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000414 	.word	0x20000414
 8000c9c:	40007400 	.word	0x40007400

08000ca0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d24 <MX_ETH_Init+0x84>)
 8000ca6:	4a20      	ldr	r2, [pc, #128]	@ (8000d28 <MX_ETH_Init+0x88>)
 8000ca8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <MX_ETH_Init+0x8c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <MX_ETH_Init+0x8c>)
 8000cb2:	2280      	movs	r2, #128	@ 0x80
 8000cb4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <MX_ETH_Init+0x8c>)
 8000cb8:	22e1      	movs	r2, #225	@ 0xe1
 8000cba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <MX_ETH_Init+0x8c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <MX_ETH_Init+0x8c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <MX_ETH_Init+0x8c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <MX_ETH_Init+0x84>)
 8000cd0:	4a16      	ldr	r2, [pc, #88]	@ (8000d2c <MX_ETH_Init+0x8c>)
 8000cd2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <MX_ETH_Init+0x84>)
 8000cd6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000cda:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <MX_ETH_Init+0x84>)
 8000cde:	4a14      	ldr	r2, [pc, #80]	@ (8000d30 <MX_ETH_Init+0x90>)
 8000ce0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <MX_ETH_Init+0x84>)
 8000ce4:	4a13      	ldr	r2, [pc, #76]	@ (8000d34 <MX_ETH_Init+0x94>)
 8000ce6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <MX_ETH_Init+0x84>)
 8000cea:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000cee:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <MX_ETH_Init+0x84>)
 8000cf2:	f004 ffc3 	bl	8005c7c <HAL_ETH_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000cfc:	f000 f9c0 	bl	8001080 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d00:	2238      	movs	r2, #56	@ 0x38
 8000d02:	2100      	movs	r1, #0
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <MX_ETH_Init+0x98>)
 8000d06:	f009 fcee 	bl	800a6e6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <MX_ETH_Init+0x98>)
 8000d0c:	2221      	movs	r2, #33	@ 0x21
 8000d0e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d10:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <MX_ETH_Init+0x98>)
 8000d12:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000d16:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d18:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <MX_ETH_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000488 	.word	0x20000488
 8000d28:	40028000 	.word	0x40028000
 8000d2c:	20003fd0 	.word	0x20003fd0
 8000d30:	20000278 	.word	0x20000278
 8000d34:	200001d8 	.word	0x200001d8
 8000d38:	20000334 	.word	0x20000334

08000d3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b088      	sub	sp, #32
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <MX_TIM2_Init+0x94>)
 8000d5c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000d62:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <MX_TIM2_Init+0x94>)
 8000d64:	2263      	movs	r2, #99	@ 0x63
 8000d66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d68:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_TIM2_Init+0x94>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 23;
 8000d6e:	4b18      	ldr	r3, [pc, #96]	@ (8000dd0 <MX_TIM2_Init+0x94>)
 8000d70:	2217      	movs	r2, #23
 8000d72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <MX_TIM2_Init+0x94>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <MX_TIM2_Init+0x94>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d80:	4813      	ldr	r0, [pc, #76]	@ (8000dd0 <MX_TIM2_Init+0x94>)
 8000d82:	f006 ff25 	bl	8007bd0 <HAL_TIM_Base_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d8c:	f000 f978 	bl	8001080 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <MX_TIM2_Init+0x94>)
 8000d9e:	f006 ffdf 	bl	8007d60 <HAL_TIM_ConfigClockSource>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000da8:	f000 f96a 	bl	8001080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dac:	2320      	movs	r3, #32
 8000dae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_TIM2_Init+0x94>)
 8000dba:	f007 f9db 	bl	8008174 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dc4:	f000 f95c 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3720      	adds	r7, #32
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000538 	.word	0x20000538

08000dd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <MX_USART3_UART_Init+0x58>)
 8000dda:	4a15      	ldr	r2, [pc, #84]	@ (8000e30 <MX_USART3_UART_Init+0x5c>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <MX_USART3_UART_Init+0x58>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <MX_USART3_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <MX_USART3_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <MX_USART3_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e2c <MX_USART3_UART_Init+0x58>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e18:	f007 fa3a 	bl	8008290 <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e22:	f000 f92d 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000584 	.word	0x20000584
 8000e30:	40004800 	.word	0x40004800

08000e34 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e38:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e42:	2206      	movs	r2, #6
 8000e44:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e46:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e48:	2202      	movs	r2, #2
 8000e4a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e54:	2202      	movs	r2, #2
 8000e56:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e64:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e78:	f005 fc13 	bl	80066a2 <HAL_PCD_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e82:	f000 f8fd 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000066c 	.word	0x2000066c

08000e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e96:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <MX_DMA_Init+0x70>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a19      	ldr	r2, [pc, #100]	@ (8000f00 <MX_DMA_Init+0x70>)
 8000e9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_DMA_Init+0x70>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eae:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <MX_DMA_Init+0x70>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a13      	ldr	r2, [pc, #76]	@ (8000f00 <MX_DMA_Init+0x70>)
 8000eb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <MX_DMA_Init+0x70>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	200e      	movs	r0, #14
 8000ecc:	f004 f8b1 	bl	8005032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ed0:	200e      	movs	r0, #14
 8000ed2:	f004 f8ca 	bl	800506a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2010      	movs	r0, #16
 8000edc:	f004 f8a9 	bl	8005032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ee0:	2010      	movs	r0, #16
 8000ee2:	f004 f8c2 	bl	800506a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2038      	movs	r0, #56	@ 0x38
 8000eec:	f004 f8a1 	bl	8005032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ef0:	2038      	movs	r0, #56	@ 0x38
 8000ef2:	f004 f8ba 	bl	800506a <HAL_NVIC_EnableIRQ>

}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	@ 0x30
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	4b54      	ldr	r3, [pc, #336]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a53      	ldr	r2, [pc, #332]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b51      	ldr	r3, [pc, #324]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f32:	4b4e      	ldr	r3, [pc, #312]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a4d      	ldr	r2, [pc, #308]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f38:	f043 0320 	orr.w	r3, r3, #32
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b4b      	ldr	r3, [pc, #300]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0320 	and.w	r3, r3, #32
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4a:	4b48      	ldr	r3, [pc, #288]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a47      	ldr	r2, [pc, #284]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b45      	ldr	r3, [pc, #276]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b42      	ldr	r3, [pc, #264]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a41      	ldr	r2, [pc, #260]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a3b      	ldr	r2, [pc, #236]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b39      	ldr	r3, [pc, #228]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f92:	4b36      	ldr	r3, [pc, #216]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a35      	ldr	r2, [pc, #212]	@ (800106c <MX_GPIO_Init+0x168>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b33      	ldr	r3, [pc, #204]	@ (800106c <MX_GPIO_Init+0x168>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000faa:	4b30      	ldr	r3, [pc, #192]	@ (800106c <MX_GPIO_Init+0x168>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	4a2f      	ldr	r2, [pc, #188]	@ (800106c <MX_GPIO_Init+0x168>)
 8000fb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800106c <MX_GPIO_Init+0x168>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000fc8:	4829      	ldr	r0, [pc, #164]	@ (8001070 <MX_GPIO_Init+0x16c>)
 8000fca:	f005 fb51 	bl	8006670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2140      	movs	r1, #64	@ 0x40
 8000fd2:	4828      	ldr	r0, [pc, #160]	@ (8001074 <MX_GPIO_Init+0x170>)
 8000fd4:	f005 fb4c 	bl	8006670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fde:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 031c 	add.w	r3, r7, #28
 8000fec:	4619      	mov	r1, r3
 8000fee:	4822      	ldr	r0, [pc, #136]	@ (8001078 <MX_GPIO_Init+0x174>)
 8000ff0:	f005 f992 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ff4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	481c      	ldr	r0, [pc, #112]	@ (800107c <MX_GPIO_Init+0x178>)
 800100c:	f005 f984 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001010:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4811      	ldr	r0, [pc, #68]	@ (8001070 <MX_GPIO_Init+0x16c>)
 800102a:	f005 f975 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800102e:	2340      	movs	r3, #64	@ 0x40
 8001030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4619      	mov	r1, r3
 8001044:	480b      	ldr	r0, [pc, #44]	@ (8001074 <MX_GPIO_Init+0x170>)
 8001046:	f005 f967 	bl	8006318 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800104a:	2380      	movs	r3, #128	@ 0x80
 800104c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_GPIO_Init+0x170>)
 800105e:	f005 f95b 	bl	8006318 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001062:	bf00      	nop
 8001064:	3730      	adds	r7, #48	@ 0x30
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800
 8001070:	40020400 	.word	0x40020400
 8001074:	40021800 	.word	0x40021800
 8001078:	40020800 	.word	0x40020800
 800107c:	40021400 	.word	0x40021400

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
}
 8001086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <Error_Handler+0x8>

0800108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <HAL_MspInit+0x44>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	4a0e      	ldr	r2, [pc, #56]	@ (80010d0 <HAL_MspInit+0x44>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109c:	6413      	str	r3, [r2, #64]	@ 0x40
 800109e:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <HAL_MspInit+0x44>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <HAL_MspInit+0x44>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	4a08      	ldr	r2, [pc, #32]	@ (80010d0 <HAL_MspInit+0x44>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_MspInit+0x44>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800

080010d4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a2d      	ldr	r2, [pc, #180]	@ (80011a8 <HAL_ADC_MspInit+0xd4>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d153      	bne.n	800119e <HAL_ADC_MspInit+0xca>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010f6:	4b2d      	ldr	r3, [pc, #180]	@ (80011ac <HAL_ADC_MspInit+0xd8>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	4a2c      	ldr	r2, [pc, #176]	@ (80011ac <HAL_ADC_MspInit+0xd8>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001100:	6453      	str	r3, [r2, #68]	@ 0x44
 8001102:	4b2a      	ldr	r3, [pc, #168]	@ (80011ac <HAL_ADC_MspInit+0xd8>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	4b27      	ldr	r3, [pc, #156]	@ (80011ac <HAL_ADC_MspInit+0xd8>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a26      	ldr	r2, [pc, #152]	@ (80011ac <HAL_ADC_MspInit+0xd8>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b24      	ldr	r3, [pc, #144]	@ (80011ac <HAL_ADC_MspInit+0xd8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001126:	2301      	movs	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112a:	2303      	movs	r3, #3
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	481d      	ldr	r0, [pc, #116]	@ (80011b0 <HAL_ADC_MspInit+0xdc>)
 800113a:	f005 f8ed 	bl	8006318 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800113e:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <HAL_ADC_MspInit+0xe0>)
 8001140:	4a1d      	ldr	r2, [pc, #116]	@ (80011b8 <HAL_ADC_MspInit+0xe4>)
 8001142:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001144:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <HAL_ADC_MspInit+0xe0>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800114a:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <HAL_ADC_MspInit+0xe0>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <HAL_ADC_MspInit+0xe0>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_ADC_MspInit+0xe0>)
 8001158:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800115c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <HAL_ADC_MspInit+0xe0>)
 8001160:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001164:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <HAL_ADC_MspInit+0xe0>)
 8001168:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800116c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <HAL_ADC_MspInit+0xe0>)
 8001170:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001174:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001176:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <HAL_ADC_MspInit+0xe0>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800117c:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <HAL_ADC_MspInit+0xe0>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001182:	480c      	ldr	r0, [pc, #48]	@ (80011b4 <HAL_ADC_MspInit+0xe0>)
 8001184:	f004 f970 	bl	8005468 <HAL_DMA_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800118e:	f7ff ff77 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a07      	ldr	r2, [pc, #28]	@ (80011b4 <HAL_ADC_MspInit+0xe0>)
 8001196:	639a      	str	r2, [r3, #56]	@ 0x38
 8001198:	4a06      	ldr	r2, [pc, #24]	@ (80011b4 <HAL_ADC_MspInit+0xe0>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	@ 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40012000 	.word	0x40012000
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	200003b4 	.word	0x200003b4
 80011b8:	40026410 	.word	0x40026410

080011bc <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001290 <HAL_DAC_MspInit+0xd4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d154      	bne.n	8001288 <HAL_DAC_MspInit+0xcc>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80011de:	4b2d      	ldr	r3, [pc, #180]	@ (8001294 <HAL_DAC_MspInit+0xd8>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001294 <HAL_DAC_MspInit+0xd8>)
 80011e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80011e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001294 <HAL_DAC_MspInit+0xd8>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	4b27      	ldr	r3, [pc, #156]	@ (8001294 <HAL_DAC_MspInit+0xd8>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a26      	ldr	r2, [pc, #152]	@ (8001294 <HAL_DAC_MspInit+0xd8>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <HAL_DAC_MspInit+0xd8>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800120e:	2310      	movs	r3, #16
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001212:	2303      	movs	r3, #3
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	481d      	ldr	r0, [pc, #116]	@ (8001298 <HAL_DAC_MspInit+0xdc>)
 8001222:	f005 f879 	bl	8006318 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001226:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 8001228:	4a1d      	ldr	r2, [pc, #116]	@ (80012a0 <HAL_DAC_MspInit+0xe4>)
 800122a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 800122e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001232:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001234:	4b19      	ldr	r3, [pc, #100]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 8001236:	2240      	movs	r2, #64	@ 0x40
 8001238:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800123a:	4b18      	ldr	r3, [pc, #96]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 8001242:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001246:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001248:	4b14      	ldr	r3, [pc, #80]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 800124a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800124e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 8001252:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001256:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 800125a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800125e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001260:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 8001262:	2200      	movs	r2, #0
 8001264:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001266:	4b0d      	ldr	r3, [pc, #52]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 8001268:	2200      	movs	r2, #0
 800126a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800126c:	480b      	ldr	r0, [pc, #44]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 800126e:	f004 f8fb 	bl	8005468 <HAL_DMA_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 8001278:	f7ff ff02 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a07      	ldr	r2, [pc, #28]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	4a06      	ldr	r2, [pc, #24]	@ (800129c <HAL_DAC_MspInit+0xe0>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	@ 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40007400 	.word	0x40007400
 8001294:	40023800 	.word	0x40023800
 8001298:	40020000 	.word	0x40020000
 800129c:	20000428 	.word	0x20000428
 80012a0:	40026088 	.word	0x40026088

080012a4 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	@ 0x38
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a4e      	ldr	r2, [pc, #312]	@ (80013fc <HAL_ETH_MspInit+0x158>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	f040 8096 	bne.w	80013f4 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 80012ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80012d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012dc:	623b      	str	r3, [r7, #32]
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	4b47      	ldr	r3, [pc, #284]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e4:	4a46      	ldr	r2, [pc, #280]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 80012e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ec:	4b44      	ldr	r3, [pc, #272]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	4b41      	ldr	r3, [pc, #260]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fc:	4a40      	ldr	r2, [pc, #256]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 80012fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001302:	6313      	str	r3, [r2, #48]	@ 0x30
 8001304:	4b3e      	ldr	r3, [pc, #248]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001310:	4b3b      	ldr	r3, [pc, #236]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	4a3a      	ldr	r2, [pc, #232]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6313      	str	r3, [r2, #48]	@ 0x30
 800131c:	4b38      	ldr	r3, [pc, #224]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b35      	ldr	r3, [pc, #212]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132c:	4a34      	ldr	r2, [pc, #208]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6313      	str	r3, [r2, #48]	@ 0x30
 8001334:	4b32      	ldr	r3, [pc, #200]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b2f      	ldr	r3, [pc, #188]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001344:	4a2e      	ldr	r2, [pc, #184]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	6313      	str	r3, [r2, #48]	@ 0x30
 800134c:	4b2c      	ldr	r3, [pc, #176]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001358:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135c:	4a28      	ldr	r2, [pc, #160]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 800135e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001362:	6313      	str	r3, [r2, #48]	@ 0x30
 8001364:	4b26      	ldr	r3, [pc, #152]	@ (8001400 <HAL_ETH_MspInit+0x15c>)
 8001366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001370:	2332      	movs	r3, #50	@ 0x32
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001380:	230b      	movs	r3, #11
 8001382:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001388:	4619      	mov	r1, r3
 800138a:	481e      	ldr	r0, [pc, #120]	@ (8001404 <HAL_ETH_MspInit+0x160>)
 800138c:	f004 ffc4 	bl	8006318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001390:	2386      	movs	r3, #134	@ 0x86
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013a0:	230b      	movs	r3, #11
 80013a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a8:	4619      	mov	r1, r3
 80013aa:	4817      	ldr	r0, [pc, #92]	@ (8001408 <HAL_ETH_MspInit+0x164>)
 80013ac:	f004 ffb4 	bl	8006318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013be:	2303      	movs	r3, #3
 80013c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013c2:	230b      	movs	r3, #11
 80013c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ca:	4619      	mov	r1, r3
 80013cc:	480f      	ldr	r0, [pc, #60]	@ (800140c <HAL_ETH_MspInit+0x168>)
 80013ce:	f004 ffa3 	bl	8006318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013d2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e4:	230b      	movs	r3, #11
 80013e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ec:	4619      	mov	r1, r3
 80013ee:	4808      	ldr	r0, [pc, #32]	@ (8001410 <HAL_ETH_MspInit+0x16c>)
 80013f0:	f004 ff92 	bl	8006318 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 80013f4:	bf00      	nop
 80013f6:	3738      	adds	r7, #56	@ 0x38
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40028000 	.word	0x40028000
 8001400:	40023800 	.word	0x40023800
 8001404:	40020800 	.word	0x40020800
 8001408:	40020000 	.word	0x40020000
 800140c:	40020400 	.word	0x40020400
 8001410:	40021800 	.word	0x40021800

08001414 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001424:	d10b      	bne.n	800143e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001426:	4b09      	ldr	r3, [pc, #36]	@ (800144c <HAL_TIM_Base_MspInit+0x38>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	4a08      	ldr	r2, [pc, #32]	@ (800144c <HAL_TIM_Base_MspInit+0x38>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6413      	str	r3, [r2, #64]	@ 0x40
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_TIM_Base_MspInit+0x38>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b0ae      	sub	sp, #184	@ 0xb8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2290      	movs	r2, #144	@ 0x90
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f009 f938 	bl	800a6e6 <memset>
  if(huart->Instance==USART3)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a3d      	ldr	r2, [pc, #244]	@ (8001570 <HAL_UART_MspInit+0x120>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d172      	bne.n	8001566 <HAL_UART_MspInit+0x116>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001484:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001486:	2300      	movs	r3, #0
 8001488:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4618      	mov	r0, r3
 8001490:	f005 ff76 	bl	8007380 <HAL_RCCEx_PeriphCLKConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800149a:	f7ff fdf1 	bl	8001080 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800149e:	4b35      	ldr	r3, [pc, #212]	@ (8001574 <HAL_UART_MspInit+0x124>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	4a34      	ldr	r2, [pc, #208]	@ (8001574 <HAL_UART_MspInit+0x124>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014aa:	4b32      	ldr	r3, [pc, #200]	@ (8001574 <HAL_UART_MspInit+0x124>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001574 <HAL_UART_MspInit+0x124>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001574 <HAL_UART_MspInit+0x124>)
 80014bc:	f043 0308 	orr.w	r3, r3, #8
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001574 <HAL_UART_MspInit+0x124>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0308 	and.w	r3, r3, #8
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014e8:	2307      	movs	r3, #7
 80014ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4820      	ldr	r0, [pc, #128]	@ (8001578 <HAL_UART_MspInit+0x128>)
 80014f6:	f004 ff0f 	bl	8006318 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80014fa:	4b20      	ldr	r3, [pc, #128]	@ (800157c <HAL_UART_MspInit+0x12c>)
 80014fc:	4a20      	ldr	r2, [pc, #128]	@ (8001580 <HAL_UART_MspInit+0x130>)
 80014fe:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001500:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <HAL_UART_MspInit+0x12c>)
 8001502:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001506:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001508:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <HAL_UART_MspInit+0x12c>)
 800150a:	2240      	movs	r2, #64	@ 0x40
 800150c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800150e:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <HAL_UART_MspInit+0x12c>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <HAL_UART_MspInit+0x12c>)
 8001516:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800151a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <HAL_UART_MspInit+0x12c>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001522:	4b16      	ldr	r3, [pc, #88]	@ (800157c <HAL_UART_MspInit+0x12c>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <HAL_UART_MspInit+0x12c>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800152e:	4b13      	ldr	r3, [pc, #76]	@ (800157c <HAL_UART_MspInit+0x12c>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001534:	4b11      	ldr	r3, [pc, #68]	@ (800157c <HAL_UART_MspInit+0x12c>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800153a:	4810      	ldr	r0, [pc, #64]	@ (800157c <HAL_UART_MspInit+0x12c>)
 800153c:	f003 ff94 	bl	8005468 <HAL_DMA_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001546:	f7ff fd9b 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a0b      	ldr	r2, [pc, #44]	@ (800157c <HAL_UART_MspInit+0x12c>)
 800154e:	671a      	str	r2, [r3, #112]	@ 0x70
 8001550:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <HAL_UART_MspInit+0x12c>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2100      	movs	r1, #0
 800155a:	2027      	movs	r0, #39	@ 0x27
 800155c:	f003 fd69 	bl	8005032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001560:	2027      	movs	r0, #39	@ 0x27
 8001562:	f003 fd82 	bl	800506a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001566:	bf00      	nop
 8001568:	37b8      	adds	r7, #184	@ 0xb8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40004800 	.word	0x40004800
 8001574:	40023800 	.word	0x40023800
 8001578:	40020c00 	.word	0x40020c00
 800157c:	2000060c 	.word	0x2000060c
 8001580:	40026058 	.word	0x40026058

08001584 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b0ae      	sub	sp, #184	@ 0xb8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2290      	movs	r2, #144	@ 0x90
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f009 f89e 	bl	800a6e6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015b2:	d159      	bne.n	8001668 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80015b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80015b8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4618      	mov	r0, r3
 80015c6:	f005 fedb 	bl	8007380 <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80015d0:	f7ff fd56 	bl	8001080 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d4:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <HAL_PCD_MspInit+0xec>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d8:	4a25      	ldr	r2, [pc, #148]	@ (8001670 <HAL_PCD_MspInit+0xec>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e0:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <HAL_PCD_MspInit+0xec>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015ec:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80015f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001606:	230a      	movs	r3, #10
 8001608:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001610:	4619      	mov	r1, r3
 8001612:	4818      	ldr	r0, [pc, #96]	@ (8001674 <HAL_PCD_MspInit+0xf0>)
 8001614:	f004 fe80 	bl	8006318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001618:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800161c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800162c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001630:	4619      	mov	r1, r3
 8001632:	4810      	ldr	r0, [pc, #64]	@ (8001674 <HAL_PCD_MspInit+0xf0>)
 8001634:	f004 fe70 	bl	8006318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001638:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <HAL_PCD_MspInit+0xec>)
 800163a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800163c:	4a0c      	ldr	r2, [pc, #48]	@ (8001670 <HAL_PCD_MspInit+0xec>)
 800163e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001642:	6353      	str	r3, [r2, #52]	@ 0x34
 8001644:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_PCD_MspInit+0xec>)
 8001646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <HAL_PCD_MspInit+0xec>)
 8001652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001654:	4a06      	ldr	r2, [pc, #24]	@ (8001670 <HAL_PCD_MspInit+0xec>)
 8001656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800165a:	6453      	str	r3, [r2, #68]	@ 0x44
 800165c:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <HAL_PCD_MspInit+0xec>)
 800165e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001668:	bf00      	nop
 800166a:	37b8      	adds	r7, #184	@ 0xb8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	40020000 	.word	0x40020000

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <NMI_Handler+0x4>

08001680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <HardFault_Handler+0x4>

08001688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <MemManage_Handler+0x4>

08001690 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <UsageFault_Handler+0x4>

080016a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ce:	f002 ff6f 	bl	80045b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <DMA1_Stream3_IRQHandler+0x10>)
 80016de:	f004 f863 	bl	80057a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000060c 	.word	0x2000060c

080016ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <DMA1_Stream5_IRQHandler+0x10>)
 80016f2:	f004 f859 	bl	80057a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000428 	.word	0x20000428

08001700 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001704:	4802      	ldr	r0, [pc, #8]	@ (8001710 <USART3_IRQHandler+0x10>)
 8001706:	f006 ff17 	bl	8008538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000584 	.word	0x20000584

08001714 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001718:	4802      	ldr	r0, [pc, #8]	@ (8001724 <DMA2_Stream0_IRQHandler+0x10>)
 800171a:	f004 f845 	bl	80057a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200003b4 	.word	0x200003b4

08001728 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return 1;
 800172c:	2301      	movs	r3, #1
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_kill>:

int _kill(int pid, int sig)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001742:	f009 f823 	bl	800a78c <__errno>
 8001746:	4603      	mov	r3, r0
 8001748:	2216      	movs	r2, #22
 800174a:	601a      	str	r2, [r3, #0]
  return -1;
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_exit>:

void _exit (int status)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ffe7 	bl	8001738 <_kill>
  while (1) {}    /* Make sure we hang here */
 800176a:	bf00      	nop
 800176c:	e7fd      	b.n	800176a <_exit+0x12>

0800176e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e00a      	b.n	8001796 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001780:	f3af 8000 	nop.w
 8001784:	4601      	mov	r1, r0
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	1c5a      	adds	r2, r3, #1
 800178a:	60ba      	str	r2, [r7, #8]
 800178c:	b2ca      	uxtb	r2, r1
 800178e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	429a      	cmp	r2, r3
 800179c:	dbf0      	blt.n	8001780 <_read+0x12>
  }

  return len;
 800179e:	687b      	ldr	r3, [r7, #4]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e009      	b.n	80017ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	60ba      	str	r2, [r7, #8]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe ff2a 	bl	800061c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	dbf1      	blt.n	80017ba <_write+0x12>
  }
  return len;
 80017d6:	687b      	ldr	r3, [r7, #4]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_close>:

int _close(int file)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001808:	605a      	str	r2, [r3, #4]
  return 0;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <_isatty>:

int _isatty(int file)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001820:	2301      	movs	r3, #1
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800182e:	b480      	push	{r7}
 8001830:	b085      	sub	sp, #20
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001850:	4a14      	ldr	r2, [pc, #80]	@ (80018a4 <_sbrk+0x5c>)
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <_sbrk+0x60>)
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800185c:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <_sbrk+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001864:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <_sbrk+0x64>)
 8001866:	4a12      	ldr	r2, [pc, #72]	@ (80018b0 <_sbrk+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800186a:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	429a      	cmp	r2, r3
 8001876:	d207      	bcs.n	8001888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001878:	f008 ff88 	bl	800a78c <__errno>
 800187c:	4603      	mov	r3, r0
 800187e:	220c      	movs	r2, #12
 8001880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	e009      	b.n	800189c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001888:	4b08      	ldr	r3, [pc, #32]	@ (80018ac <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188e:	4b07      	ldr	r3, [pc, #28]	@ (80018ac <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	4a05      	ldr	r2, [pc, #20]	@ (80018ac <_sbrk+0x64>)
 8001898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20080000 	.word	0x20080000
 80018a8:	00000400 	.word	0x00000400
 80018ac:	20003fd8 	.word	0x20003fd8
 80018b0:	20004130 	.word	0x20004130

080018b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b8:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <SystemInit+0x20>)
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018be:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <SystemInit+0x20>)
 80018c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001910 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018dc:	f7ff ffea 	bl	80018b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e0:	480c      	ldr	r0, [pc, #48]	@ (8001914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018e2:	490d      	ldr	r1, [pc, #52]	@ (8001918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018e4:	4a0d      	ldr	r2, [pc, #52]	@ (800191c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e8:	e002      	b.n	80018f0 <LoopCopyDataInit>

080018ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ee:	3304      	adds	r3, #4

080018f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f4:	d3f9      	bcc.n	80018ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001924 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018fc:	e001      	b.n	8001902 <LoopFillZerobss>

080018fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001900:	3204      	adds	r2, #4

08001902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001904:	d3fb      	bcc.n	80018fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001906:	f008 ff47 	bl	800a798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800190a:	f7ff f85d 	bl	80009c8 <main>
  bx  lr    
 800190e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001910:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800191c:	08020a40 	.word	0x08020a40
  ldr r2, =_sbss
 8001920:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8001924:	2000412c 	.word	0x2000412c

08001928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC_IRQHandler>

0800192a <arm_cmplx_mag_f32>:
#else
ARM_DSP_ATTRIBUTE void arm_cmplx_mag_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 800192a:	b480      	push	{r7}
 800192c:	b08b      	sub	sp, #44	@ 0x2c
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 800193a:	e030      	b.n	800199e <arm_cmplx_mag_f32+0x74>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1d1a      	adds	r2, r3, #4
 8001940:	60fa      	str	r2, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	623b      	str	r3, [r7, #32]
    imag = *pSrc++;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1d1a      	adds	r2, r3, #4
 800194a:	60fa      	str	r2, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	61fb      	str	r3, [r7, #28]

    /* store result in destination buffer. */
    arm_sqrt_f32((real * real) + (imag * imag), pDst++);
 8001950:	edd7 7a08 	vldr	s15, [r7, #32]
 8001954:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001958:	edd7 7a07 	vldr	s15, [r7, #28]
 800195c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1d1a      	adds	r2, r3, #4
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	edc7 7a06 	vstr	s15, [r7, #24]
 800196e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001970:	edd7 7a06 	vldr	s15, [r7, #24]
 8001974:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	db07      	blt.n	800198e <arm_cmplx_mag_f32+0x64>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 800197e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001982:	eef1 7ae7 	vsqrt.f32	s15, s15
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	edc3 7a00 	vstr	s15, [r3]
  #endif
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 800198c:	e004      	b.n	8001998 <arm_cmplx_mag_f32+0x6e>
    }
    else
    {
      *pOut = 0.0f;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001996:	bf00      	nop

    /* Decrement loop counter */
    blkCnt--;
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	3b01      	subs	r3, #1
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (blkCnt > 0U)
 800199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1cb      	bne.n	800193c <arm_cmplx_mag_f32+0x12>
  }

}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	372c      	adds	r7, #44	@ 0x2c
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <arm_bitreversal_32>:

ARM_DSP_ATTRIBUTE void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b089      	sub	sp, #36	@ 0x24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	460b      	mov	r3, r1
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
 80019c4:	e043      	b.n	8001a4e <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3301      	adds	r3, #1
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	4413      	add	r3, r2
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	441a      	add	r2, r3
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	68f9      	ldr	r1, [r7, #12]
 8001a02:	440b      	add	r3, r1
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	3301      	adds	r3, #1
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	441a      	add	r2, r3
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	68f9      	ldr	r1, [r7, #12]
 8001a34:	440b      	add	r3, r1
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	601a      	str	r2, [r3, #0]

    i += 2;
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8001a4e:	897b      	ldrh	r3, [r7, #10]
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d3b7      	bcc.n	80019c6 <arm_bitreversal_32+0x14>
  }
}
 8001a56:	bf00      	nop
 8001a58:	bf00      	nop
 8001a5a:	3724      	adds	r7, #36	@ 0x24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <arm_cfft_radix8by2_f32>:
  @par Size of buffers according to the target architecture and datatype:
       They are described on the page \ref transformbuffers "transform buffers".
 */

static void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0a0      	sub	sp, #128	@ 0x80
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	66bb      	str	r3, [r7, #104]	@ 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8001a74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	677b      	str	r3, [r7, #116]	@ 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	673b      	str	r3, [r7, #112]	@ 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	667b      	str	r3, [r7, #100]	@ 0x64
  pCol2 = p2;
 8001a88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a8a:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Define new length */
  L >>= 1;
 8001a8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a8e:	085b      	lsrs	r3, r3, #1
 8001a90:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8001a92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	4413      	add	r3, r2
 8001a9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pMid2 = p2 + L;
 8001a9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001aa2:	4413      	add	r3, r2
 8001aa4:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8001aa6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001aac:	e1b6      	b.n	8001e1c <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
    t1[1] = p1[1];
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    t1[2] = p1[2];
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	643b      	str	r3, [r7, #64]	@ 0x40
    t1[3] = p1[3];
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	647b      	str	r3, [r7, #68]	@ 0x44

    t2[0] = p2[0];
 8001ac6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	62bb      	str	r3, [r7, #40]	@ 0x28
    t2[1] = p2[1];
 8001acc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t2[2] = p2[2];
 8001ad2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	633b      	str	r3, [r7, #48]	@ 0x30
    t2[3] = p2[3];
 8001ad8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	637b      	str	r3, [r7, #52]	@ 0x34

    t3[0] = pMid1[0];
 8001ade:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8001ae4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8001aea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8001af0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24

    t4[0] = pMid2[0];
 8001af6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8001afc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8001b02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8001b08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8001b0e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001b12:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	1d1a      	adds	r2, r3, #4
 8001b1a:	603a      	str	r2, [r7, #0]
 8001b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b20:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8001b24:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001b28:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	1d1a      	adds	r2, r3, #4
 8001b30:	603a      	str	r2, [r7, #0]
 8001b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b36:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8001b3a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001b3e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	1d1a      	adds	r2, r3, #4
 8001b46:	603a      	str	r2, [r7, #0]
 8001b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8001b50:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001b54:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	1d1a      	adds	r2, r3, #4
 8001b5c:	603a      	str	r2, [r7, #0]
 8001b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b62:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8001b66:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001b6a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b72:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    t2[1] = t1[1] - t2[1];
 8001b76:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001b7a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b82:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[2] = t1[2] - t2[2];
 8001b86:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8001b8a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b92:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8001b96:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001b9a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001b9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    *pMid1++ = t3[0] + t4[0];
 8001ba6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001baa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001bb0:	1d1a      	adds	r2, r3, #4
 8001bb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb8:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8001bbc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001bc6:	1d1a      	adds	r2, r3, #4
 8001bc8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bce:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 8001bd2:	ed97 7a08 	vldr	s14, [r7, #32]
 8001bd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001bdc:	1d1a      	adds	r2, r3, #4
 8001bde:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8001be8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001bec:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bf0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001bf2:	1d1a      	adds	r2, r3, #4
 8001bf4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfa:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8001bfe:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c0a:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 8001c0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c12:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1a:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8001c1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c22:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c2a:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8001c2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c32:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c3a:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8001c3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c40:	1d1a      	adds	r2, r3, #4
 8001c42:	673a      	str	r2, [r7, #112]	@ 0x70
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 8001c48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c4a:	1d1a      	adds	r2, r3, #4
 8001c4c:	673a      	str	r2, [r7, #112]	@ 0x70
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8001c52:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c56:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[1] * twI;
 8001c62:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c66:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6e:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[1] * twR;
 8001c72:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c76:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7e:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[0] * twI;
 8001c82:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c86:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8001c92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c94:	1d1a      	adds	r2, r3, #4
 8001c96:	677a      	str	r2, [r7, #116]	@ 0x74
 8001c98:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001c9c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8001ca8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001caa:	1d1a      	adds	r2, r3, #4
 8001cac:	677a      	str	r2, [r7, #116]	@ 0x74
 8001cae:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001cb2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001cb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cba:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8001cbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cca:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[1] * twR;
 8001cce:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cda:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[1] * twI;
 8001cde:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ce2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cea:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[0] * twR;
 8001cee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cf2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cfa:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 8001cfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d00:	1d1a      	adds	r2, r3, #4
 8001d02:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001d04:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001d08:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d10:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8001d14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d16:	1d1a      	adds	r2, r3, #4
 8001d18:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001d1a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001d1e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d26:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8001d2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d2c:	1d1a      	adds	r2, r3, #4
 8001d2e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 8001d34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d36:	1d1a      	adds	r2, r3, #4
 8001d38:	673a      	str	r2, [r7, #112]	@ 0x70
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	65bb      	str	r3, [r7, #88]	@ 0x58

    m0 = t2[2] * twR;
 8001d3e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001d42:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[3] * twI;
 8001d4e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d52:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[3] * twR;
 8001d5e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001d62:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[2] * twI;
 8001d6e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001d72:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *p2++ = m0 + m1;
 8001d7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d80:	1d1a      	adds	r2, r3, #4
 8001d82:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d84:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001d88:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d90:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8001d94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d96:	1d1a      	adds	r2, r3, #4
 8001d98:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d9a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001d9e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da6:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8001daa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dae:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[3] * twR;
 8001dba:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dbe:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc6:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[3] * twI;
 8001dca:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dce:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd6:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[2] * twR;
 8001dda:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dde:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 8001dea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001dec:	1d1a      	adds	r2, r3, #4
 8001dee:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001df0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001df4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dfc:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8001e00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e02:	1d1a      	adds	r2, r3, #4
 8001e04:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001e06:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e0a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e12:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8001e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f47f ae45 	bne.w	8001aae <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8001e24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e26:	b299      	uxth	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001e30:	f001 f80e 	bl	8002e50 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8001e34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e36:	b299      	uxth	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001e40:	f001 f806 	bl	8002e50 <arm_radix8_butterfly_f32>
}
 8001e44:	bf00      	nop
 8001e46:	3780      	adds	r7, #128	@ 0x80
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <arm_cfft_radix8by4_f32>:

static void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b0ac      	sub	sp, #176	@ 0xb0
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	085b      	lsrs	r3, r3, #1
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8001e62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float32_t * p3 = p2 + L;
 8001e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float32_t * p4 = p3 + L;
 8001e80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pCol2 = p2;
 8001e94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e98:	67bb      	str	r3, [r7, #120]	@ 0x78
    pCol3 = p3;
 8001e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e9e:	677b      	str	r3, [r7, #116]	@ 0x74
    pCol4 = p4;
 8001ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ea4:	673b      	str	r3, [r7, #112]	@ 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8001ea6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pEnd2 = p3 - 1;
 8001eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001eb4:	3b04      	subs	r3, #4
 8001eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    pEnd3 = p4 - 1;
 8001eba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    pEnd4 = pEnd3 + L;
 8001ec4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001ece:	4413      	add	r3, r2
 8001ed0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001edc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ee8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    L >>= 1;
 8001eec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ef0:	085b      	lsrs	r3, r3, #1
 8001ef2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    twMod3 = 4;
 8001efa:	2304      	movs	r3, #4
 8001efc:	66bb      	str	r3, [r7, #104]	@ 0x68
    twMod4 = 6;
 8001efe:	2306      	movs	r3, #6
 8001f00:	667b      	str	r3, [r7, #100]	@ 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	ed93 7a00 	vldr	s14, [r3]
 8001f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f14:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	ed93 7a00 	vldr	s14, [r3]
 8001f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f2a:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	3304      	adds	r3, #4
 8001f32:	ed93 7a00 	vldr	s14, [r3]
 8001f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	edd3 7a00 	vldr	s15, [r3]
 8001f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f44:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	3304      	adds	r3, #4
 8001f4c:	ed93 7a00 	vldr	s14, [r3]
 8001f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f54:	3304      	adds	r3, #4
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001f62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f66:	3304      	adds	r3, #4
 8001f68:	ed93 7a00 	vldr	s14, [r3]
 8001f6c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001f70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f74:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f78:	3304      	adds	r3, #4
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f82:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001f86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001f92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fa2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001fb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fc2:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001fc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fca:	3304      	adds	r3, #4
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001fd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fdc:	3304      	adds	r3, #4
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe6:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001fee:	3304      	adds	r3, #4
 8001ff0:	edd3 7a00 	vldr	s15, [r3]
 8001ff4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001ff8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ffc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002000:	3304      	adds	r3, #4
 8002002:	edd3 7a00 	vldr	s15, [r3]
 8002006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200a:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800200e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002012:	ed93 7a00 	vldr	s14, [r3]
 8002016:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800201a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800201e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800202a:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800202e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002032:	ed93 7a00 	vldr	s14, [r3]
 8002036:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800203a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800203e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002042:	edd3 7a00 	vldr	s15, [r3]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	1d1a      	adds	r2, r3, #4
 800204a:	603a      	str	r2, [r7, #0]
 800204c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002050:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002054:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002058:	3304      	adds	r3, #4
 800205a:	ed93 7a00 	vldr	s14, [r3]
 800205e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002062:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002066:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800206a:	3304      	adds	r3, #4
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	1d1a      	adds	r2, r3, #4
 8002074:	603a      	str	r2, [r7, #0]
 8002076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207a:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 800207e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002082:	1d1a      	adds	r2, r3, #4
 8002084:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002088:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800208a:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800208c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002090:	1d1a      	adds	r2, r3, #4
 8002092:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002098:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800209a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800209e:	1d1a      	adds	r2, r3, #4
 80020a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80020a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020ac:	1d1a      	adds	r2, r3, #4
 80020ae:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020b2:	6a3a      	ldr	r2, [r7, #32]
 80020b4:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80020b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020ba:	1d1a      	adds	r2, r3, #4
 80020bc:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80020c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020c8:	1d1a      	adds	r2, r3, #4
 80020ca:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80020d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80020da:	4413      	add	r3, r2
 80020dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tw3 += twMod3;
 80020e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80020e8:	4413      	add	r3, r2
 80020ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tw4 += twMod4;
 80020ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80020f6:	4413      	add	r3, r2
 80020f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80020fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002100:	3b02      	subs	r3, #2
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002108:	e31c      	b.n	8002744 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = p1[0] - p3[0];
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	ed93 7a00 	vldr	s14, [r3]
 8002126:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002132:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	3304      	adds	r3, #4
 800213a:	ed93 7a00 	vldr	s14, [r3]
 800213e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002142:	3304      	adds	r3, #4
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = p1[1] - p3[1];
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	3304      	adds	r3, #4
 8002154:	ed93 7a00 	vldr	s14, [r3]
 8002158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800215c:	3304      	adds	r3, #4
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002166:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800216a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800216e:	3304      	adds	r3, #4
 8002170:	ed93 7a00 	vldr	s14, [r3]
 8002174:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002178:	ee37 7a27 	vadd.f32	s14, s14, s15
 800217c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002180:	3304      	adds	r3, #4
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800218a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 800218e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800219a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800219e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021aa:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 80021ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80021ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ca:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 80021ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021d2:	3304      	adds	r3, #4
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80021dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021e4:	3304      	adds	r3, #4
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ee:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 80021f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021f6:	3304      	adds	r3, #4
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002200:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002204:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002208:	3304      	adds	r3, #4
 800220a:	edd3 7a00 	vldr	s15, [r3]
 800220e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002212:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002216:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800221a:	ed93 7a00 	vldr	s14, [r3]
 800221e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002226:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002232:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002236:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800223a:	ed93 7a00 	vldr	s14, [r3]
 800223e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002242:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002246:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	1d1a      	adds	r2, r3, #4
 8002252:	603a      	str	r2, [r7, #0]
 8002254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002258:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800225c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002260:	3304      	adds	r3, #4
 8002262:	ed93 7a00 	vldr	s14, [r3]
 8002266:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800226a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800226e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002272:	3304      	adds	r3, #4
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	1d1a      	adds	r2, r3, #4
 800227c:	603a      	str	r2, [r7, #0]
 800227e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002282:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8002286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800228a:	3b04      	subs	r3, #4
 800228c:	ed93 7a00 	vldr	s14, [r3]
 8002290:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002294:	3b04      	subs	r3, #4
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80022a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022a6:	3b04      	subs	r3, #4
 80022a8:	ed93 7a00 	vldr	s14, [r3]
 80022ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022b0:	3b04      	subs	r3, #4
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ba:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80022be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022c2:	ed93 7a00 	vldr	s14, [r3]
 80022c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d2:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 80022d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022da:	ed93 7a00 	vldr	s14, [r3]
 80022de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022e2:	edd3 7a00 	vldr	s15, [r3]
 80022e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ea:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 80022ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80022f2:	ed93 7a00 	vldr	s14, [r3]
 80022f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002302:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800230e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002312:	ed93 7a00 	vldr	s14, [r3]
 8002316:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002326:	3b04      	subs	r3, #4
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002330:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002334:	3b04      	subs	r3, #4
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8002342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002346:	3b04      	subs	r3, #4
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002350:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002354:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002358:	3b04      	subs	r3, #4
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002362:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8002366:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002372:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800237a:	edd3 7a00 	vldr	s15, [r3]
 800237e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002382:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8002386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800238a:	ed93 7a00 	vldr	s14, [r3]
 800238e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ee37 7a67 	vsub.f32	s14, s14, s15
 800239a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800239e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023a2:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80023a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023aa:	3b04      	subs	r3, #4
 80023ac:	ed93 7a00 	vldr	s14, [r3]
 80023b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023b4:	3b04      	subs	r3, #4
 80023b6:	edd3 7a00 	vldr	s15, [r3]
 80023ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023be:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80023c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c6:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80023ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023ce:	ed93 7a00 	vldr	s14, [r3]
 80023d2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80023d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023e6:	1f1a      	subs	r2, r3, #4
 80023e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80023ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f0:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80023f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023f8:	3b04      	subs	r3, #4
 80023fa:	ed93 7a00 	vldr	s14, [r3]
 80023fe:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800240a:	3b04      	subs	r3, #4
 800240c:	edd3 7a00 	vldr	s15, [r3]
 8002410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002414:	1f1a      	subs	r2, r3, #4
 8002416:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800241a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800241e:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8002422:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002426:	1d1a      	adds	r2, r3, #4
 8002428:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = *tw2++;
 8002430:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002434:	1d1a      	adds	r2, r3, #4
 8002436:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800243e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002442:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[1] * twI;
 800244e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002452:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[1] * twR;
 800245e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002462:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[0] * twI;
 800246e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002472:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p2++ = m0 + m1;
 800247e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002482:	1d1a      	adds	r2, r3, #4
 8002484:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002488:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800248c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002494:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8002498:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800249c:	1d1a      	adds	r2, r3, #4
 800249e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80024a2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80024a6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80024aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ae:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 80024b2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80024b6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80024ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024be:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[2] * twR;
 80024c2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80024c6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80024ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ce:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[2] * twI;
 80024d2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80024d6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80024da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024de:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[3] * twR;
 80024e2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80024e6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80024ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ee:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd2-- = m0 - m1;
 80024f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024f6:	1f1a      	subs	r2, r3, #4
 80024f8:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80024fc:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002500:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002508:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 800250c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002510:	1f1a      	subs	r2, r3, #4
 8002512:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002516:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800251a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800251e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002522:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8002526:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw3[1];
 800252e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002532:	3304      	adds	r3, #4
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw3 += twMod3;
 8002538:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002540:	4413      	add	r3, r2
 8002542:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      /* Top */
      m0 = t3[0] * twR;
 8002546:	edd7 7a07 	vldr	s15, [r7, #28]
 800254a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800254e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002552:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t3[1] * twI;
 8002556:	edd7 7a08 	vldr	s15, [r7, #32]
 800255a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800255e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002562:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t3[1] * twR;
 8002566:	edd7 7a08 	vldr	s15, [r7, #32]
 800256a:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800256e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002572:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t3[0] * twI;
 8002576:	edd7 7a07 	vldr	s15, [r7, #28]
 800257a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800257e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002582:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p3++ = m0 + m1;
 8002586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800258a:	1d1a      	adds	r2, r3, #4
 800258c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002590:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002594:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259c:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 80025a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025a4:	1d1a      	adds	r2, r3, #4
 80025a6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80025aa:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80025ae:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80025b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b6:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 80025ba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80025be:	eef1 7a67 	vneg.f32	s15, s15
 80025c2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80025c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ca:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 =  t3[2] * twI;
 80025ce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80025d2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025da:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 =  t3[2] * twR;
 80025de:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80025e2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 =  t3[3] * twI;
 80025ee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80025f2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80025f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fa:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd3-- = m0 - m1;
 80025fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002602:	1f1a      	subs	r2, r3, #4
 8002604:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002608:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800260c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002614:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8002618:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800261c:	1f1a      	subs	r2, r3, #4
 800261e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002622:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002626:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800262a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800262e:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8002632:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw4[1];
 800263a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800263e:	3304      	adds	r3, #4
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw4 += twMod4;
 8002644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800264c:	4413      	add	r3, r2
 800264e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      /* Top */
      m0 = t4[0] * twR;
 8002652:	edd7 7a03 	vldr	s15, [r7, #12]
 8002656:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800265a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[1] * twI;
 8002662:	edd7 7a04 	vldr	s15, [r7, #16]
 8002666:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800266a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[1] * twR;
 8002672:	edd7 7a04 	vldr	s15, [r7, #16]
 8002676:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800267a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[0] * twI;
 8002682:	edd7 7a03 	vldr	s15, [r7, #12]
 8002686:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800268a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p4++ = m0 + m1;
 8002692:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002696:	1d1a      	adds	r2, r3, #4
 8002698:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800269c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80026a0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80026a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a8:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 80026ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026b0:	1d1a      	adds	r2, r3, #4
 80026b2:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80026b6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80026ba:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80026be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c2:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 80026c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80026ca:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[2] * twR;
 80026d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80026da:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80026de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[2] * twI;
 80026e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80026ea:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[3] * twR;
 80026f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80026fa:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80026fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002702:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd4-- = m0 - m1;
 8002706:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800270a:	1f1a      	subs	r2, r3, #4
 800270c:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8002710:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002714:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002718:	ee77 7a67 	vsub.f32	s15, s14, s15
 800271c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8002720:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002724:	1f1a      	subs	r2, r3, #4
 8002726:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800272a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800272e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002736:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 800273a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800273e:	3b01      	subs	r3, #1
 8002740:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002744:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002748:	2b00      	cmp	r3, #0
 800274a:	f47f acde 	bne.w	800210a <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	ed93 7a00 	vldr	s14, [r3]
 8002754:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002760:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	ed93 7a00 	vldr	s14, [r3]
 800276a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800276e:	edd3 7a00 	vldr	s15, [r3]
 8002772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002776:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	3304      	adds	r3, #4
 800277e:	ed93 7a00 	vldr	s14, [r3]
 8002782:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002786:	3304      	adds	r3, #4
 8002788:	edd3 7a00 	vldr	s15, [r3]
 800278c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002790:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	3304      	adds	r3, #4
 8002798:	ed93 7a00 	vldr	s14, [r3]
 800279c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027a0:	3304      	adds	r3, #4
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027aa:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80027ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027b2:	3304      	adds	r3, #4
 80027b4:	ed93 7a00 	vldr	s14, [r3]
 80027b8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80027bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027c4:	3304      	adds	r3, #4
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ce:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80027d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027d6:	edd3 7a00 	vldr	s15, [r3]
 80027da:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80027de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027e6:	edd3 7a00 	vldr	s15, [r3]
 80027ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ee:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80027f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80027f6:	edd3 7a00 	vldr	s15, [r3]
 80027fa:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80027fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002802:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002806:	edd3 7a00 	vldr	s15, [r3]
 800280a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800280e:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002812:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002816:	3304      	adds	r3, #4
 8002818:	edd3 7a00 	vldr	s15, [r3]
 800281c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002820:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002824:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002828:	3304      	adds	r3, #4
 800282a:	edd3 7a00 	vldr	s15, [r3]
 800282e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002832:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002836:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800283a:	3304      	adds	r3, #4
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002844:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002848:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800284c:	3304      	adds	r3, #4
 800284e:	edd3 7a00 	vldr	s15, [r3]
 8002852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002856:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800285a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800285e:	ed93 7a00 	vldr	s14, [r3]
 8002862:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002866:	ee37 7a27 	vadd.f32	s14, s14, s15
 800286a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002876:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800287a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800287e:	ed93 7a00 	vldr	s14, [r3]
 8002882:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002886:	ee37 7a27 	vadd.f32	s14, s14, s15
 800288a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	1d1a      	adds	r2, r3, #4
 8002896:	603a      	str	r2, [r7, #0]
 8002898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80028a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80028a4:	3304      	adds	r3, #4
 80028a6:	ed93 7a00 	vldr	s14, [r3]
 80028aa:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80028ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028b6:	3304      	adds	r3, #4
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	1d1a      	adds	r2, r3, #4
 80028c0:	603a      	str	r2, [r7, #0]
 80028c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c6:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 80028ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw2[1];
 80028d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028d6:	3304      	adds	r3, #4
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t2[0] * twR;
 80028dc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80028e0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80028e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t2[1] * twI;
 80028ec:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80028f0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80028f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t2[1] * twR;
 80028fc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002900:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002908:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t2[0] * twI;
 800290c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002910:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002918:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p2++ = m0 + m1;
 800291c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002920:	1d1a      	adds	r2, r3, #4
 8002922:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002926:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800292a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800292e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002932:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8002936:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800293a:	1d1a      	adds	r2, r3, #4
 800293c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002940:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002944:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800294c:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8002950:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw3[1];
 8002958:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800295c:	3304      	adds	r3, #4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t3[0] * twR;
 8002962:	edd7 7a07 	vldr	s15, [r7, #28]
 8002966:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800296a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t3[1] * twI;
 8002972:	edd7 7a08 	vldr	s15, [r7, #32]
 8002976:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800297a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t3[1] * twR;
 8002982:	edd7 7a08 	vldr	s15, [r7, #32]
 8002986:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800298a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t3[0] * twI;
 8002992:	edd7 7a07 	vldr	s15, [r7, #28]
 8002996:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800299a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800299e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p3++ = m0 + m1;
 80029a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029a6:	1d1a      	adds	r2, r3, #4
 80029a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80029ac:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80029b0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80029b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b8:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80029bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029c0:	1d1a      	adds	r2, r3, #4
 80029c2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80029c6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80029ca:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80029ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d2:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 80029d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw4[1];
 80029de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029e2:	3304      	adds	r3, #4
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t4[0] * twR;
 80029e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80029ec:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80029f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t4[1] * twI;
 80029f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80029fc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a04:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t4[1] * twR;
 8002a08:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a0c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a14:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t4[0] * twI;
 8002a18:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a1c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a24:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p4++ = m0 + m1;
 8002a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a2c:	1d1a      	adds	r2, r3, #4
 8002a2e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002a32:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002a36:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3e:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8002a42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a46:	1d1a      	adds	r2, r3, #4
 8002a48:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002a4c:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002a50:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a58:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8002a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a60:	b299      	uxth	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	2304      	movs	r3, #4
 8002a68:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002a6a:	f000 f9f1 	bl	8002e50 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8002a6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a72:	b299      	uxth	r1, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	2304      	movs	r3, #4
 8002a7a:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002a7c:	f000 f9e8 	bl	8002e50 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8002a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a84:	b299      	uxth	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002a8e:	f000 f9df 	bl	8002e50 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8002a92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a96:	b299      	uxth	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002aa0:	f000 f9d6 	bl	8002e50 <arm_radix8_butterfly_f32>
}
 8002aa4:	bf00      	nop
 8002aa6:	37b0      	adds	r7, #176	@ 0xb0
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <arm_cfft_f32>:
ARM_DSP_ATTRIBUTE void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	461a      	mov	r2, r3
 8002aba:	460b      	mov	r3, r1
 8002abc:	71fb      	strb	r3, [r7, #7]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d117      	bne.n	8002afe <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	e00d      	b.n	8002af6 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	eef1 7a67 	vneg.f32	s15, s15
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	3308      	adds	r3, #8
 8002aee:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	3301      	adds	r3, #1
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d3ed      	bcc.n	8002ada <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b04:	d040      	beq.n	8002b88 <arm_cfft_f32+0xdc>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b0c:	d845      	bhi.n	8002b9a <arm_cfft_f32+0xee>
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b14:	d033      	beq.n	8002b7e <arm_cfft_f32+0xd2>
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b1c:	d83d      	bhi.n	8002b9a <arm_cfft_f32+0xee>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b24:	d026      	beq.n	8002b74 <arm_cfft_f32+0xc8>
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b2c:	d835      	bhi.n	8002b9a <arm_cfft_f32+0xee>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b34:	d028      	beq.n	8002b88 <arm_cfft_f32+0xdc>
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b3c:	d82d      	bhi.n	8002b9a <arm_cfft_f32+0xee>
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b44:	d01b      	beq.n	8002b7e <arm_cfft_f32+0xd2>
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b4c:	d825      	bhi.n	8002b9a <arm_cfft_f32+0xee>
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b80      	cmp	r3, #128	@ 0x80
 8002b52:	d00f      	beq.n	8002b74 <arm_cfft_f32+0xc8>
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b80      	cmp	r3, #128	@ 0x80
 8002b58:	d81f      	bhi.n	8002b9a <arm_cfft_f32+0xee>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b40      	cmp	r3, #64	@ 0x40
 8002b5e:	d013      	beq.n	8002b88 <arm_cfft_f32+0xdc>
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b40      	cmp	r3, #64	@ 0x40
 8002b64:	d819      	bhi.n	8002b9a <arm_cfft_f32+0xee>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b10      	cmp	r3, #16
 8002b6a:	d003      	beq.n	8002b74 <arm_cfft_f32+0xc8>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d005      	beq.n	8002b7e <arm_cfft_f32+0xd2>
 8002b72:	e012      	b.n	8002b9a <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f7fe ff74 	bl	8001a64 <arm_cfft_radix8by2_f32>
    break;
 8002b7c:	e00d      	b.n	8002b9a <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f7ff f963 	bl	8001e4c <arm_cfft_radix8by4_f32>
    break;
 8002b86:	e008      	b.n	8002b9a <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	b299      	uxth	r1, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	2301      	movs	r3, #1
 8002b92:	68b8      	ldr	r0, [r7, #8]
 8002b94:	f000 f95c 	bl	8002e50 <arm_radix8_butterfly_f32>
    break;
 8002b98:	bf00      	nop
  }

  if ( bitReverseFlag )
 8002b9a:	79bb      	ldrb	r3, [r7, #6]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8999      	ldrh	r1, [r3, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	68b8      	ldr	r0, [r7, #8]
 8002bac:	f7fe ff01 	bl	80019b2 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d130      	bne.n	8002c18 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	ee07 3a90 	vmov	s15, r3
 8002bbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bc0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc8:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	e01c      	b.n	8002c10 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	1d1a      	adds	r2, r3, #4
 8002bda:	61ba      	str	r2, [r7, #24]
 8002bdc:	ed93 7a00 	vldr	s14, [r3]
 8002be0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be8:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	edd3 7a00 	vldr	s15, [r3]
 8002bf2:	eeb1 7a67 	vneg.f32	s14, s15
 8002bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	3304      	adds	r3, #4
 8002c08:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	61fb      	str	r3, [r7, #28]
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d3de      	bcc.n	8002bd6 <arm_cfft_f32+0x12a>
    }
  }
}
 8002c18:	bf00      	nop
 8002c1a:	3720      	adds	r7, #32
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024)
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c32:	801a      	strh	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <arm_cfft_init_2048_f32+0x44>)
 8002c3c:	899a      	ldrh	r2, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	819a      	strh	r2, [r3, #12]
 8002c42:	4b08      	ldr	r3, [pc, #32]	@ (8002c64 <arm_cfft_init_2048_f32+0x44>)
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <arm_cfft_init_2048_f32+0x44>)
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	080204c8 	.word	0x080204c8

08002c68 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024)
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	2300      	movs	r3, #0
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c7a:	801a      	strh	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <arm_cfft_init_1024_f32+0x44>)
 8002c84:	899a      	ldrh	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	819a      	strh	r2, [r3, #12]
 8002c8a:	4b08      	ldr	r3, [pc, #32]	@ (8002cac <arm_cfft_init_1024_f32+0x44>)
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <arm_cfft_init_1024_f32+0x44>)
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	080204b8 	.word	0x080204b8

08002cb0 <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256)
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	73fb      	strb	r3, [r7, #15]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc2:	801a      	strh	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <arm_cfft_init_512_f32+0x44>)
 8002ccc:	899a      	ldrh	r2, [r3, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	819a      	strh	r2, [r3, #12]
 8002cd2:	4b08      	ldr	r3, [pc, #32]	@ (8002cf4 <arm_cfft_init_512_f32+0x44>)
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <arm_cfft_init_512_f32+0x44>)
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	080204a8 	.word	0x080204a8

08002cf8 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256)
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <arm_cfft_init_256_f32+0x44>)
 8002d14:	899a      	ldrh	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	819a      	strh	r2, [r3, #12]
 8002d1a:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <arm_cfft_init_256_f32+0x44>)
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <arm_cfft_init_256_f32+0x44>)
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	08020498 	.word	0x08020498

08002d40 <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64)
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2280      	movs	r2, #128	@ 0x80
 8002d50:	801a      	strh	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	4b09      	ldr	r3, [pc, #36]	@ (8002d80 <arm_cfft_init_128_f32+0x40>)
 8002d5a:	899a      	ldrh	r2, [r3, #12]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	819a      	strh	r2, [r3, #12]
 8002d60:	4b07      	ldr	r3, [pc, #28]	@ (8002d80 <arm_cfft_init_128_f32+0x40>)
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <arm_cfft_init_128_f32+0x40>)
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d74:	4618      	mov	r0, r3
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	08020488 	.word	0x08020488

08002d84 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64)
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2240      	movs	r2, #64	@ 0x40
 8002d94:	801a      	strh	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	605a      	str	r2, [r3, #4]
 8002d9c:	4b09      	ldr	r3, [pc, #36]	@ (8002dc4 <arm_cfft_init_64_f32+0x40>)
 8002d9e:	899a      	ldrh	r2, [r3, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	819a      	strh	r2, [r3, #12]
 8002da4:	4b07      	ldr	r3, [pc, #28]	@ (8002dc4 <arm_cfft_init_64_f32+0x40>)
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <arm_cfft_init_64_f32+0x40>)
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	08020478 	.word	0x08020478

08002dc8 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16)
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	801a      	strh	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	4b09      	ldr	r3, [pc, #36]	@ (8002e08 <arm_cfft_init_32_f32+0x40>)
 8002de2:	899a      	ldrh	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	819a      	strh	r2, [r3, #12]
 8002de8:	4b07      	ldr	r3, [pc, #28]	@ (8002e08 <arm_cfft_init_32_f32+0x40>)
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <arm_cfft_init_32_f32+0x40>)
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	08020468 	.word	0x08020468

08002e0c <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the Helium and Neon versions of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16)
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	2300      	movs	r3, #0
 8002e16:	73fb      	strb	r3, [r7, #15]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	801a      	strh	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <arm_cfft_init_16_f32+0x40>)
 8002e26:	899a      	ldrh	r2, [r3, #12]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	819a      	strh	r2, [r3, #12]
 8002e2c:	4b07      	ldr	r3, [pc, #28]	@ (8002e4c <arm_cfft_init_16_f32+0x40>)
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <arm_cfft_init_16_f32+0x40>)
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	08020458 	.word	0x08020458

08002e50 <arm_radix8_butterfly_f32>:
ARM_DSP_ATTRIBUTE void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b0bd      	sub	sp, #244	@ 0xf4
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	817b      	strh	r3, [r7, #10]
 8002e60:	4613      	mov	r3, r2
 8002e62:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8002e64:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <arm_radix8_butterfly_f32+0x3c>)
 8002e66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

   n2 = fftLen;
 8002e6a:	897b      	ldrh	r3, [r7, #10]
 8002e6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

   do
   {
      n1 = n2;
 8002e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      n2 = n2 >> 3;
 8002e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e7c:	08db      	lsrs	r3, r3, #3
 8002e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      i1 = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e88:	e002      	b.n	8002e90 <arm_radix8_butterfly_f32+0x40>
 8002e8a:	bf00      	nop
 8002e8c:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8002e90:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8002e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e98:	4413      	add	r3, r2
 8002e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         i3 = i2 + n2;
 8002e9e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
         i4 = i3 + n2;
 8002eac:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         i5 = i4 + n2;
 8002eba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
         i6 = i5 + n2;
 8002ec8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         i7 = i6 + n2;
 8002ed6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ede:	4413      	add	r3, r2
 8002ee0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
         i8 = i7 + n2;
 8002ee4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eec:	4413      	add	r3, r2
 8002eee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002ef2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	ed93 7a00 	vldr	s14, [r3]
 8002f00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4413      	add	r3, r2
 8002f0a:	edd3 7a00 	vldr	s15, [r3]
 8002f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f12:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002f16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4413      	add	r3, r2
 8002f20:	ed93 7a00 	vldr	s14, [r3]
 8002f24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	edd3 7a00 	vldr	s15, [r3]
 8002f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f36:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4413      	add	r3, r2
 8002f44:	ed93 7a00 	vldr	s14, [r3]
 8002f48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4413      	add	r3, r2
 8002f52:	edd3 7a00 	vldr	s15, [r3]
 8002f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002f5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4413      	add	r3, r2
 8002f68:	ed93 7a00 	vldr	s14, [r3]
 8002f6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4413      	add	r3, r2
 8002f76:	edd3 7a00 	vldr	s15, [r3]
 8002f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7e:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002f82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	ed93 7a00 	vldr	s14, [r3]
 8002f90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	edd3 7a00 	vldr	s15, [r3]
 8002f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa2:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002fa6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	ed93 7a00 	vldr	s14, [r3]
 8002fb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc6:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002fca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	ed93 7a00 	vldr	s14, [r3]
 8002fd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fea:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002fee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	ed93 7a00 	vldr	s14, [r3]
 8002ffc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4413      	add	r3, r2
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         t1 = r1 - r3;
 8003012:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003016:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800301a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800301e:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r1 = r1 + r3;
 8003022:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003026:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800302a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302e:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r3 = r2 - r4;
 8003032:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8003036:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800303a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800303e:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r2 = r2 + r4;
 8003042:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8003046:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800304a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800304e:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1] = r1 + r2;
 8003052:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003060:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003068:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800306c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4413      	add	r3, r2
 8003076:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800307a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800307e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003082:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003086:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	3304      	adds	r3, #4
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4413      	add	r3, r2
 8003092:	ed93 7a00 	vldr	s14, [r3]
 8003096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	3304      	adds	r3, #4
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4413      	add	r3, r2
 80030a2:	edd3 7a00 	vldr	s15, [r3]
 80030a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030aa:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80030ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	3304      	adds	r3, #4
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4413      	add	r3, r2
 80030ba:	ed93 7a00 	vldr	s14, [r3]
 80030be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	3304      	adds	r3, #4
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d2:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80030d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	3304      	adds	r3, #4
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4413      	add	r3, r2
 80030e2:	ed93 7a00 	vldr	s14, [r3]
 80030e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	3304      	adds	r3, #4
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4413      	add	r3, r2
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fa:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80030fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	3304      	adds	r3, #4
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4413      	add	r3, r2
 800310a:	ed93 7a00 	vldr	s14, [r3]
 800310e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	3304      	adds	r3, #4
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4413      	add	r3, r2
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003122:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8003126:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	3304      	adds	r3, #4
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	ed93 7a00 	vldr	s14, [r3]
 8003136:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	3304      	adds	r3, #4
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4413      	add	r3, r2
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800314e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	3304      	adds	r3, #4
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4413      	add	r3, r2
 800315a:	ed93 7a00 	vldr	s14, [r3]
 800315e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	3304      	adds	r3, #4
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4413      	add	r3, r2
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003172:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003176:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	3304      	adds	r3, #4
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	ed93 7a00 	vldr	s14, [r3]
 8003186:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	3304      	adds	r3, #4
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4413      	add	r3, r2
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319a:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800319e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	3304      	adds	r3, #4
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	ed93 7a00 	vldr	s14, [r3]
 80031ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	3304      	adds	r3, #4
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	edd3 7a00 	vldr	s15, [r3]
 80031be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031c2:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         t2 = r1 - s3;
 80031c6:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80031ca:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80031ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d2:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         r1 = r1 + s3;
 80031d6:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80031da:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80031de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e2:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s3 = r2 - r4;
 80031e6:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80031ea:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80031ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         r2 = r2 + r4;
 80031f6:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80031fa:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80031fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003202:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8003206:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	3304      	adds	r3, #4
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4413      	add	r3, r2
 8003212:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003216:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800321a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8003222:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	3304      	adds	r3, #4
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003232:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800323a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800323e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 800324c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003254:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8003258:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4413      	add	r3, r2
 8003262:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003266:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800326a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8003272:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	3304      	adds	r3, #4
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4413      	add	r3, r2
 800327e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003282:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800328a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800328e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	3304      	adds	r3, #4
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4413      	add	r3, r2
 800329a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800329e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80032a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a6:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80032aa:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80032ae:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80032b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b6:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80032ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032be:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r6 = (r6 + r8) * C81;
 80032c2:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80032c6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80032ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ce:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80032d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d6:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r2 = (s6 - s8) * C81;
 80032da:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80032de:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80032e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e6:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = (s6 + s8) * C81;
 80032f2:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80032f6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80032fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fe:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003306:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         t1 = r5 - r1;
 800330a:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800330e:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003316:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r5 = r5 + r1;
 800331a:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800331e:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003322:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003326:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r8 = r7 - r6;
 800332a:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800332e:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003336:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         r7 = r7 + r6;
 800333a:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 800333e:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003346:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         t2 = s5 - r2;
 800334a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800334e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003356:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         s5 = s5 + r2;
 800335a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800335e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003366:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         s8 = s7 - s6;
 800336a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800336e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003372:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003376:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         s7 = s7 + s6;
 800337a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800337e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003386:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         pSrc[2 * i2]     = r5 + s7;
 800338a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4413      	add	r3, r2
 8003394:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003398:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800339c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80033a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4413      	add	r3, r2
 80033ae:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80033b2:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80033b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ba:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80033be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80033cc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80033d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033d4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80033d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4413      	add	r3, r2
 80033e2:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80033e6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80033ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ee:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80033f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	3304      	adds	r3, #4
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4413      	add	r3, r2
 80033fe:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003402:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800340a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800340e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	3304      	adds	r3, #4
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4413      	add	r3, r2
 800341a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800341e:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003426:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800342a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	3304      	adds	r3, #4
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4413      	add	r3, r2
 8003436:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800343a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800343e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003442:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8003446:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	3304      	adds	r3, #4
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4413      	add	r3, r2
 8003452:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003456:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800345a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345e:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8003462:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800346a:	4413      	add	r3, r2
 800346c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      } while (i1 < fftLen);
 8003470:	897b      	ldrh	r3, [r7, #10]
 8003472:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003476:	429a      	cmp	r2, r3
 8003478:	f4ff ad0a 	bcc.w	8002e90 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 800347c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003480:	2b07      	cmp	r3, #7
 8003482:	f240 84e3 	bls.w	8003e4c <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      j = 1;
 800348c:	2301      	movs	r3, #1
 800348e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8003492:	893b      	ldrh	r3, [r7, #8]
 8003494:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003498:	4413      	add	r3, r2
 800349a:	67fb      	str	r3, [r7, #124]	@ 0x7c
         ia1 = id;
 800349c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800349e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
         ia2 = ia1 + id;
 80034a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80034a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034a8:	4413      	add	r3, r2
 80034aa:	67bb      	str	r3, [r7, #120]	@ 0x78
         ia3 = ia2 + id;
 80034ac:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80034ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034b0:	4413      	add	r3, r2
 80034b2:	677b      	str	r3, [r7, #116]	@ 0x74
         ia4 = ia3 + id;
 80034b4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80034b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034b8:	4413      	add	r3, r2
 80034ba:	673b      	str	r3, [r7, #112]	@ 0x70
         ia5 = ia4 + id;
 80034bc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80034be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034c0:	4413      	add	r3, r2
 80034c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
         ia6 = ia5 + id;
 80034c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034c8:	4413      	add	r3, r2
 80034ca:	66bb      	str	r3, [r7, #104]	@ 0x68
         ia7 = ia6 + id;
 80034cc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80034ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034d0:	4413      	add	r3, r2
 80034d2:	667b      	str	r3, [r7, #100]	@ 0x64

         co2 = pCoef[2 * ia1];
 80034d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	4413      	add	r3, r2
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	663b      	str	r3, [r7, #96]	@ 0x60
         co3 = pCoef[2 * ia2];
 80034e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
         co4 = pCoef[2 * ia3];
 80034ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	65bb      	str	r3, [r7, #88]	@ 0x58
         co5 = pCoef[2 * ia4];
 80034fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	657b      	str	r3, [r7, #84]	@ 0x54
         co6 = pCoef[2 * ia5];
 8003506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	4413      	add	r3, r2
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	653b      	str	r3, [r7, #80]	@ 0x50
         co7 = pCoef[2 * ia6];
 8003512:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	64fb      	str	r3, [r7, #76]	@ 0x4c
         co8 = pCoef[2 * ia7];
 800351e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	64bb      	str	r3, [r7, #72]	@ 0x48
         si2 = pCoef[2 * ia1 + 1];
 800352a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	3304      	adds	r3, #4
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	647b      	str	r3, [r7, #68]	@ 0x44
         si3 = pCoef[2 * ia2 + 1];
 800353a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	3304      	adds	r3, #4
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4413      	add	r3, r2
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	643b      	str	r3, [r7, #64]	@ 0x40
         si4 = pCoef[2 * ia3 + 1];
 8003548:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	3304      	adds	r3, #4
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	63fb      	str	r3, [r7, #60]	@ 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8003556:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	3304      	adds	r3, #4
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	4413      	add	r3, r2
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	63bb      	str	r3, [r7, #56]	@ 0x38
         si6 = pCoef[2 * ia5 + 1];
 8003564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	3304      	adds	r3, #4
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	4413      	add	r3, r2
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	637b      	str	r3, [r7, #52]	@ 0x34
         si7 = pCoef[2 * ia6 + 1];
 8003572:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	3304      	adds	r3, #4
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	4413      	add	r3, r2
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	633b      	str	r3, [r7, #48]	@ 0x30
         si8 = pCoef[2 * ia7 + 1];
 8003580:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	3304      	adds	r3, #4
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	4413      	add	r3, r2
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	62fb      	str	r3, [r7, #44]	@ 0x2c

         i1 = j;
 800358e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003592:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8003596:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800359a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800359e:	4413      	add	r3, r2
 80035a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            i3 = i2 + n2;
 80035a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80035a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ac:	4413      	add	r3, r2
 80035ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            i4 = i3 + n2;
 80035b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80035b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ba:	4413      	add	r3, r2
 80035bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            i5 = i4 + n2;
 80035c0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80035c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c8:	4413      	add	r3, r2
 80035ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            i6 = i5 + n2;
 80035ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d6:	4413      	add	r3, r2
 80035d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            i7 = i6 + n2;
 80035dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035e4:	4413      	add	r3, r2
 80035e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            i8 = i7 + n2;
 80035ea:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f2:	4413      	add	r3, r2
 80035f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80035f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4413      	add	r3, r2
 8003602:	ed93 7a00 	vldr	s14, [r3]
 8003606:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4413      	add	r3, r2
 8003610:	edd3 7a00 	vldr	s15, [r3]
 8003614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003618:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800361c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4413      	add	r3, r2
 8003626:	ed93 7a00 	vldr	s14, [r3]
 800362a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	edd3 7a00 	vldr	s15, [r3]
 8003638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800363c:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8003640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	ed93 7a00 	vldr	s14, [r3]
 800364e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003660:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8003664:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4413      	add	r3, r2
 800366e:	ed93 7a00 	vldr	s14, [r3]
 8003672:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4413      	add	r3, r2
 800367c:	edd3 7a00 	vldr	s15, [r3]
 8003680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003684:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8003688:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4413      	add	r3, r2
 8003692:	ed93 7a00 	vldr	s14, [r3]
 8003696:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4413      	add	r3, r2
 80036a0:	edd3 7a00 	vldr	s15, [r3]
 80036a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a8:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80036ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4413      	add	r3, r2
 80036b6:	ed93 7a00 	vldr	s14, [r3]
 80036ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	edd3 7a00 	vldr	s15, [r3]
 80036c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036cc:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80036d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4413      	add	r3, r2
 80036da:	ed93 7a00 	vldr	s14, [r3]
 80036de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	edd3 7a00 	vldr	s15, [r3]
 80036ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f0:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80036f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4413      	add	r3, r2
 80036fe:	ed93 7a00 	vldr	s14, [r3]
 8003702:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	edd3 7a00 	vldr	s15, [r3]
 8003710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003714:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            t1 = r1 - r3;
 8003718:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800371c:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003724:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r1 = r1 + r3;
 8003728:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800372c:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003734:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r3 = r2 - r4;
 8003738:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800373c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003744:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r2 = r2 + r4;
 8003748:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800374c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003754:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            pSrc[2 * i1] = r1 + r2;
 8003758:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4413      	add	r3, r2
 8003762:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003766:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800376a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800376e:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8003772:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003776:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800377a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800377e:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003782:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	3304      	adds	r3, #4
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4413      	add	r3, r2
 800378e:	ed93 7a00 	vldr	s14, [r3]
 8003792:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	3304      	adds	r3, #4
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4413      	add	r3, r2
 800379e:	edd3 7a00 	vldr	s15, [r3]
 80037a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80037aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	3304      	adds	r3, #4
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4413      	add	r3, r2
 80037b6:	ed93 7a00 	vldr	s14, [r3]
 80037ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	3304      	adds	r3, #4
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4413      	add	r3, r2
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ce:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80037d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	3304      	adds	r3, #4
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4413      	add	r3, r2
 80037de:	ed93 7a00 	vldr	s14, [r3]
 80037e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	3304      	adds	r3, #4
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4413      	add	r3, r2
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80037fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	3304      	adds	r3, #4
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	ed93 7a00 	vldr	s14, [r3]
 800380a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	3304      	adds	r3, #4
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4413      	add	r3, r2
 8003816:	edd3 7a00 	vldr	s15, [r3]
 800381a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800381e:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8003822:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	3304      	adds	r3, #4
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4413      	add	r3, r2
 800382e:	ed93 7a00 	vldr	s14, [r3]
 8003832:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	3304      	adds	r3, #4
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4413      	add	r3, r2
 800383e:	edd3 7a00 	vldr	s15, [r3]
 8003842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003846:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800384a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	3304      	adds	r3, #4
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4413      	add	r3, r2
 8003856:	ed93 7a00 	vldr	s14, [r3]
 800385a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	3304      	adds	r3, #4
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4413      	add	r3, r2
 8003866:	edd3 7a00 	vldr	s15, [r3]
 800386a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800386e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003872:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	3304      	adds	r3, #4
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	4413      	add	r3, r2
 800387e:	ed93 7a00 	vldr	s14, [r3]
 8003882:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	3304      	adds	r3, #4
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4413      	add	r3, r2
 800388e:	edd3 7a00 	vldr	s15, [r3]
 8003892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003896:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800389a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	3304      	adds	r3, #4
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4413      	add	r3, r2
 80038a6:	ed93 7a00 	vldr	s14, [r3]
 80038aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	3304      	adds	r3, #4
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4413      	add	r3, r2
 80038b6:	edd3 7a00 	vldr	s15, [r3]
 80038ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038be:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            t2 = s1 - s3;
 80038c2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80038c6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80038ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ce:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s1 = s1 + s3;
 80038d2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80038d6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80038da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038de:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s3 = s2 - s4;
 80038e2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80038e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80038ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ee:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s2 = s2 + s4;
 80038f2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80038f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80038fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            r1 = t1 + s3;
 8003902:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003906:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800390a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800390e:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            t1 = t1 - s3;
 8003912:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003916:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800391a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800391e:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8003922:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	3304      	adds	r3, #4
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003932:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800393a:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800393e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003942:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800394a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s1 = t2 - r3;
 800394e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003952:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800395a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            t2 = t2 + r3;
 800395e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003962:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800396a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co5 * r2;
 800396e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003972:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800397e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003982:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800398e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8003992:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800399e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80039a2:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80039a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039aa:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 80039ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4413      	add	r3, r2
 80039b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80039bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80039c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 80039c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	3304      	adds	r3, #4
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	ed97 7a05 	vldr	s14, [r7, #20]
 80039d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80039dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039e0:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 80039e4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80039e8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80039ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 80039f4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80039f8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80039fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a00:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8003a04:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8003a08:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a10:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8003a14:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8003a18:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a20:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8003a24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a32:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a3a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8003a3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	3304      	adds	r3, #4
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a56:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8003a5a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003a5e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a66:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8003a6a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003a6e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a76:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8003a7a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003a7e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a86:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8003a8a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003a8e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a96:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8003a9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003aa8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ab0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8003ab4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	3304      	adds	r3, #4
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ac4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003acc:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8003ad0:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003ad4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003adc:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae4:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r6 = (r6 + r8) * C81;
 8003ae8:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003aec:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af4:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afc:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            s1 = (s6 - s8) * C81;
 8003b00:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003b04:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b0c:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b14:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s6 = (s6 + s8) * C81;
 8003b18:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003b1c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b24:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2c:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t1 = r5 - r1;
 8003b30:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003b34:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b3c:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r5 = r5 + r1;
 8003b40:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003b44:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b4c:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r8 = r7 - r6;
 8003b50:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003b54:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b5c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            r7 = r7 + r6;
 8003b60:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003b64:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b6c:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            t2 = s5 - s1;
 8003b70:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003b74:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b7c:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s5 = s5 + s1;
 8003b80:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003b84:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b8c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s8 = s7 - s6;
 8003b90:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003b94:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b9c:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            s7 = s7 + s6;
 8003ba0:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003ba4:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bac:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            r1 = r5 + s7;
 8003bb0:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003bb4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bbc:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = r5 - s7;
 8003bc0:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003bc4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bcc:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r6 = t1 + s8;
 8003bd0:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003bd4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bdc:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            t1 = t1 - s8;
 8003be0:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003be4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bec:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            s1 = s5 - r7;
 8003bf0:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003bf4:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bfc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = s5 + r7;
 8003c00:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003c04:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c0c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s6 = t2 - r8;
 8003c10:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003c14:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c1c:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t2 = t2 + r8;
 8003c20:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003c24:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c2c:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co2 * r1;
 8003c30:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003c34:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8003c40:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003c44:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8003c50:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003c54:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8003c60:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003c64:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8003c70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	4413      	add	r3, r2
 8003c7a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c86:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8003c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	3304      	adds	r3, #4
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4413      	add	r3, r2
 8003c96:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ca2:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8003ca6:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003caa:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8003cb6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003cba:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8003cc6:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003cca:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8003cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8003cd6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003cda:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8003ce6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4413      	add	r3, r2
 8003cf0:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cf4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cfc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003d00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	3304      	adds	r3, #4
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d10:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d18:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8003d1c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003d20:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003d24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d28:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8003d2c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003d30:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d38:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8003d3c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003d40:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d48:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8003d4c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003d50:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d58:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8003d5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4413      	add	r3, r2
 8003d66:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d72:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8003d76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4413      	add	r3, r2
 8003d82:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d86:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d8e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8003d92:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003d96:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8003da2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003da6:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dae:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8003db2:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8003db6:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8003dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dbe:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8003dc2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003dc6:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8003dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dce:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8003dd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003de0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003de8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8003dec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	3304      	adds	r3, #4
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4413      	add	r3, r2
 8003df8:	ed97 7a05 	vldr	s14, [r7, #20]
 8003dfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e04:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 8003e08:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003e0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e10:	4413      	add	r3, r2
 8003e12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
         } while (i1 < fftLen);
 8003e16:	897b      	ldrh	r3, [r7, #10]
 8003e18:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	f4ff abba 	bcc.w	8003596 <arm_radix8_butterfly_f32+0x746>

         j++;
 8003e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e26:	3301      	adds	r3, #1
 8003e28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      } while (j < n2);
 8003e2c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e34:	429a      	cmp	r2, r3
 8003e36:	f4ff ab2c 	bcc.w	8003492 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 8003e3a:	893b      	ldrh	r3, [r7, #8]
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8003e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e44:	2b07      	cmp	r3, #7
 8003e46:	f63f a813 	bhi.w	8002e70 <arm_radix8_butterfly_f32+0x20>
}
 8003e4a:	e000      	b.n	8003e4e <arm_radix8_butterfly_f32+0xffe>
         break;
 8003e4c:	bf00      	nop
}
 8003e4e:	bf00      	nop
 8003e50:	37f4      	adds	r7, #244	@ 0xf4
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop

08003e5c <stage_rfft_f32>:
#else
static void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b095      	sub	sp, #84	@ 0x54
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8003e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xBI = pB[1];
 8003e84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e86:	3304      	adds	r3, #4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   xAR = pA[0];
 8003e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	637b      	str	r3, [r7, #52]	@ 0x34
   xAI = pA[1];
 8003e92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e94:	3304      	adds	r3, #4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	633b      	str	r3, [r7, #48]	@ 0x30

   twR = *pCoeff++ ;
 8003e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e9c:	1d1a      	adds	r2, r3, #4
 8003e9e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   twI = *pCoeff++ ;
 8003ea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ea6:	1d1a      	adds	r2, r3, #4
 8003ea8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	62bb      	str	r3, [r7, #40]	@ 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8003eae:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003eb2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8003ebe:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003ec2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eca:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8003ece:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003ed2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	1d1a      	adds	r2, r3, #4
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ee8:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8003eec:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003ef0:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	1d1a      	adds	r2, r3, #4
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f06:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 8003f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4413      	add	r3, r2
 8003f12:	643b      	str	r3, [r7, #64]	@ 0x40
   pA += 2;
 8003f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f16:	3308      	adds	r3, #8
 8003f18:	647b      	str	r3, [r7, #68]	@ 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8003f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	63bb      	str	r3, [r7, #56]	@ 0x38
      xBR = pB[0];
 8003f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAR = pA[0];
 8003f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	637b      	str	r3, [r7, #52]	@ 0x34
      xAI = pA[1];
 8003f2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f30:	3304      	adds	r3, #4
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	633b      	str	r3, [r7, #48]	@ 0x30

      twR = *pCoeff++;
 8003f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f38:	1d1a      	adds	r2, r3, #4
 8003f3a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 8003f40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f42:	1d1a      	adds	r2, r3, #4
 8003f44:	64ba      	str	r2, [r7, #72]	@ 0x48
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xBR - xAR ;
 8003f4a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003f4e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f56:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xBI + xAI ;
 8003f5a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8003f5e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f66:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8003f6a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003f6e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f76:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8003f7a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003f7e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f86:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8003f8a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003f8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f96:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8003f9a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003f9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8003faa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003fae:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003fb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8003fba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	1d1a      	adds	r2, r3, #4
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fd4:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8003fd8:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003fdc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003fe0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fe4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003fe8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fec:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	1d1a      	adds	r2, r3, #4
 8003ff8:	607a      	str	r2, [r7, #4]
 8003ffa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003ffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004002:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 8004006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004008:	3308      	adds	r3, #8
 800400a:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 800400c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800400e:	3b08      	subs	r3, #8
 8004010:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 8004012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004014:	3b01      	subs	r3, #1
 8004016:	64fb      	str	r3, [r7, #76]	@ 0x4c
   } while (k > 0);
 8004018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800401a:	2b00      	cmp	r3, #0
 800401c:	f73f af7d 	bgt.w	8003f1a <stage_rfft_f32+0xbe>
}
 8004020:	bf00      	nop
 8004022:	bf00      	nop
 8004024:	3754      	adds	r7, #84	@ 0x54
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <merge_rfft_f32>:
/* Prepares data for inverse cfft */
static void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 800402e:	b480      	push	{r7}
 8004030:	b095      	sub	sp, #84	@ 0x54
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	3b01      	subs	r3, #1
 800404e:	64fb      	str	r3, [r7, #76]	@ 0x4c

   xAR = pA[0];
 8004050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xAI = pA[1];
 8004056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004058:	3304      	adds	r3, #4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	63bb      	str	r3, [r7, #56]	@ 0x38

   pCoeff += 2 ;
 800405e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004060:	3308      	adds	r3, #8
 8004062:	64bb      	str	r3, [r7, #72]	@ 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8004064:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004068:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800406c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	1d1a      	adds	r2, r3, #4
 8004074:	607a      	str	r2, [r7, #4]
 8004076:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800407a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800407e:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8004082:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004086:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800408a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	1d1a      	adds	r2, r3, #4
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800409c:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 80040a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	4413      	add	r3, r2
 80040a8:	643b      	str	r3, [r7, #64]	@ 0x40
   pA +=  2	   ;
 80040aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040ac:	3308      	adds	r3, #8
 80040ae:	647b      	str	r3, [r7, #68]	@ 0x44

   while (k > 0)
 80040b0:	e07e      	b.n	80041b0 <merge_rfft_f32+0x182>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80040b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040b4:	3304      	adds	r3, #4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	637b      	str	r3, [r7, #52]	@ 0x34
      xBR =   pB[0]    ;
 80040ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	633b      	str	r3, [r7, #48]	@ 0x30
      xAR =  pA[0];
 80040c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAI =  pA[1];
 80040c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040c8:	3304      	adds	r3, #4
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	63bb      	str	r3, [r7, #56]	@ 0x38

      twR = *pCoeff++;
 80040ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040d0:	1d1a      	adds	r2, r3, #4
 80040d2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 80040d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040da:	1d1a      	adds	r2, r3, #4
 80040dc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xAR - xBR ;
 80040e2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80040e6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80040ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040ee:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xAI + xBI ;
 80040f2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80040f6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80040fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040fe:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8004102:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004106:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800410a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410e:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8004112:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004116:	edd7 7a08 	vldr	s15, [r7, #32]
 800411a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411e:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8004122:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004126:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800412a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412e:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8004132:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004136:	edd7 7a08 	vldr	s15, [r7, #32]
 800413a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413e:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8004142:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004146:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800414a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800414e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004152:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004156:	edd7 7a06 	vldr	s15, [r7, #24]
 800415a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	1d1a      	adds	r2, r3, #4
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800416c:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8004170:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8004174:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004178:	ee37 7a67 	vsub.f32	s14, s14, s15
 800417c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004180:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004184:	edd7 7a04 	vldr	s15, [r7, #16]
 8004188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	1d1a      	adds	r2, r3, #4
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800419a:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800419e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a0:	3308      	adds	r3, #8
 80041a2:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 80041a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a6:	3b08      	subs	r3, #8
 80041a8:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 80041aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ac:	3b01      	subs	r3, #1
 80041ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   while (k > 0)
 80041b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	f73f af7d 	bgt.w	80040b2 <merge_rfft_f32+0x84>
   }

}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	3754      	adds	r7, #84	@ 0x54
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <arm_rfft_fast_f32>:
ARM_DSP_ATTRIBUTE void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b086      	sub	sp, #24
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	607a      	str	r2, [r7, #4]
 80041d2:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff ff23 	bl	800402e <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	2301      	movs	r3, #1
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	6978      	ldr	r0, [r7, #20]
 80041f0:	f7fe fc5c 	bl	8002aac <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 80041f4:	e00a      	b.n	800420c <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	2301      	movs	r3, #1
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	6978      	ldr	r0, [r7, #20]
 80041fe:	f7fe fc55 	bl	8002aac <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	68b9      	ldr	r1, [r7, #8]
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff fe28 	bl	8003e5c <stage_rfft_f32>
}
 800420c:	bf00      	nop
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <arm_rfft_fast_init_32_f32>:
#if defined(ARM_MATH_NEON) 

FAST_INIT_FUNC(32)

#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d102      	bne.n	8004228 <arm_rfft_fast_init_32_f32+0x14>
 8004222:	f04f 33ff 	mov.w	r3, #4294967295
 8004226:	e013      	b.n	8004250 <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe fdee 	bl	8002e0c <arm_cfft_init_16_f32>
 8004230:	4603      	mov	r3, r0
 8004232:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8004234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 800423c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004240:	e006      	b.n	8004250 <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a03      	ldr	r2, [pc, #12]	@ (8004258 <arm_rfft_fast_init_32_f32+0x44>)
 800424c:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	080184d8 	.word	0x080184d8

0800425c <arm_rfft_fast_init_64_f32>:
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
#if defined(ARM_MATH_NEON) 
FAST_INIT_FUNC(64)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d102      	bne.n	8004270 <arm_rfft_fast_init_64_f32+0x14>
 800426a:	f04f 33ff 	mov.w	r3, #4294967295
 800426e:	e013      	b.n	8004298 <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe fda8 	bl	8002dc8 <arm_cfft_init_32_f32>
 8004278:	4603      	mov	r3, r0
 800427a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800427c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 8004284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004288:	e006      	b.n	8004298 <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2240      	movs	r2, #64	@ 0x40
 800428e:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a03      	ldr	r2, [pc, #12]	@ (80042a0 <arm_rfft_fast_init_64_f32+0x44>)
 8004294:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	08018558 	.word	0x08018558

080042a4 <arm_rfft_fast_init_128_f32>:
 */

#if defined(ARM_MATH_NEON) 
FAST_INIT_FUNC(128)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d102      	bne.n	80042b8 <arm_rfft_fast_init_128_f32+0x14>
 80042b2:	f04f 33ff 	mov.w	r3, #4294967295
 80042b6:	e013      	b.n	80042e0 <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f7fe fd62 	bl	8002d84 <arm_cfft_init_64_f32>
 80042c0:	4603      	mov	r3, r0
 80042c2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80042c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 80042cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d0:	e006      	b.n	80042e0 <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2280      	movs	r2, #128	@ 0x80
 80042d6:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a03      	ldr	r2, [pc, #12]	@ (80042e8 <arm_rfft_fast_init_128_f32+0x44>)
 80042dc:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	08018658 	.word	0x08018658

080042ec <arm_rfft_fast_init_256_f32>:
*/

#if defined(ARM_MATH_NEON) 
FAST_INIT_FUNC(256)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <arm_rfft_fast_init_256_f32+0x14>
 80042fa:	f04f 33ff 	mov.w	r3, #4294967295
 80042fe:	e014      	b.n	800432a <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4618      	mov	r0, r3
 8004304:	f7fe fd1c 	bl	8002d40 <arm_cfft_init_128_f32>
 8004308:	4603      	mov	r3, r0
 800430a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800430c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8004314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004318:	e007      	b.n	800432a <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004320:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a03      	ldr	r2, [pc, #12]	@ (8004334 <arm_rfft_fast_init_256_f32+0x48>)
 8004326:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	08018858 	.word	0x08018858

08004338 <arm_rfft_fast_init_512_f32>:
 */

#if defined(ARM_MATH_NEON) 
FAST_INIT_FUNC(512)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d102      	bne.n	800434c <arm_rfft_fast_init_512_f32+0x14>
 8004346:	f04f 33ff 	mov.w	r3, #4294967295
 800434a:	e014      	b.n	8004376 <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4618      	mov	r0, r3
 8004350:	f7fe fcd2 	bl	8002cf8 <arm_cfft_init_256_f32>
 8004354:	4603      	mov	r3, r0
 8004356:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8004358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 8004360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004364:	e007      	b.n	8004376 <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800436c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a03      	ldr	r2, [pc, #12]	@ (8004380 <arm_rfft_fast_init_512_f32+0x48>)
 8004372:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	08018c58 	.word	0x08018c58

08004384 <arm_rfft_fast_init_1024_f32>:
 */

#if defined(ARM_MATH_NEON) 
FAST_INIT_FUNC(1024)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <arm_rfft_fast_init_1024_f32+0x14>
 8004392:	f04f 33ff 	mov.w	r3, #4294967295
 8004396:	e014      	b.n	80043c2 <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fe fc88 	bl	8002cb0 <arm_cfft_init_512_f32>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80043a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 80043ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043b0:	e007      	b.n	80043c2 <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043b8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a03      	ldr	r2, [pc, #12]	@ (80043cc <arm_rfft_fast_init_1024_f32+0x48>)
 80043be:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	08019458 	.word	0x08019458

080043d0 <arm_rfft_fast_init_2048_f32>:
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
#if defined(ARM_MATH_NEON) 
FAST_INIT_FUNC(2048)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <arm_rfft_fast_init_2048_f32+0x14>
 80043de:	f04f 33ff 	mov.w	r3, #4294967295
 80043e2:	e014      	b.n	800440e <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fc3e 	bl	8002c68 <arm_cfft_init_1024_f32>
 80043ec:	4603      	mov	r3, r0
 80043ee:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 80043f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 80043f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043fc:	e007      	b.n	800440e <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004404:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a03      	ldr	r2, [pc, #12]	@ (8004418 <arm_rfft_fast_init_2048_f32+0x48>)
 800440a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	0801a458 	.word	0x0801a458

0800441c <arm_rfft_fast_init_4096_f32>:
 */

#if defined(ARM_MATH_NEON) 
FAST_INIT_FUNC(4096)
#else
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d102      	bne.n	8004430 <arm_rfft_fast_init_4096_f32+0x14>
 800442a:	f04f 33ff 	mov.w	r3, #4294967295
 800442e:	e014      	b.n	800445a <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe fbf4 	bl	8002c20 <arm_cfft_init_2048_f32>
 8004438:	4603      	mov	r3, r0
 800443a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800443c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 8004444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004448:	e007      	b.n	800445a <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004450:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a03      	ldr	r2, [pc, #12]	@ (8004464 <arm_rfft_fast_init_4096_f32+0x48>)
 8004456:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	0801c458 	.word	0x0801c458

08004468 <arm_rfft_fast_init_f32>:
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 8004474:	887b      	ldrh	r3, [r7, #2]
 8004476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800447a:	d023      	beq.n	80044c4 <arm_rfft_fast_init_f32+0x5c>
 800447c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004480:	dc50      	bgt.n	8004524 <arm_rfft_fast_init_f32+0xbc>
 8004482:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004486:	d023      	beq.n	80044d0 <arm_rfft_fast_init_f32+0x68>
 8004488:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800448c:	dc4a      	bgt.n	8004524 <arm_rfft_fast_init_f32+0xbc>
 800448e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004492:	d023      	beq.n	80044dc <arm_rfft_fast_init_f32+0x74>
 8004494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004498:	dc44      	bgt.n	8004524 <arm_rfft_fast_init_f32+0xbc>
 800449a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800449e:	d023      	beq.n	80044e8 <arm_rfft_fast_init_f32+0x80>
 80044a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044a4:	dc3e      	bgt.n	8004524 <arm_rfft_fast_init_f32+0xbc>
 80044a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044aa:	d023      	beq.n	80044f4 <arm_rfft_fast_init_f32+0x8c>
 80044ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044b0:	dc38      	bgt.n	8004524 <arm_rfft_fast_init_f32+0xbc>
 80044b2:	2b80      	cmp	r3, #128	@ 0x80
 80044b4:	d024      	beq.n	8004500 <arm_rfft_fast_init_f32+0x98>
 80044b6:	2b80      	cmp	r3, #128	@ 0x80
 80044b8:	dc34      	bgt.n	8004524 <arm_rfft_fast_init_f32+0xbc>
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d02c      	beq.n	8004518 <arm_rfft_fast_init_f32+0xb0>
 80044be:	2b40      	cmp	r3, #64	@ 0x40
 80044c0:	d024      	beq.n	800450c <arm_rfft_fast_init_f32+0xa4>
 80044c2:	e02f      	b.n	8004524 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ffa9 	bl	800441c <arm_rfft_fast_init_4096_f32>
 80044ca:	4603      	mov	r3, r0
 80044cc:	73fb      	strb	r3, [r7, #15]
    break;
 80044ce:	e02c      	b.n	800452a <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff ff7d 	bl	80043d0 <arm_rfft_fast_init_2048_f32>
 80044d6:	4603      	mov	r3, r0
 80044d8:	73fb      	strb	r3, [r7, #15]
    break;
 80044da:	e026      	b.n	800452a <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ff51 	bl	8004384 <arm_rfft_fast_init_1024_f32>
 80044e2:	4603      	mov	r3, r0
 80044e4:	73fb      	strb	r3, [r7, #15]
    break;
 80044e6:	e020      	b.n	800452a <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7ff ff25 	bl	8004338 <arm_rfft_fast_init_512_f32>
 80044ee:	4603      	mov	r3, r0
 80044f0:	73fb      	strb	r3, [r7, #15]
    break;
 80044f2:	e01a      	b.n	800452a <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fef9 	bl	80042ec <arm_rfft_fast_init_256_f32>
 80044fa:	4603      	mov	r3, r0
 80044fc:	73fb      	strb	r3, [r7, #15]
    break;
 80044fe:	e014      	b.n	800452a <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff fecf 	bl	80042a4 <arm_rfft_fast_init_128_f32>
 8004506:	4603      	mov	r3, r0
 8004508:	73fb      	strb	r3, [r7, #15]
    break;
 800450a:	e00e      	b.n	800452a <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fea5 	bl	800425c <arm_rfft_fast_init_64_f32>
 8004512:	4603      	mov	r3, r0
 8004514:	73fb      	strb	r3, [r7, #15]
    break;
 8004516:	e008      	b.n	800452a <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff fe7b 	bl	8004214 <arm_rfft_fast_init_32_f32>
 800451e:	4603      	mov	r3, r0
 8004520:	73fb      	strb	r3, [r7, #15]
    break;
 8004522:	e002      	b.n	800452a <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8004524:	f04f 33ff 	mov.w	r3, #4294967295
 8004528:	e001      	b.n	800452e <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 800452a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800453a:	2003      	movs	r0, #3
 800453c:	f000 fd6e 	bl	800501c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004540:	2000      	movs	r0, #0
 8004542:	f000 f805 	bl	8004550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004546:	f7fc fda1 	bl	800108c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004558:	4b12      	ldr	r3, [pc, #72]	@ (80045a4 <HAL_InitTick+0x54>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	4b12      	ldr	r3, [pc, #72]	@ (80045a8 <HAL_InitTick+0x58>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	4619      	mov	r1, r3
 8004562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004566:	fbb3 f3f1 	udiv	r3, r3, r1
 800456a:	fbb2 f3f3 	udiv	r3, r2, r3
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fd89 	bl	8005086 <HAL_SYSTICK_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e00e      	b.n	800459c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b0f      	cmp	r3, #15
 8004582:	d80a      	bhi.n	800459a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004584:	2200      	movs	r2, #0
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	f04f 30ff 	mov.w	r0, #4294967295
 800458c:	f000 fd51 	bl	8005032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004590:	4a06      	ldr	r2, [pc, #24]	@ (80045ac <HAL_InitTick+0x5c>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20000004 	.word	0x20000004
 80045a8:	2000000c 	.word	0x2000000c
 80045ac:	20000008 	.word	0x20000008

080045b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045b4:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <HAL_IncTick+0x20>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	4b06      	ldr	r3, [pc, #24]	@ (80045d4 <HAL_IncTick+0x24>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4413      	add	r3, r2
 80045c0:	4a04      	ldr	r2, [pc, #16]	@ (80045d4 <HAL_IncTick+0x24>)
 80045c2:	6013      	str	r3, [r2, #0]
}
 80045c4:	bf00      	nop
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	2000000c 	.word	0x2000000c
 80045d4:	20003fdc 	.word	0x20003fdc

080045d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  return uwTick;
 80045dc:	4b03      	ldr	r3, [pc, #12]	@ (80045ec <HAL_GetTick+0x14>)
 80045de:	681b      	ldr	r3, [r3, #0]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	20003fdc 	.word	0x20003fdc

080045f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045f8:	f7ff ffee 	bl	80045d8 <HAL_GetTick>
 80045fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004608:	d005      	beq.n	8004616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800460a:	4b0a      	ldr	r3, [pc, #40]	@ (8004634 <HAL_Delay+0x44>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004616:	bf00      	nop
 8004618:	f7ff ffde 	bl	80045d8 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	429a      	cmp	r2, r3
 8004626:	d8f7      	bhi.n	8004618 <HAL_Delay+0x28>
  {
  }
}
 8004628:	bf00      	nop
 800462a:	bf00      	nop
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	2000000c 	.word	0x2000000c

08004638 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e031      	b.n	80046b2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fc fd3c 	bl	80010d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b00      	cmp	r3, #0
 8004674:	d116      	bne.n	80046a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800467a:	4b10      	ldr	r3, [pc, #64]	@ (80046bc <HAL_ADC_Init+0x84>)
 800467c:	4013      	ands	r3, r2
 800467e:	f043 0202 	orr.w	r2, r3, #2
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fa7c 	bl	8004b84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	f043 0201 	orr.w	r2, r3, #1
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80046a2:	e001      	b.n	80046a8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	ffffeefd 	.word	0xffffeefd

080046c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_ADC_Start_DMA+0x22>
 80046de:	2302      	movs	r3, #2
 80046e0:	e0d6      	b.n	8004890 <HAL_ADC_Start_DMA+0x1d0>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d018      	beq.n	800472a <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004708:	4b63      	ldr	r3, [pc, #396]	@ (8004898 <HAL_ADC_Start_DMA+0x1d8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a63      	ldr	r2, [pc, #396]	@ (800489c <HAL_ADC_Start_DMA+0x1dc>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	0c9a      	lsrs	r2, r3, #18
 8004714:	4613      	mov	r3, r2
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	4413      	add	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 800471c:	e002      	b.n	8004724 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3b01      	subs	r3, #1
 8004722:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f9      	bne.n	800471e <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b01      	cmp	r3, #1
 8004736:	f040 809e 	bne.w	8004876 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800473e:	4b58      	ldr	r3, [pc, #352]	@ (80048a0 <HAL_ADC_Start_DMA+0x1e0>)
 8004740:	4013      	ands	r3, r2
 8004742:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004760:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004774:	d106      	bne.n	8004784 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477a:	f023 0206 	bic.w	r2, r3, #6
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	645a      	str	r2, [r3, #68]	@ 0x44
 8004782:	e002      	b.n	800478a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004796:	4a43      	ldr	r2, [pc, #268]	@ (80048a4 <HAL_ADC_Start_DMA+0x1e4>)
 8004798:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479e:	4a42      	ldr	r2, [pc, #264]	@ (80048a8 <HAL_ADC_Start_DMA+0x1e8>)
 80047a0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a6:	4a41      	ldr	r2, [pc, #260]	@ (80048ac <HAL_ADC_Start_DMA+0x1ec>)
 80047a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80047b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80047c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	334c      	adds	r3, #76	@ 0x4c
 80047de:	4619      	mov	r1, r3
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f000 feee 	bl	80055c4 <HAL_DMA_Start_IT>
 80047e8:	4603      	mov	r3, r0
 80047ea:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80047ec:	4b30      	ldr	r3, [pc, #192]	@ (80048b0 <HAL_ADC_Start_DMA+0x1f0>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10f      	bne.n	8004818 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d143      	bne.n	800488e <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004814:	609a      	str	r2, [r3, #8]
 8004816:	e03a      	b.n	800488e <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a25      	ldr	r2, [pc, #148]	@ (80048b4 <HAL_ADC_Start_DMA+0x1f4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d10e      	bne.n	8004840 <HAL_ADC_Start_DMA+0x180>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d107      	bne.n	8004840 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800483e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004840:	4b1b      	ldr	r3, [pc, #108]	@ (80048b0 <HAL_ADC_Start_DMA+0x1f0>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	d120      	bne.n	800488e <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a19      	ldr	r2, [pc, #100]	@ (80048b8 <HAL_ADC_Start_DMA+0x1f8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d11b      	bne.n	800488e <HAL_ADC_Start_DMA+0x1ce>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d114      	bne.n	800488e <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004872:	609a      	str	r2, [r3, #8]
 8004874:	e00b      	b.n	800488e <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487a:	f043 0210 	orr.w	r2, r3, #16
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004886:	f043 0201 	orr.w	r2, r3, #1
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 800488e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20000004 	.word	0x20000004
 800489c:	431bde83 	.word	0x431bde83
 80048a0:	fffff8fe 	.word	0xfffff8fe
 80048a4:	08004d79 	.word	0x08004d79
 80048a8:	08004e33 	.word	0x08004e33
 80048ac:	08004e4f 	.word	0x08004e4f
 80048b0:	40012300 	.word	0x40012300
 80048b4:	40012000 	.word	0x40012000
 80048b8:	40012200 	.word	0x40012200

080048bc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x1c>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e13a      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x292>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b09      	cmp	r3, #9
 80048fa:	d93a      	bls.n	8004972 <HAL_ADC_ConfigChannel+0xa2>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004904:	d035      	beq.n	8004972 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68d9      	ldr	r1, [r3, #12]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	b29b      	uxth	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	4613      	mov	r3, r2
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	4413      	add	r3, r2
 800491a:	3b1e      	subs	r3, #30
 800491c:	2207      	movs	r2, #7
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43da      	mvns	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	400a      	ands	r2, r1
 800492a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a8f      	ldr	r2, [pc, #572]	@ (8004b70 <HAL_ADC_ConfigChannel+0x2a0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d10a      	bne.n	800494c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68d9      	ldr	r1, [r3, #12]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	061a      	lsls	r2, r3, #24
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800494a:	e039      	b.n	80049c0 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68d9      	ldr	r1, [r3, #12]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	b29b      	uxth	r3, r3
 800495c:	4618      	mov	r0, r3
 800495e:	4603      	mov	r3, r0
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	4403      	add	r3, r0
 8004964:	3b1e      	subs	r3, #30
 8004966:	409a      	lsls	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004970:	e026      	b.n	80049c0 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6919      	ldr	r1, [r3, #16]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	b29b      	uxth	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	4613      	mov	r3, r2
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	4413      	add	r3, r2
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	2207      	movs	r2, #7
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	43da      	mvns	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	400a      	ands	r2, r1
 8004998:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6919      	ldr	r1, [r3, #16]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	4618      	mov	r0, r3
 80049ac:	4603      	mov	r3, r0
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	4403      	add	r3, r0
 80049b2:	f003 031f 	and.w	r3, r3, #31
 80049b6:	409a      	lsls	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b06      	cmp	r3, #6
 80049c6:	d824      	bhi.n	8004a12 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	3b05      	subs	r3, #5
 80049da:	221f      	movs	r2, #31
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	43da      	mvns	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	400a      	ands	r2, r1
 80049e8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	4618      	mov	r0, r3
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	3b05      	subs	r3, #5
 8004a04:	fa00 f203 	lsl.w	r2, r0, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a10:	e04c      	b.n	8004aac <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b0c      	cmp	r3, #12
 8004a18:	d824      	bhi.n	8004a64 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	3b23      	subs	r3, #35	@ 0x23
 8004a2c:	221f      	movs	r2, #31
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43da      	mvns	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	400a      	ands	r2, r1
 8004a3a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	4618      	mov	r0, r3
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	3b23      	subs	r3, #35	@ 0x23
 8004a56:	fa00 f203 	lsl.w	r2, r0, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a62:	e023      	b.n	8004aac <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	3b41      	subs	r3, #65	@ 0x41
 8004a76:	221f      	movs	r2, #31
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	43da      	mvns	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	400a      	ands	r2, r1
 8004a84:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	4618      	mov	r0, r3
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3b41      	subs	r3, #65	@ 0x41
 8004aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a30      	ldr	r2, [pc, #192]	@ (8004b74 <HAL_ADC_ConfigChannel+0x2a4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d10a      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x1fc>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004abe:	d105      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8004b78 <HAL_ADC_ConfigChannel+0x2a8>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8004b78 <HAL_ADC_ConfigChannel+0x2a8>)
 8004ac6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004aca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a28      	ldr	r2, [pc, #160]	@ (8004b74 <HAL_ADC_ConfigChannel+0x2a4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d10f      	bne.n	8004af6 <HAL_ADC_ConfigChannel+0x226>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b12      	cmp	r3, #18
 8004adc:	d10b      	bne.n	8004af6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004ade:	4b26      	ldr	r3, [pc, #152]	@ (8004b78 <HAL_ADC_ConfigChannel+0x2a8>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	4a25      	ldr	r2, [pc, #148]	@ (8004b78 <HAL_ADC_ConfigChannel+0x2a8>)
 8004ae4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004ae8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004aea:	4b23      	ldr	r3, [pc, #140]	@ (8004b78 <HAL_ADC_ConfigChannel+0x2a8>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4a22      	ldr	r2, [pc, #136]	@ (8004b78 <HAL_ADC_ConfigChannel+0x2a8>)
 8004af0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004af4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1e      	ldr	r2, [pc, #120]	@ (8004b74 <HAL_ADC_ConfigChannel+0x2a4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d12b      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x288>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1a      	ldr	r2, [pc, #104]	@ (8004b70 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d003      	beq.n	8004b12 <HAL_ADC_ConfigChannel+0x242>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b11      	cmp	r3, #17
 8004b10:	d122      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004b12:	4b19      	ldr	r3, [pc, #100]	@ (8004b78 <HAL_ADC_ConfigChannel+0x2a8>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	4a18      	ldr	r2, [pc, #96]	@ (8004b78 <HAL_ADC_ConfigChannel+0x2a8>)
 8004b18:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004b1c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004b1e:	4b16      	ldr	r3, [pc, #88]	@ (8004b78 <HAL_ADC_ConfigChannel+0x2a8>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	4a15      	ldr	r2, [pc, #84]	@ (8004b78 <HAL_ADC_ConfigChannel+0x2a8>)
 8004b24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b28:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a10      	ldr	r2, [pc, #64]	@ (8004b70 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d111      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004b34:	4b11      	ldr	r3, [pc, #68]	@ (8004b7c <HAL_ADC_ConfigChannel+0x2ac>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a11      	ldr	r2, [pc, #68]	@ (8004b80 <HAL_ADC_ConfigChannel+0x2b0>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	0c9a      	lsrs	r2, r3, #18
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004b4a:	e002      	b.n	8004b52 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f9      	bne.n	8004b4c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	10000012 	.word	0x10000012
 8004b74:	40012000 	.word	0x40012000
 8004b78:	40012300 	.word	0x40012300
 8004b7c:	20000004 	.word	0x20000004
 8004b80:	431bde83 	.word	0x431bde83

08004b84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004b8c:	4b78      	ldr	r3, [pc, #480]	@ (8004d70 <ADC_Init+0x1ec>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	4a77      	ldr	r2, [pc, #476]	@ (8004d70 <ADC_Init+0x1ec>)
 8004b92:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004b96:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004b98:	4b75      	ldr	r3, [pc, #468]	@ (8004d70 <ADC_Init+0x1ec>)
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4973      	ldr	r1, [pc, #460]	@ (8004d70 <ADC_Init+0x1ec>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6859      	ldr	r1, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	021a      	lsls	r2, r3, #8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004bd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6899      	ldr	r1, [r3, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c12:	4a58      	ldr	r2, [pc, #352]	@ (8004d74 <ADC_Init+0x1f0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d022      	beq.n	8004c5e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6899      	ldr	r1, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004c48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6899      	ldr	r1, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	e00f      	b.n	8004c7e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004c7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0202 	bic.w	r2, r2, #2
 8004c8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6899      	ldr	r1, [r3, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	005a      	lsls	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01b      	beq.n	8004ce4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004cca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6859      	ldr	r1, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	035a      	lsls	r2, r3, #13
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	e007      	b.n	8004cf4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	051a      	lsls	r2, r3, #20
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6899      	ldr	r1, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d36:	025a      	lsls	r2, r3, #9
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6899      	ldr	r1, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	029a      	lsls	r2, r3, #10
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	40012300 	.word	0x40012300
 8004d74:	0f000001 	.word	0x0f000001

08004d78 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d84:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d8a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d13c      	bne.n	8004e0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d96:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d12b      	bne.n	8004e04 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d127      	bne.n	8004e04 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d006      	beq.n	8004dd0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d119      	bne.n	8004e04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0220 	bic.w	r2, r2, #32
 8004dde:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfc:	f043 0201 	orr.w	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f7fb fc31 	bl	800066c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e0a:	e00e      	b.n	8004e2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff fd4f 	bl	80048bc <HAL_ADC_ErrorCallback>
}
 8004e1e:	e004      	b.n	8004e2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	4798      	blx	r3
}
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7fb fbfd 	bl	8000640 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e46:	bf00      	nop
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e5a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2240      	movs	r2, #64	@ 0x40
 8004e60:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e66:	f043 0204 	orr.w	r2, r3, #4
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f7ff fd24 	bl	80048bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ebc <__NVIC_SetPriorityGrouping+0x40>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e98:	4013      	ands	r3, r2
 8004e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ea4:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004eaa:	4a04      	ldr	r2, [pc, #16]	@ (8004ebc <__NVIC_SetPriorityGrouping+0x40>)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	60d3      	str	r3, [r2, #12]
}
 8004eb0:	bf00      	nop
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	e000ed00 	.word	0xe000ed00
 8004ec0:	05fa0000 	.word	0x05fa0000

08004ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ec8:	4b04      	ldr	r3, [pc, #16]	@ (8004edc <__NVIC_GetPriorityGrouping+0x18>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	0a1b      	lsrs	r3, r3, #8
 8004ece:	f003 0307 	and.w	r3, r3, #7
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	e000ed00 	.word	0xe000ed00

08004ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	db0b      	blt.n	8004f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	f003 021f 	and.w	r2, r3, #31
 8004ef8:	4907      	ldr	r1, [pc, #28]	@ (8004f18 <__NVIC_EnableIRQ+0x38>)
 8004efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	2001      	movs	r0, #1
 8004f02:	fa00 f202 	lsl.w	r2, r0, r2
 8004f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	e000e100 	.word	0xe000e100

08004f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	6039      	str	r1, [r7, #0]
 8004f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	db0a      	blt.n	8004f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	490c      	ldr	r1, [pc, #48]	@ (8004f68 <__NVIC_SetPriority+0x4c>)
 8004f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3a:	0112      	lsls	r2, r2, #4
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	440b      	add	r3, r1
 8004f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f44:	e00a      	b.n	8004f5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	4908      	ldr	r1, [pc, #32]	@ (8004f6c <__NVIC_SetPriority+0x50>)
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	3b04      	subs	r3, #4
 8004f54:	0112      	lsls	r2, r2, #4
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	440b      	add	r3, r1
 8004f5a:	761a      	strb	r2, [r3, #24]
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	e000e100 	.word	0xe000e100
 8004f6c:	e000ed00 	.word	0xe000ed00

08004f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b089      	sub	sp, #36	@ 0x24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f1c3 0307 	rsb	r3, r3, #7
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	bf28      	it	cs
 8004f8e:	2304      	movcs	r3, #4
 8004f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	3304      	adds	r3, #4
 8004f96:	2b06      	cmp	r3, #6
 8004f98:	d902      	bls.n	8004fa0 <NVIC_EncodePriority+0x30>
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	3b03      	subs	r3, #3
 8004f9e:	e000      	b.n	8004fa2 <NVIC_EncodePriority+0x32>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43da      	mvns	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc2:	43d9      	mvns	r1, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fc8:	4313      	orrs	r3, r2
         );
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3724      	adds	r7, #36	@ 0x24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fe8:	d301      	bcc.n	8004fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fea:	2301      	movs	r3, #1
 8004fec:	e00f      	b.n	800500e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fee:	4a0a      	ldr	r2, [pc, #40]	@ (8005018 <SysTick_Config+0x40>)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ff6:	210f      	movs	r1, #15
 8004ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffc:	f7ff ff8e 	bl	8004f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005000:	4b05      	ldr	r3, [pc, #20]	@ (8005018 <SysTick_Config+0x40>)
 8005002:	2200      	movs	r2, #0
 8005004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005006:	4b04      	ldr	r3, [pc, #16]	@ (8005018 <SysTick_Config+0x40>)
 8005008:	2207      	movs	r2, #7
 800500a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	e000e010 	.word	0xe000e010

0800501c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff ff29 	bl	8004e7c <__NVIC_SetPriorityGrouping>
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005032:	b580      	push	{r7, lr}
 8005034:	b086      	sub	sp, #24
 8005036:	af00      	add	r7, sp, #0
 8005038:	4603      	mov	r3, r0
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005044:	f7ff ff3e 	bl	8004ec4 <__NVIC_GetPriorityGrouping>
 8005048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	6978      	ldr	r0, [r7, #20]
 8005050:	f7ff ff8e 	bl	8004f70 <NVIC_EncodePriority>
 8005054:	4602      	mov	r2, r0
 8005056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800505a:	4611      	mov	r1, r2
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff ff5d 	bl	8004f1c <__NVIC_SetPriority>
}
 8005062:	bf00      	nop
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	4603      	mov	r3, r0
 8005072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff ff31 	bl	8004ee0 <__NVIC_EnableIRQ>
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff ffa2 	bl	8004fd8 <SysTick_Config>
 8005094:	4603      	mov	r3, r0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e014      	b.n	80050da <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	791b      	ldrb	r3, [r3, #4]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d105      	bne.n	80050c6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7fc f87b 	bl	80011bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2202      	movs	r2, #2
 80050ca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
 80050f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0a2      	b.n	8005242 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	795b      	ldrb	r3, [r3, #5]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_DAC_Start_DMA+0x24>
 8005104:	2302      	movs	r3, #2
 8005106:	e09c      	b.n	8005242 <HAL_DAC_Start_DMA+0x15e>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2202      	movs	r2, #2
 8005112:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d129      	bne.n	800516e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	4a4b      	ldr	r2, [pc, #300]	@ (800524c <HAL_DAC_Start_DMA+0x168>)
 8005120:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	4a4a      	ldr	r2, [pc, #296]	@ (8005250 <HAL_DAC_Start_DMA+0x16c>)
 8005128:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	4a49      	ldr	r2, [pc, #292]	@ (8005254 <HAL_DAC_Start_DMA+0x170>)
 8005130:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005140:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_DAC_Start_DMA+0x6c>
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	2b04      	cmp	r3, #4
 800514c:	d005      	beq.n	800515a <HAL_DAC_Start_DMA+0x76>
 800514e:	e009      	b.n	8005164 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3308      	adds	r3, #8
 8005156:	613b      	str	r3, [r7, #16]
        break;
 8005158:	e033      	b.n	80051c2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	330c      	adds	r3, #12
 8005160:	613b      	str	r3, [r7, #16]
        break;
 8005162:	e02e      	b.n	80051c2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3310      	adds	r3, #16
 800516a:	613b      	str	r3, [r7, #16]
        break;
 800516c:	e029      	b.n	80051c2 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	4a39      	ldr	r2, [pc, #228]	@ (8005258 <HAL_DAC_Start_DMA+0x174>)
 8005174:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	4a38      	ldr	r2, [pc, #224]	@ (800525c <HAL_DAC_Start_DMA+0x178>)
 800517c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	4a37      	ldr	r2, [pc, #220]	@ (8005260 <HAL_DAC_Start_DMA+0x17c>)
 8005184:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005194:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_DAC_Start_DMA+0xc0>
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d005      	beq.n	80051ae <HAL_DAC_Start_DMA+0xca>
 80051a2:	e009      	b.n	80051b8 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3314      	adds	r3, #20
 80051aa:	613b      	str	r3, [r7, #16]
        break;
 80051ac:	e009      	b.n	80051c2 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3318      	adds	r3, #24
 80051b4:	613b      	str	r3, [r7, #16]
        break;
 80051b6:	e004      	b.n	80051c2 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	331c      	adds	r3, #28
 80051be:	613b      	str	r3, [r7, #16]
        break;
 80051c0:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d111      	bne.n	80051ec <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6898      	ldr	r0, [r3, #8]
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	f000 f9ef 	bl	80055c4 <HAL_DMA_Start_IT>
 80051e6:	4603      	mov	r3, r0
 80051e8:	75fb      	strb	r3, [r7, #23]
 80051ea:	e010      	b.n	800520e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80051fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	68d8      	ldr	r0, [r3, #12]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	f000 f9dd 	bl	80055c4 <HAL_DMA_Start_IT>
 800520a:	4603      	mov	r3, r0
 800520c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005214:	7dfb      	ldrb	r3, [r7, #23]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10c      	bne.n	8005234 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 0310 	and.w	r3, r3, #16
 8005226:	2201      	movs	r2, #1
 8005228:	409a      	lsls	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e005      	b.n	8005240 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f043 0204 	orr.w	r2, r3, #4
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005240:	7dfb      	ldrb	r3, [r7, #23]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	08005353 	.word	0x08005353
 8005250:	08005375 	.word	0x08005375
 8005254:	08005391 	.word	0x08005391
 8005258:	080053fb 	.word	0x080053fb
 800525c:	0800541d 	.word	0x0800541d
 8005260:	08005439 	.word	0x08005439

08005264 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b089      	sub	sp, #36	@ 0x24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <HAL_DAC_ConfigChannel+0x1c>
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e042      	b.n	8005346 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	795b      	ldrb	r3, [r3, #5]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_DAC_ConfigChannel+0x2c>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e03c      	b.n	8005346 <HAL_DAC_ConfigChannel+0xa6>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2202      	movs	r2, #2
 80052d6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80052ee:	43db      	mvns	r3, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4013      	ands	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4313      	orrs	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6819      	ldr	r1, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	22c0      	movs	r2, #192	@ 0xc0
 800532a:	fa02 f303 	lsl.w	r3, r2, r3
 800532e:	43da      	mvns	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	400a      	ands	r2, r1
 8005336:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2200      	movs	r2, #0
 8005342:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005344:	7ffb      	ldrb	r3, [r7, #31]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3724      	adds	r7, #36	@ 0x24
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7ff ff7f 	bl	8005264 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	711a      	strb	r2, [r3, #4]
}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005380:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7ff ff78 	bl	8005278 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005388:	bf00      	nop
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f043 0204 	orr.w	r2, r3, #4
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f7ff ff6e 	bl	800528c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2201      	movs	r2, #1
 80053b4:	711a      	strb	r2, [r3, #4]
}
 80053b6:	bf00      	nop
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005406:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f7ff ffd8 	bl	80053be <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	711a      	strb	r2, [r3, #4]
}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005428:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f7ff ffd1 	bl	80053d2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005444:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f043 0204 	orr.w	r2, r3, #4
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f7ff ffc7 	bl	80053e6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	711a      	strb	r2, [r3, #4]
}
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
	...

08005468 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005474:	f7ff f8b0 	bl	80045d8 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e099      	b.n	80055b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2202      	movs	r2, #2
 8005488:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0201 	bic.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054a4:	e00f      	b.n	80054c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054a6:	f7ff f897 	bl	80045d8 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b05      	cmp	r3, #5
 80054b2:	d908      	bls.n	80054c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2203      	movs	r2, #3
 80054be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e078      	b.n	80055b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e8      	bne.n	80054a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4b38      	ldr	r3, [pc, #224]	@ (80055c0 <HAL_DMA_Init+0x158>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80054f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80054fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800550a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	4313      	orrs	r3, r2
 8005516:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551c:	2b04      	cmp	r3, #4
 800551e:	d107      	bne.n	8005530 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005528:	4313      	orrs	r3, r2
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 0307 	bic.w	r3, r3, #7
 8005546:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005556:	2b04      	cmp	r3, #4
 8005558:	d117      	bne.n	800558a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00e      	beq.n	800558a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 fb09 	bl	8005b84 <DMA_CheckFifoParam>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d008      	beq.n	800558a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2240      	movs	r2, #64	@ 0x40
 800557c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005586:	2301      	movs	r3, #1
 8005588:	e016      	b.n	80055b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fac0 	bl	8005b18 <DMA_CalcBaseAndBitshift>
 8005598:	4603      	mov	r3, r0
 800559a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a0:	223f      	movs	r2, #63	@ 0x3f
 80055a2:	409a      	lsls	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3718      	adds	r7, #24
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	e010803f 	.word	0xe010803f

080055c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_DMA_Start_IT+0x26>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e048      	b.n	800567c <HAL_DMA_Start_IT+0xb8>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d137      	bne.n	800566e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2202      	movs	r2, #2
 8005602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fa52 	bl	8005abc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800561c:	223f      	movs	r2, #63	@ 0x3f
 800561e:	409a      	lsls	r2, r3
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0216 	orr.w	r2, r2, #22
 8005632:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695a      	ldr	r2, [r3, #20]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005642:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005648:	2b00      	cmp	r3, #0
 800564a:	d007      	beq.n	800565c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0208 	orr.w	r2, r2, #8
 800565a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e005      	b.n	800567a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005676:	2302      	movs	r3, #2
 8005678:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800567a:	7dfb      	ldrb	r3, [r7, #23]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005690:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005692:	f7fe ffa1 	bl	80045d8 <HAL_GetTick>
 8005696:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d008      	beq.n	80056b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2280      	movs	r2, #128	@ 0x80
 80056a8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e052      	b.n	800575c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 0216 	bic.w	r2, r2, #22
 80056c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695a      	ldr	r2, [r3, #20]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d103      	bne.n	80056e6 <HAL_DMA_Abort+0x62>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d007      	beq.n	80056f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0208 	bic.w	r2, r2, #8
 80056f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 0201 	bic.w	r2, r2, #1
 8005704:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005706:	e013      	b.n	8005730 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005708:	f7fe ff66 	bl	80045d8 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b05      	cmp	r3, #5
 8005714:	d90c      	bls.n	8005730 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2203      	movs	r2, #3
 8005720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e015      	b.n	800575c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e4      	bne.n	8005708 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005742:	223f      	movs	r2, #63	@ 0x3f
 8005744:	409a      	lsls	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d004      	beq.n	8005782 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2280      	movs	r2, #128	@ 0x80
 800577c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e00c      	b.n	800579c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2205      	movs	r2, #5
 8005786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f022 0201 	bic.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80057b4:	4b8e      	ldr	r3, [pc, #568]	@ (80059f0 <HAL_DMA_IRQHandler+0x248>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a8e      	ldr	r2, [pc, #568]	@ (80059f4 <HAL_DMA_IRQHandler+0x24c>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	0a9b      	lsrs	r3, r3, #10
 80057c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d2:	2208      	movs	r2, #8
 80057d4:	409a      	lsls	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4013      	ands	r3, r2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01a      	beq.n	8005814 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d013      	beq.n	8005814 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0204 	bic.w	r2, r2, #4
 80057fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005800:	2208      	movs	r2, #8
 8005802:	409a      	lsls	r2, r3
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800580c:	f043 0201 	orr.w	r2, r3, #1
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005818:	2201      	movs	r2, #1
 800581a:	409a      	lsls	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4013      	ands	r3, r2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d012      	beq.n	800584a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00b      	beq.n	800584a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005836:	2201      	movs	r2, #1
 8005838:	409a      	lsls	r2, r3
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005842:	f043 0202 	orr.w	r2, r3, #2
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800584e:	2204      	movs	r2, #4
 8005850:	409a      	lsls	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4013      	ands	r3, r2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d012      	beq.n	8005880 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00b      	beq.n	8005880 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800586c:	2204      	movs	r2, #4
 800586e:	409a      	lsls	r2, r3
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005878:	f043 0204 	orr.w	r2, r3, #4
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005884:	2210      	movs	r2, #16
 8005886:	409a      	lsls	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d043      	beq.n	8005918 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d03c      	beq.n	8005918 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058a2:	2210      	movs	r2, #16
 80058a4:	409a      	lsls	r2, r3
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d018      	beq.n	80058ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d108      	bne.n	80058d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d024      	beq.n	8005918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
 80058d6:	e01f      	b.n	8005918 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01b      	beq.n	8005918 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	4798      	blx	r3
 80058e8:	e016      	b.n	8005918 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d107      	bne.n	8005908 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0208 	bic.w	r2, r2, #8
 8005906:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800591c:	2220      	movs	r2, #32
 800591e:	409a      	lsls	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4013      	ands	r3, r2
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 808f 	beq.w	8005a48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0310 	and.w	r3, r3, #16
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8087 	beq.w	8005a48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593e:	2220      	movs	r2, #32
 8005940:	409a      	lsls	r2, r3
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b05      	cmp	r3, #5
 8005950:	d136      	bne.n	80059c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0216 	bic.w	r2, r2, #22
 8005960:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695a      	ldr	r2, [r3, #20]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005970:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d103      	bne.n	8005982 <HAL_DMA_IRQHandler+0x1da>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800597e:	2b00      	cmp	r3, #0
 8005980:	d007      	beq.n	8005992 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0208 	bic.w	r2, r2, #8
 8005990:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005996:	223f      	movs	r2, #63	@ 0x3f
 8005998:	409a      	lsls	r2, r3
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d07e      	beq.n	8005ab4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	4798      	blx	r3
        }
        return;
 80059be:	e079      	b.n	8005ab4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01d      	beq.n	8005a0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10d      	bne.n	80059f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d031      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	4798      	blx	r3
 80059ec:	e02c      	b.n	8005a48 <HAL_DMA_IRQHandler+0x2a0>
 80059ee:	bf00      	nop
 80059f0:	20000004 	.word	0x20000004
 80059f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d023      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
 8005a08:	e01e      	b.n	8005a48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10f      	bne.n	8005a38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 0210 	bic.w	r2, r2, #16
 8005a26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d032      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d022      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2205      	movs	r2, #5
 8005a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0201 	bic.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d307      	bcc.n	8005a90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1f2      	bne.n	8005a74 <HAL_DMA_IRQHandler+0x2cc>
 8005a8e:	e000      	b.n	8005a92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005a90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d005      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	4798      	blx	r3
 8005ab2:	e000      	b.n	8005ab6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ab4:	bf00      	nop
    }
  }
}
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ad8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2b40      	cmp	r3, #64	@ 0x40
 8005ae8:	d108      	bne.n	8005afc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005afa:	e007      	b.n	8005b0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	60da      	str	r2, [r3, #12]
}
 8005b0c:	bf00      	nop
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	3b10      	subs	r3, #16
 8005b28:	4a13      	ldr	r2, [pc, #76]	@ (8005b78 <DMA_CalcBaseAndBitshift+0x60>)
 8005b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2e:	091b      	lsrs	r3, r3, #4
 8005b30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005b32:	4a12      	ldr	r2, [pc, #72]	@ (8005b7c <DMA_CalcBaseAndBitshift+0x64>)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d908      	bls.n	8005b58 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b80 <DMA_CalcBaseAndBitshift+0x68>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	1d1a      	adds	r2, r3, #4
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b56:	e006      	b.n	8005b66 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	4b08      	ldr	r3, [pc, #32]	@ (8005b80 <DMA_CalcBaseAndBitshift+0x68>)
 8005b60:	4013      	ands	r3, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	aaaaaaab 	.word	0xaaaaaaab
 8005b7c:	080204d8 	.word	0x080204d8
 8005b80:	fffffc00 	.word	0xfffffc00

08005b84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d11f      	bne.n	8005bde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d856      	bhi.n	8005c52 <DMA_CheckFifoParam+0xce>
 8005ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8005bac <DMA_CheckFifoParam+0x28>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005bbd 	.word	0x08005bbd
 8005bb0:	08005bcf 	.word	0x08005bcf
 8005bb4:	08005bbd 	.word	0x08005bbd
 8005bb8:	08005c53 	.word	0x08005c53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d046      	beq.n	8005c56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bcc:	e043      	b.n	8005c56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005bd6:	d140      	bne.n	8005c5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bdc:	e03d      	b.n	8005c5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005be6:	d121      	bne.n	8005c2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d837      	bhi.n	8005c5e <DMA_CheckFifoParam+0xda>
 8005bee:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf4 <DMA_CheckFifoParam+0x70>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c05 	.word	0x08005c05
 8005bf8:	08005c0b 	.word	0x08005c0b
 8005bfc:	08005c05 	.word	0x08005c05
 8005c00:	08005c1d 	.word	0x08005c1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
      break;
 8005c08:	e030      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d025      	beq.n	8005c62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c1a:	e022      	b.n	8005c62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c24:	d11f      	bne.n	8005c66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005c2a:	e01c      	b.n	8005c66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d903      	bls.n	8005c3a <DMA_CheckFifoParam+0xb6>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d003      	beq.n	8005c40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005c38:	e018      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c3e:	e015      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00e      	beq.n	8005c6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c50:	e00b      	b.n	8005c6a <DMA_CheckFifoParam+0xe6>
      break;
 8005c52:	bf00      	nop
 8005c54:	e00a      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      break;
 8005c56:	bf00      	nop
 8005c58:	e008      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      break;
 8005c5a:	bf00      	nop
 8005c5c:	e006      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      break;
 8005c5e:	bf00      	nop
 8005c60:	e004      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      break;
 8005c62:	bf00      	nop
 8005c64:	e002      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      break;   
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <DMA_CheckFifoParam+0xe8>
      break;
 8005c6a:	bf00      	nop
    }
  } 
  
  return status; 
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop

08005c7c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e086      	b.n	8005d9c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fb faff 	bl	80012a4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ca6:	4b3f      	ldr	r3, [pc, #252]	@ (8005da4 <HAL_ETH_Init+0x128>)
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005caa:	4a3e      	ldr	r2, [pc, #248]	@ (8005da4 <HAL_ETH_Init+0x128>)
 8005cac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005cb2:	4b3c      	ldr	r3, [pc, #240]	@ (8005da4 <HAL_ETH_Init+0x128>)
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cba:	60bb      	str	r3, [r7, #8]
 8005cbc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8005cbe:	4b3a      	ldr	r3, [pc, #232]	@ (8005da8 <HAL_ETH_Init+0x12c>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4a39      	ldr	r2, [pc, #228]	@ (8005da8 <HAL_ETH_Init+0x12c>)
 8005cc4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005cc8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8005cca:	4b37      	ldr	r3, [pc, #220]	@ (8005da8 <HAL_ETH_Init+0x12c>)
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	4935      	ldr	r1, [pc, #212]	@ (8005da8 <HAL_ETH_Init+0x12c>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8005cd8:	4b33      	ldr	r3, [pc, #204]	@ (8005da8 <HAL_ETH_Init+0x12c>)
 8005cda:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	f043 0301 	orr.w	r3, r3, #1
 8005cee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005cf2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cf4:	f7fe fc70 	bl	80045d8 <HAL_GetTick>
 8005cf8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005cfa:	e011      	b.n	8005d20 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005cfc:	f7fe fc6c 	bl	80045d8 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005d0a:	d909      	bls.n	8005d20 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2204      	movs	r2, #4
 8005d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	22e0      	movs	r2, #224	@ 0xe0
 8005d18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e03d      	b.n	8005d9c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e4      	bne.n	8005cfc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f97a 	bl	800602c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fa25 	bl	8006188 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fa7b 	bl	800623a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f9e3 	bl	8006118 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8005d60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8005dac <HAL_ETH_Init+0x130>)
 8005d70:	430b      	orrs	r3, r1
 8005d72:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8005d86:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2210      	movs	r2, #16
 8005d96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40023800 	.word	0x40023800
 8005da8:	40013800 	.word	0x40013800
 8005dac:	00020060 	.word	0x00020060

08005db0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4b53      	ldr	r3, [pc, #332]	@ (8005f14 <ETH_SetMACConfig+0x164>)
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	7b9b      	ldrb	r3, [r3, #14]
 8005dce:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	7c12      	ldrb	r2, [r2, #16]
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	d102      	bne.n	8005dde <ETH_SetMACConfig+0x2e>
 8005dd8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005ddc:	e000      	b.n	8005de0 <ETH_SetMACConfig+0x30>
 8005dde:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005de0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	7c52      	ldrb	r2, [r2, #17]
 8005de6:	2a00      	cmp	r2, #0
 8005de8:	d102      	bne.n	8005df0 <ETH_SetMACConfig+0x40>
 8005dea:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8005dee:	e000      	b.n	8005df2 <ETH_SetMACConfig+0x42>
 8005df0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005df2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005df8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	7fdb      	ldrb	r3, [r3, #31]
 8005dfe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005e00:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005e06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	7f92      	ldrb	r2, [r2, #30]
 8005e0c:	2a00      	cmp	r2, #0
 8005e0e:	d102      	bne.n	8005e16 <ETH_SetMACConfig+0x66>
 8005e10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005e14:	e000      	b.n	8005e18 <ETH_SetMACConfig+0x68>
 8005e16:	2200      	movs	r2, #0
                        macconf->Speed |
 8005e18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	7f1b      	ldrb	r3, [r3, #28]
 8005e1e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005e20:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005e26:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	791b      	ldrb	r3, [r3, #4]
 8005e2c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005e2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005e36:	2a00      	cmp	r2, #0
 8005e38:	d102      	bne.n	8005e40 <ETH_SetMACConfig+0x90>
 8005e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e3e:	e000      	b.n	8005e42 <ETH_SetMACConfig+0x92>
 8005e40:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005e42:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	7bdb      	ldrb	r3, [r3, #15]
 8005e48:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005e4a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005e50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e58:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005e72:	2001      	movs	r0, #1
 8005e74:	f7fe fbbc 	bl	80045f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005e8e:	4013      	ands	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e96:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005e9e:	2a00      	cmp	r2, #0
 8005ea0:	d101      	bne.n	8005ea6 <ETH_SetMACConfig+0xf6>
 8005ea2:	2280      	movs	r2, #128	@ 0x80
 8005ea4:	e000      	b.n	8005ea8 <ETH_SetMACConfig+0xf8>
 8005ea6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005ea8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005eae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005eb6:	2a01      	cmp	r2, #1
 8005eb8:	d101      	bne.n	8005ebe <ETH_SetMACConfig+0x10e>
 8005eba:	2208      	movs	r2, #8
 8005ebc:	e000      	b.n	8005ec0 <ETH_SetMACConfig+0x110>
 8005ebe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005ec0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005ec8:	2a01      	cmp	r2, #1
 8005eca:	d101      	bne.n	8005ed0 <ETH_SetMACConfig+0x120>
 8005ecc:	2204      	movs	r2, #4
 8005ece:	e000      	b.n	8005ed2 <ETH_SetMACConfig+0x122>
 8005ed0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005ed2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005eda:	2a01      	cmp	r2, #1
 8005edc:	d101      	bne.n	8005ee2 <ETH_SetMACConfig+0x132>
 8005ede:	2202      	movs	r2, #2
 8005ee0:	e000      	b.n	8005ee4 <ETH_SetMACConfig+0x134>
 8005ee2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005efc:	2001      	movs	r0, #1
 8005efe:	f7fe fb77 	bl	80045f0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	619a      	str	r2, [r3, #24]
}
 8005f0a:	bf00      	nop
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	fd20810f 	.word	0xfd20810f

08005f18 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4b3d      	ldr	r3, [pc, #244]	@ (8006028 <ETH_SetDMAConfig+0x110>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	7b1b      	ldrb	r3, [r3, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d102      	bne.n	8005f44 <ETH_SetDMAConfig+0x2c>
 8005f3e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005f42:	e000      	b.n	8005f46 <ETH_SetDMAConfig+0x2e>
 8005f44:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	7b5b      	ldrb	r3, [r3, #13]
 8005f4a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005f4c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	7f52      	ldrb	r2, [r2, #29]
 8005f52:	2a00      	cmp	r2, #0
 8005f54:	d102      	bne.n	8005f5c <ETH_SetDMAConfig+0x44>
 8005f56:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005f5a:	e000      	b.n	8005f5e <ETH_SetDMAConfig+0x46>
 8005f5c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005f5e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	7b9b      	ldrb	r3, [r3, #14]
 8005f64:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005f66:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005f6c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	7f1b      	ldrb	r3, [r3, #28]
 8005f72:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005f74:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	7f9b      	ldrb	r3, [r3, #30]
 8005f7a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005f7c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005f82:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005f8a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005fae:	2001      	movs	r0, #1
 8005fb0:	f7fe fb1e 	bl	80045f0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	791b      	ldrb	r3, [r3, #4]
 8005fc6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005fcc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005fd2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005fd8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005fe0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005fe2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005fea:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005ff0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6812      	ldr	r2, [r2, #0]
 8005ff6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005ffa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ffe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800600c:	2001      	movs	r0, #1
 800600e:	f7fe faef 	bl	80045f0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800601a:	461a      	mov	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6013      	str	r3, [r2, #0]
}
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	f8de3f23 	.word	0xf8de3f23

0800602c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b0a6      	sub	sp, #152	@ 0x98
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006034:	2301      	movs	r3, #1
 8006036:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800603a:	2301      	movs	r3, #1
 800603c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006040:	2300      	movs	r3, #0
 8006042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006044:	2300      	movs	r3, #0
 8006046:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006050:	2300      	movs	r3, #0
 8006052:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800605c:	2301      	movs	r3, #1
 800605e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006062:	2300      	movs	r3, #0
 8006064:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006068:	2300      	movs	r3, #0
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800606e:	2300      	movs	r3, #0
 8006070:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006072:	2300      	movs	r3, #0
 8006074:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006078:	2300      	movs	r3, #0
 800607a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800607c:	2300      	movs	r3, #0
 800607e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006082:	2300      	movs	r3, #0
 8006084:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006088:	2300      	movs	r3, #0
 800608a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800608e:	2300      	movs	r3, #0
 8006090:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006094:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006098:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800609a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800609e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80060a0:	2300      	movs	r3, #0
 80060a2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80060a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80060aa:	4619      	mov	r1, r3
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff fe7f 	bl	8005db0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80060b2:	2301      	movs	r3, #1
 80060b4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80060b6:	2301      	movs	r3, #1
 80060b8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80060c0:	2301      	movs	r3, #1
 80060c2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80060c4:	2300      	movs	r3, #0
 80060c6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80060c8:	2300      	movs	r3, #0
 80060ca:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80060ce:	2300      	movs	r3, #0
 80060d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80060d4:	2300      	movs	r3, #0
 80060d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80060de:	2301      	movs	r3, #1
 80060e0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80060e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80060e6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80060e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80060ec:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80060ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80060f2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80060f4:	2301      	movs	r3, #1
 80060f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80060fe:	2300      	movs	r3, #0
 8006100:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006102:	f107 0308 	add.w	r3, r7, #8
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff ff05 	bl	8005f18 <ETH_SetDMAConfig>
}
 800610e:	bf00      	nop
 8006110:	3798      	adds	r7, #152	@ 0x98
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
	...

08006118 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3305      	adds	r3, #5
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	3204      	adds	r2, #4
 8006130:	7812      	ldrb	r2, [r2, #0]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	4b11      	ldr	r3, [pc, #68]	@ (8006180 <ETH_MACAddressConfig+0x68>)
 800613a:	4413      	add	r3, r2
 800613c:	461a      	mov	r2, r3
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3303      	adds	r3, #3
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	061a      	lsls	r2, r3, #24
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3302      	adds	r3, #2
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	041b      	lsls	r3, r3, #16
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3301      	adds	r3, #1
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	021b      	lsls	r3, r3, #8
 800615c:	4313      	orrs	r3, r2
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	7812      	ldrb	r2, [r2, #0]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <ETH_MACAddressConfig+0x6c>)
 800616a:	4413      	add	r3, r2
 800616c:	461a      	mov	r2, r3
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	6013      	str	r3, [r2, #0]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40028040 	.word	0x40028040
 8006184:	40028044 	.word	0x40028044

08006188 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006190:	2300      	movs	r3, #0
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	e03e      	b.n	8006214 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68d9      	ldr	r1, [r3, #12]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	440b      	add	r3, r1
 80061a6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2200      	movs	r2, #0
 80061b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2200      	movs	r2, #0
 80061b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2200      	movs	r2, #0
 80061be:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	3206      	adds	r2, #6
 80061c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d80c      	bhi.n	80061f8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68d9      	ldr	r1, [r3, #12]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	440b      	add	r3, r1
 80061f0:	461a      	mov	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	60da      	str	r2, [r3, #12]
 80061f6:	e004      	b.n	8006202 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	461a      	mov	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3301      	adds	r3, #1
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2b03      	cmp	r3, #3
 8006218:	d9bd      	bls.n	8006196 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800622c:	611a      	str	r2, [r3, #16]
}
 800622e:	bf00      	nop
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	e048      	b.n	80062da <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6919      	ldr	r1, [r3, #16]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	440b      	add	r3, r1
 8006258:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2200      	movs	r2, #0
 8006264:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2200      	movs	r2, #0
 800626a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2200      	movs	r2, #0
 8006270:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2200      	movs	r2, #0
 8006276:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2200      	movs	r2, #0
 800627c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006284:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	3212      	adds	r2, #18
 80062a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d80c      	bhi.n	80062ca <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6919      	ldr	r1, [r3, #16]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	440b      	add	r3, r1
 80062c2:	461a      	mov	r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	60da      	str	r2, [r3, #12]
 80062c8:	e004      	b.n	80062d4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	461a      	mov	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3301      	adds	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d9b3      	bls.n	8006248 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800630a:	60da      	str	r2, [r3, #12]
}
 800630c:	bf00      	nop
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006318:	b480      	push	{r7}
 800631a:	b089      	sub	sp, #36	@ 0x24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006322:	2300      	movs	r3, #0
 8006324:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006326:	2300      	movs	r3, #0
 8006328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800632a:	2300      	movs	r3, #0
 800632c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800632e:	2300      	movs	r3, #0
 8006330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
 8006336:	e175      	b.n	8006624 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006338:	2201      	movs	r2, #1
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4013      	ands	r3, r2
 800634a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	429a      	cmp	r2, r3
 8006352:	f040 8164 	bne.w	800661e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	2b01      	cmp	r3, #1
 8006360:	d005      	beq.n	800636e <HAL_GPIO_Init+0x56>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d130      	bne.n	80063d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	005b      	lsls	r3, r3, #1
 8006378:	2203      	movs	r2, #3
 800637a:	fa02 f303 	lsl.w	r3, r2, r3
 800637e:	43db      	mvns	r3, r3
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	4013      	ands	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4313      	orrs	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063a4:	2201      	movs	r2, #1
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	43db      	mvns	r3, r3
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4013      	ands	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	091b      	lsrs	r3, r3, #4
 80063ba:	f003 0201 	and.w	r2, r3, #1
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f003 0303 	and.w	r3, r3, #3
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d017      	beq.n	800640c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	2203      	movs	r2, #3
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	43db      	mvns	r3, r3
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	4013      	ands	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	4313      	orrs	r3, r2
 8006404:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d123      	bne.n	8006460 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	08da      	lsrs	r2, r3, #3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3208      	adds	r2, #8
 8006420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	220f      	movs	r2, #15
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	43db      	mvns	r3, r3
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	4013      	ands	r3, r2
 800643a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	691a      	ldr	r2, [r3, #16]
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	4313      	orrs	r3, r2
 8006450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	08da      	lsrs	r2, r3, #3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	3208      	adds	r2, #8
 800645a:	69b9      	ldr	r1, [r7, #24]
 800645c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	2203      	movs	r2, #3
 800646c:	fa02 f303 	lsl.w	r3, r2, r3
 8006470:	43db      	mvns	r3, r3
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	4013      	ands	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f003 0203 	and.w	r2, r3, #3
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	005b      	lsls	r3, r3, #1
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	4313      	orrs	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 80be 	beq.w	800661e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064a2:	4b66      	ldr	r3, [pc, #408]	@ (800663c <HAL_GPIO_Init+0x324>)
 80064a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a6:	4a65      	ldr	r2, [pc, #404]	@ (800663c <HAL_GPIO_Init+0x324>)
 80064a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80064ae:	4b63      	ldr	r3, [pc, #396]	@ (800663c <HAL_GPIO_Init+0x324>)
 80064b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80064ba:	4a61      	ldr	r2, [pc, #388]	@ (8006640 <HAL_GPIO_Init+0x328>)
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	089b      	lsrs	r3, r3, #2
 80064c0:	3302      	adds	r3, #2
 80064c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	220f      	movs	r2, #15
 80064d2:	fa02 f303 	lsl.w	r3, r2, r3
 80064d6:	43db      	mvns	r3, r3
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	4013      	ands	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a58      	ldr	r2, [pc, #352]	@ (8006644 <HAL_GPIO_Init+0x32c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d037      	beq.n	8006556 <HAL_GPIO_Init+0x23e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a57      	ldr	r2, [pc, #348]	@ (8006648 <HAL_GPIO_Init+0x330>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d031      	beq.n	8006552 <HAL_GPIO_Init+0x23a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a56      	ldr	r2, [pc, #344]	@ (800664c <HAL_GPIO_Init+0x334>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d02b      	beq.n	800654e <HAL_GPIO_Init+0x236>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a55      	ldr	r2, [pc, #340]	@ (8006650 <HAL_GPIO_Init+0x338>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d025      	beq.n	800654a <HAL_GPIO_Init+0x232>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a54      	ldr	r2, [pc, #336]	@ (8006654 <HAL_GPIO_Init+0x33c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d01f      	beq.n	8006546 <HAL_GPIO_Init+0x22e>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a53      	ldr	r2, [pc, #332]	@ (8006658 <HAL_GPIO_Init+0x340>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d019      	beq.n	8006542 <HAL_GPIO_Init+0x22a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a52      	ldr	r2, [pc, #328]	@ (800665c <HAL_GPIO_Init+0x344>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d013      	beq.n	800653e <HAL_GPIO_Init+0x226>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a51      	ldr	r2, [pc, #324]	@ (8006660 <HAL_GPIO_Init+0x348>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00d      	beq.n	800653a <HAL_GPIO_Init+0x222>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a50      	ldr	r2, [pc, #320]	@ (8006664 <HAL_GPIO_Init+0x34c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d007      	beq.n	8006536 <HAL_GPIO_Init+0x21e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a4f      	ldr	r2, [pc, #316]	@ (8006668 <HAL_GPIO_Init+0x350>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d101      	bne.n	8006532 <HAL_GPIO_Init+0x21a>
 800652e:	2309      	movs	r3, #9
 8006530:	e012      	b.n	8006558 <HAL_GPIO_Init+0x240>
 8006532:	230a      	movs	r3, #10
 8006534:	e010      	b.n	8006558 <HAL_GPIO_Init+0x240>
 8006536:	2308      	movs	r3, #8
 8006538:	e00e      	b.n	8006558 <HAL_GPIO_Init+0x240>
 800653a:	2307      	movs	r3, #7
 800653c:	e00c      	b.n	8006558 <HAL_GPIO_Init+0x240>
 800653e:	2306      	movs	r3, #6
 8006540:	e00a      	b.n	8006558 <HAL_GPIO_Init+0x240>
 8006542:	2305      	movs	r3, #5
 8006544:	e008      	b.n	8006558 <HAL_GPIO_Init+0x240>
 8006546:	2304      	movs	r3, #4
 8006548:	e006      	b.n	8006558 <HAL_GPIO_Init+0x240>
 800654a:	2303      	movs	r3, #3
 800654c:	e004      	b.n	8006558 <HAL_GPIO_Init+0x240>
 800654e:	2302      	movs	r3, #2
 8006550:	e002      	b.n	8006558 <HAL_GPIO_Init+0x240>
 8006552:	2301      	movs	r3, #1
 8006554:	e000      	b.n	8006558 <HAL_GPIO_Init+0x240>
 8006556:	2300      	movs	r3, #0
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	f002 0203 	and.w	r2, r2, #3
 800655e:	0092      	lsls	r2, r2, #2
 8006560:	4093      	lsls	r3, r2
 8006562:	69ba      	ldr	r2, [r7, #24]
 8006564:	4313      	orrs	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006568:	4935      	ldr	r1, [pc, #212]	@ (8006640 <HAL_GPIO_Init+0x328>)
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	089b      	lsrs	r3, r3, #2
 800656e:	3302      	adds	r3, #2
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006576:	4b3d      	ldr	r3, [pc, #244]	@ (800666c <HAL_GPIO_Init+0x354>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	43db      	mvns	r3, r3
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	4013      	ands	r3, r2
 8006584:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800659a:	4a34      	ldr	r2, [pc, #208]	@ (800666c <HAL_GPIO_Init+0x354>)
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065a0:	4b32      	ldr	r3, [pc, #200]	@ (800666c <HAL_GPIO_Init+0x354>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	43db      	mvns	r3, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	4013      	ands	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065c4:	4a29      	ldr	r2, [pc, #164]	@ (800666c <HAL_GPIO_Init+0x354>)
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80065ca:	4b28      	ldr	r3, [pc, #160]	@ (800666c <HAL_GPIO_Init+0x354>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	43db      	mvns	r3, r3
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	4013      	ands	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80065ee:	4a1f      	ldr	r2, [pc, #124]	@ (800666c <HAL_GPIO_Init+0x354>)
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065f4:	4b1d      	ldr	r3, [pc, #116]	@ (800666c <HAL_GPIO_Init+0x354>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	43db      	mvns	r3, r3
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	4013      	ands	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006618:	4a14      	ldr	r2, [pc, #80]	@ (800666c <HAL_GPIO_Init+0x354>)
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	3301      	adds	r3, #1
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	2b0f      	cmp	r3, #15
 8006628:	f67f ae86 	bls.w	8006338 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	3724      	adds	r7, #36	@ 0x24
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	40023800 	.word	0x40023800
 8006640:	40013800 	.word	0x40013800
 8006644:	40020000 	.word	0x40020000
 8006648:	40020400 	.word	0x40020400
 800664c:	40020800 	.word	0x40020800
 8006650:	40020c00 	.word	0x40020c00
 8006654:	40021000 	.word	0x40021000
 8006658:	40021400 	.word	0x40021400
 800665c:	40021800 	.word	0x40021800
 8006660:	40021c00 	.word	0x40021c00
 8006664:	40022000 	.word	0x40022000
 8006668:	40022400 	.word	0x40022400
 800666c:	40013c00 	.word	0x40013c00

08006670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	807b      	strh	r3, [r7, #2]
 800667c:	4613      	mov	r3, r2
 800667e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006680:	787b      	ldrb	r3, [r7, #1]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006686:	887a      	ldrh	r2, [r7, #2]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800668c:	e003      	b.n	8006696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800668e:	887b      	ldrh	r3, [r7, #2]
 8006690:	041a      	lsls	r2, r3, #16
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	619a      	str	r2, [r3, #24]
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b086      	sub	sp, #24
 80066a6:	af02      	add	r7, sp, #8
 80066a8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e108      	b.n	80068c6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fa ff58 	bl	8001584 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2203      	movs	r2, #3
 80066d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066e2:	d102      	bne.n	80066ea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f003 f822 	bl	8009738 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	7c1a      	ldrb	r2, [r3, #16]
 80066fc:	f88d 2000 	strb.w	r2, [sp]
 8006700:	3304      	adds	r3, #4
 8006702:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006704:	f002 ffbe 	bl	8009684 <USB_CoreInit>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e0d5      	b.n	80068c6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2100      	movs	r1, #0
 8006720:	4618      	mov	r0, r3
 8006722:	f003 f81a 	bl	800975a <USB_SetCurrentMode>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e0c6      	b.n	80068c6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006738:	2300      	movs	r3, #0
 800673a:	73fb      	strb	r3, [r7, #15]
 800673c:	e04a      	b.n	80067d4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800673e:	7bfa      	ldrb	r2, [r7, #15]
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	4613      	mov	r3, r2
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	4413      	add	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	440b      	add	r3, r1
 800674c:	3315      	adds	r3, #21
 800674e:	2201      	movs	r2, #1
 8006750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006752:	7bfa      	ldrb	r2, [r7, #15]
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	4613      	mov	r3, r2
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	440b      	add	r3, r1
 8006760:	3314      	adds	r3, #20
 8006762:	7bfa      	ldrb	r2, [r7, #15]
 8006764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006766:	7bfa      	ldrb	r2, [r7, #15]
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	b298      	uxth	r0, r3
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	332e      	adds	r3, #46	@ 0x2e
 800677a:	4602      	mov	r2, r0
 800677c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800677e:	7bfa      	ldrb	r2, [r7, #15]
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	3318      	adds	r3, #24
 800678e:	2200      	movs	r2, #0
 8006790:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006792:	7bfa      	ldrb	r2, [r7, #15]
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	4613      	mov	r3, r2
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	440b      	add	r3, r1
 80067a0:	331c      	adds	r3, #28
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80067a6:	7bfa      	ldrb	r2, [r7, #15]
 80067a8:	6879      	ldr	r1, [r7, #4]
 80067aa:	4613      	mov	r3, r2
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	4413      	add	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	3320      	adds	r3, #32
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80067ba:	7bfa      	ldrb	r2, [r7, #15]
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	4413      	add	r3, r2
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	440b      	add	r3, r1
 80067c8:	3324      	adds	r3, #36	@ 0x24
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	3301      	adds	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	791b      	ldrb	r3, [r3, #4]
 80067d8:	7bfa      	ldrb	r2, [r7, #15]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d3af      	bcc.n	800673e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]
 80067e2:	e044      	b.n	800686e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80067e4:	7bfa      	ldrb	r2, [r7, #15]
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	4613      	mov	r3, r2
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	440b      	add	r3, r1
 80067f2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80067f6:	2200      	movs	r2, #0
 80067f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80067fa:	7bfa      	ldrb	r2, [r7, #15]
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	4613      	mov	r3, r2
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800680c:	7bfa      	ldrb	r2, [r7, #15]
 800680e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006810:	7bfa      	ldrb	r2, [r7, #15]
 8006812:	6879      	ldr	r1, [r7, #4]
 8006814:	4613      	mov	r3, r2
 8006816:	00db      	lsls	r3, r3, #3
 8006818:	4413      	add	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	440b      	add	r3, r1
 800681e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006826:	7bfa      	ldrb	r2, [r7, #15]
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	00db      	lsls	r3, r3, #3
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800683c:	7bfa      	ldrb	r2, [r7, #15]
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800684e:	2200      	movs	r2, #0
 8006850:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006852:	7bfa      	ldrb	r2, [r7, #15]
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	4613      	mov	r3, r2
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	4413      	add	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	3301      	adds	r3, #1
 800686c:	73fb      	strb	r3, [r7, #15]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	791b      	ldrb	r3, [r3, #4]
 8006872:	7bfa      	ldrb	r2, [r7, #15]
 8006874:	429a      	cmp	r2, r3
 8006876:	d3b5      	bcc.n	80067e4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	7c1a      	ldrb	r2, [r3, #16]
 8006880:	f88d 2000 	strb.w	r2, [sp]
 8006884:	3304      	adds	r3, #4
 8006886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006888:	f002 ffb4 	bl	80097f4 <USB_DevInit>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d005      	beq.n	800689e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2202      	movs	r2, #2
 8006896:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e013      	b.n	80068c6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	7b1b      	ldrb	r3, [r3, #12]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d102      	bne.n	80068ba <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 f80b 	bl	80068d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f003 f96f 	bl	8009ba2 <USB_DevDisconnect>

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
	...

080068d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068fe:	4b05      	ldr	r3, [pc, #20]	@ (8006914 <HAL_PCDEx_ActivateLPM+0x44>)
 8006900:	4313      	orrs	r3, r2
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	10000003 	.word	0x10000003

08006918 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800691c:	4b05      	ldr	r3, [pc, #20]	@ (8006934 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a04      	ldr	r2, [pc, #16]	@ (8006934 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006926:	6013      	str	r3, [r2, #0]
}
 8006928:	bf00      	nop
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40007000 	.word	0x40007000

08006938 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006942:	4b23      	ldr	r3, [pc, #140]	@ (80069d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006946:	4a22      	ldr	r2, [pc, #136]	@ (80069d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800694c:	6413      	str	r3, [r2, #64]	@ 0x40
 800694e:	4b20      	ldr	r3, [pc, #128]	@ (80069d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800695a:	4b1e      	ldr	r3, [pc, #120]	@ (80069d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a1d      	ldr	r2, [pc, #116]	@ (80069d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006964:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006966:	f7fd fe37 	bl	80045d8 <HAL_GetTick>
 800696a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800696c:	e009      	b.n	8006982 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800696e:	f7fd fe33 	bl	80045d8 <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800697c:	d901      	bls.n	8006982 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e022      	b.n	80069c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006982:	4b14      	ldr	r3, [pc, #80]	@ (80069d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800698a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800698e:	d1ee      	bne.n	800696e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006990:	4b10      	ldr	r3, [pc, #64]	@ (80069d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a0f      	ldr	r2, [pc, #60]	@ (80069d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800699a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800699c:	f7fd fe1c 	bl	80045d8 <HAL_GetTick>
 80069a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80069a2:	e009      	b.n	80069b8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80069a4:	f7fd fe18 	bl	80045d8 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069b2:	d901      	bls.n	80069b8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e007      	b.n	80069c8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80069b8:	4b06      	ldr	r3, [pc, #24]	@ (80069d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069c4:	d1ee      	bne.n	80069a4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	40023800 	.word	0x40023800
 80069d4:	40007000 	.word	0x40007000

080069d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80069e0:	2300      	movs	r3, #0
 80069e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e29b      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 8087 	beq.w	8006b0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069fc:	4b96      	ldr	r3, [pc, #600]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 030c 	and.w	r3, r3, #12
 8006a04:	2b04      	cmp	r3, #4
 8006a06:	d00c      	beq.n	8006a22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a08:	4b93      	ldr	r3, [pc, #588]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 030c 	and.w	r3, r3, #12
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d112      	bne.n	8006a3a <HAL_RCC_OscConfig+0x62>
 8006a14:	4b90      	ldr	r3, [pc, #576]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a20:	d10b      	bne.n	8006a3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a22:	4b8d      	ldr	r3, [pc, #564]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d06c      	beq.n	8006b08 <HAL_RCC_OscConfig+0x130>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d168      	bne.n	8006b08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e275      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a42:	d106      	bne.n	8006a52 <HAL_RCC_OscConfig+0x7a>
 8006a44:	4b84      	ldr	r3, [pc, #528]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a83      	ldr	r2, [pc, #524]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a4e:	6013      	str	r3, [r2, #0]
 8006a50:	e02e      	b.n	8006ab0 <HAL_RCC_OscConfig+0xd8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10c      	bne.n	8006a74 <HAL_RCC_OscConfig+0x9c>
 8006a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	4b7c      	ldr	r3, [pc, #496]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a7b      	ldr	r2, [pc, #492]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	e01d      	b.n	8006ab0 <HAL_RCC_OscConfig+0xd8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a7c:	d10c      	bne.n	8006a98 <HAL_RCC_OscConfig+0xc0>
 8006a7e:	4b76      	ldr	r3, [pc, #472]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a75      	ldr	r2, [pc, #468]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	4b73      	ldr	r3, [pc, #460]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a72      	ldr	r2, [pc, #456]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	e00b      	b.n	8006ab0 <HAL_RCC_OscConfig+0xd8>
 8006a98:	4b6f      	ldr	r3, [pc, #444]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a6e      	ldr	r2, [pc, #440]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006aa2:	6013      	str	r3, [r2, #0]
 8006aa4:	4b6c      	ldr	r3, [pc, #432]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a6b      	ldr	r2, [pc, #428]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d013      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab8:	f7fd fd8e 	bl	80045d8 <HAL_GetTick>
 8006abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ac0:	f7fd fd8a 	bl	80045d8 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b64      	cmp	r3, #100	@ 0x64
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e229      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ad2:	4b61      	ldr	r3, [pc, #388]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0f0      	beq.n	8006ac0 <HAL_RCC_OscConfig+0xe8>
 8006ade:	e014      	b.n	8006b0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae0:	f7fd fd7a 	bl	80045d8 <HAL_GetTick>
 8006ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ae6:	e008      	b.n	8006afa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae8:	f7fd fd76 	bl	80045d8 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b64      	cmp	r3, #100	@ 0x64
 8006af4:	d901      	bls.n	8006afa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e215      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006afa:	4b57      	ldr	r3, [pc, #348]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1f0      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x110>
 8006b06:	e000      	b.n	8006b0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d069      	beq.n	8006bea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b16:	4b50      	ldr	r3, [pc, #320]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f003 030c 	and.w	r3, r3, #12
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00b      	beq.n	8006b3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b22:	4b4d      	ldr	r3, [pc, #308]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 030c 	and.w	r3, r3, #12
 8006b2a:	2b08      	cmp	r3, #8
 8006b2c:	d11c      	bne.n	8006b68 <HAL_RCC_OscConfig+0x190>
 8006b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d116      	bne.n	8006b68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b3a:	4b47      	ldr	r3, [pc, #284]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d005      	beq.n	8006b52 <HAL_RCC_OscConfig+0x17a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d001      	beq.n	8006b52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e1e9      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b52:	4b41      	ldr	r3, [pc, #260]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	493d      	ldr	r1, [pc, #244]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b66:	e040      	b.n	8006bea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d023      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b70:	4b39      	ldr	r3, [pc, #228]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a38      	ldr	r2, [pc, #224]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7c:	f7fd fd2c 	bl	80045d8 <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b84:	f7fd fd28 	bl	80045d8 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e1c7      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b96:	4b30      	ldr	r3, [pc, #192]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	4929      	ldr	r1, [pc, #164]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	600b      	str	r3, [r1, #0]
 8006bb6:	e018      	b.n	8006bea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bb8:	4b27      	ldr	r3, [pc, #156]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a26      	ldr	r2, [pc, #152]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006bbe:	f023 0301 	bic.w	r3, r3, #1
 8006bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc4:	f7fd fd08 	bl	80045d8 <HAL_GetTick>
 8006bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bcc:	f7fd fd04 	bl	80045d8 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e1a3      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bde:	4b1e      	ldr	r3, [pc, #120]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1f0      	bne.n	8006bcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d038      	beq.n	8006c68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d019      	beq.n	8006c32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bfe:	4b16      	ldr	r3, [pc, #88]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c02:	4a15      	ldr	r2, [pc, #84]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006c04:	f043 0301 	orr.w	r3, r3, #1
 8006c08:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c0a:	f7fd fce5 	bl	80045d8 <HAL_GetTick>
 8006c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c10:	e008      	b.n	8006c24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c12:	f7fd fce1 	bl	80045d8 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d901      	bls.n	8006c24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e180      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c24:	4b0c      	ldr	r3, [pc, #48]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d0f0      	beq.n	8006c12 <HAL_RCC_OscConfig+0x23a>
 8006c30:	e01a      	b.n	8006c68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c32:	4b09      	ldr	r3, [pc, #36]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c36:	4a08      	ldr	r2, [pc, #32]	@ (8006c58 <HAL_RCC_OscConfig+0x280>)
 8006c38:	f023 0301 	bic.w	r3, r3, #1
 8006c3c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c3e:	f7fd fccb 	bl	80045d8 <HAL_GetTick>
 8006c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c44:	e00a      	b.n	8006c5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c46:	f7fd fcc7 	bl	80045d8 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d903      	bls.n	8006c5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e166      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
 8006c58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c5c:	4b92      	ldr	r3, [pc, #584]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006c5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1ee      	bne.n	8006c46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80a4 	beq.w	8006dbe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c76:	4b8c      	ldr	r3, [pc, #560]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10d      	bne.n	8006c9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c82:	4b89      	ldr	r3, [pc, #548]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c86:	4a88      	ldr	r2, [pc, #544]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c8e:	4b86      	ldr	r3, [pc, #536]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c96:	60bb      	str	r3, [r7, #8]
 8006c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c9e:	4b83      	ldr	r3, [pc, #524]	@ (8006eac <HAL_RCC_OscConfig+0x4d4>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d118      	bne.n	8006cdc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006caa:	4b80      	ldr	r3, [pc, #512]	@ (8006eac <HAL_RCC_OscConfig+0x4d4>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a7f      	ldr	r2, [pc, #508]	@ (8006eac <HAL_RCC_OscConfig+0x4d4>)
 8006cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cb6:	f7fd fc8f 	bl	80045d8 <HAL_GetTick>
 8006cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cbc:	e008      	b.n	8006cd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cbe:	f7fd fc8b 	bl	80045d8 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	2b64      	cmp	r3, #100	@ 0x64
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e12a      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cd0:	4b76      	ldr	r3, [pc, #472]	@ (8006eac <HAL_RCC_OscConfig+0x4d4>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0f0      	beq.n	8006cbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d106      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x31a>
 8006ce4:	4b70      	ldr	r3, [pc, #448]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ce8:	4a6f      	ldr	r2, [pc, #444]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006cea:	f043 0301 	orr.w	r3, r3, #1
 8006cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cf0:	e02d      	b.n	8006d4e <HAL_RCC_OscConfig+0x376>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10c      	bne.n	8006d14 <HAL_RCC_OscConfig+0x33c>
 8006cfa:	4b6b      	ldr	r3, [pc, #428]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cfe:	4a6a      	ldr	r2, [pc, #424]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006d00:	f023 0301 	bic.w	r3, r3, #1
 8006d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d06:	4b68      	ldr	r3, [pc, #416]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d0a:	4a67      	ldr	r2, [pc, #412]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006d0c:	f023 0304 	bic.w	r3, r3, #4
 8006d10:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d12:	e01c      	b.n	8006d4e <HAL_RCC_OscConfig+0x376>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	2b05      	cmp	r3, #5
 8006d1a:	d10c      	bne.n	8006d36 <HAL_RCC_OscConfig+0x35e>
 8006d1c:	4b62      	ldr	r3, [pc, #392]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d20:	4a61      	ldr	r2, [pc, #388]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006d22:	f043 0304 	orr.w	r3, r3, #4
 8006d26:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d28:	4b5f      	ldr	r3, [pc, #380]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d2c:	4a5e      	ldr	r2, [pc, #376]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006d2e:	f043 0301 	orr.w	r3, r3, #1
 8006d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d34:	e00b      	b.n	8006d4e <HAL_RCC_OscConfig+0x376>
 8006d36:	4b5c      	ldr	r3, [pc, #368]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006d3c:	f023 0301 	bic.w	r3, r3, #1
 8006d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d42:	4b59      	ldr	r3, [pc, #356]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d46:	4a58      	ldr	r2, [pc, #352]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006d48:	f023 0304 	bic.w	r3, r3, #4
 8006d4c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d015      	beq.n	8006d82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d56:	f7fd fc3f 	bl	80045d8 <HAL_GetTick>
 8006d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d5c:	e00a      	b.n	8006d74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d5e:	f7fd fc3b 	bl	80045d8 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d901      	bls.n	8006d74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e0d8      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d74:	4b4c      	ldr	r3, [pc, #304]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0ee      	beq.n	8006d5e <HAL_RCC_OscConfig+0x386>
 8006d80:	e014      	b.n	8006dac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d82:	f7fd fc29 	bl	80045d8 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d88:	e00a      	b.n	8006da0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d8a:	f7fd fc25 	bl	80045d8 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e0c2      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006da0:	4b41      	ldr	r3, [pc, #260]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1ee      	bne.n	8006d8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d105      	bne.n	8006dbe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006db2:	4b3d      	ldr	r3, [pc, #244]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db6:	4a3c      	ldr	r2, [pc, #240]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006db8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dbc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 80ae 	beq.w	8006f24 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006dc8:	4b37      	ldr	r3, [pc, #220]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f003 030c 	and.w	r3, r3, #12
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	d06d      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d14b      	bne.n	8006e74 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ddc:	4b32      	ldr	r3, [pc, #200]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a31      	ldr	r2, [pc, #196]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de8:	f7fd fbf6 	bl	80045d8 <HAL_GetTick>
 8006dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dee:	e008      	b.n	8006e02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006df0:	f7fd fbf2 	bl	80045d8 <HAL_GetTick>
 8006df4:	4602      	mov	r2, r0
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d901      	bls.n	8006e02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e091      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e02:	4b29      	ldr	r3, [pc, #164]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1f0      	bne.n	8006df0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69da      	ldr	r2, [r3, #28]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1c:	019b      	lsls	r3, r3, #6
 8006e1e:	431a      	orrs	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e24:	085b      	lsrs	r3, r3, #1
 8006e26:	3b01      	subs	r3, #1
 8006e28:	041b      	lsls	r3, r3, #16
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e30:	061b      	lsls	r3, r3, #24
 8006e32:	431a      	orrs	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e38:	071b      	lsls	r3, r3, #28
 8006e3a:	491b      	ldr	r1, [pc, #108]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e40:	4b19      	ldr	r3, [pc, #100]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a18      	ldr	r2, [pc, #96]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e4c:	f7fd fbc4 	bl	80045d8 <HAL_GetTick>
 8006e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e54:	f7fd fbc0 	bl	80045d8 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e05f      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e66:	4b10      	ldr	r3, [pc, #64]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0f0      	beq.n	8006e54 <HAL_RCC_OscConfig+0x47c>
 8006e72:	e057      	b.n	8006f24 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e74:	4b0c      	ldr	r3, [pc, #48]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a0b      	ldr	r2, [pc, #44]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006e7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e80:	f7fd fbaa 	bl	80045d8 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e88:	f7fd fba6 	bl	80045d8 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e045      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e9a:	4b03      	ldr	r3, [pc, #12]	@ (8006ea8 <HAL_RCC_OscConfig+0x4d0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f0      	bne.n	8006e88 <HAL_RCC_OscConfig+0x4b0>
 8006ea6:	e03d      	b.n	8006f24 <HAL_RCC_OscConfig+0x54c>
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8006f30 <HAL_RCC_OscConfig+0x558>)
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d030      	beq.n	8006f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d129      	bne.n	8006f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d122      	bne.n	8006f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ee6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d119      	bne.n	8006f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d10f      	bne.n	8006f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d107      	bne.n	8006f20 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f1a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d001      	beq.n	8006f24 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e000      	b.n	8006f26 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	40023800 	.word	0x40023800

08006f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e0d0      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80070f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 030f 	and.w	r3, r3, #15
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d910      	bls.n	8006f7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f5a:	4b67      	ldr	r3, [pc, #412]	@ (80070f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f023 020f 	bic.w	r2, r3, #15
 8006f62:	4965      	ldr	r1, [pc, #404]	@ (80070f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f6a:	4b63      	ldr	r3, [pc, #396]	@ (80070f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 030f 	and.w	r3, r3, #15
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d001      	beq.n	8006f7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e0b8      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d020      	beq.n	8006fca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d005      	beq.n	8006fa0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f94:	4b59      	ldr	r3, [pc, #356]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	4a58      	ldr	r2, [pc, #352]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 8006f9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006f9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0308 	and.w	r3, r3, #8
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d005      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fac:	4b53      	ldr	r3, [pc, #332]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	4a52      	ldr	r2, [pc, #328]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 8006fb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006fb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fb8:	4b50      	ldr	r3, [pc, #320]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	494d      	ldr	r1, [pc, #308]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d040      	beq.n	8007058 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d107      	bne.n	8006fee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fde:	4b47      	ldr	r3, [pc, #284]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d115      	bne.n	8007016 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e07f      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d107      	bne.n	8007006 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ff6:	4b41      	ldr	r3, [pc, #260]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d109      	bne.n	8007016 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e073      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007006:	4b3d      	ldr	r3, [pc, #244]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e06b      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007016:	4b39      	ldr	r3, [pc, #228]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f023 0203 	bic.w	r2, r3, #3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	4936      	ldr	r1, [pc, #216]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 8007024:	4313      	orrs	r3, r2
 8007026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007028:	f7fd fad6 	bl	80045d8 <HAL_GetTick>
 800702c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800702e:	e00a      	b.n	8007046 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007030:	f7fd fad2 	bl	80045d8 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800703e:	4293      	cmp	r3, r2
 8007040:	d901      	bls.n	8007046 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e053      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007046:	4b2d      	ldr	r3, [pc, #180]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f003 020c 	and.w	r2, r3, #12
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	429a      	cmp	r2, r3
 8007056:	d1eb      	bne.n	8007030 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007058:	4b27      	ldr	r3, [pc, #156]	@ (80070f8 <HAL_RCC_ClockConfig+0x1c4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	429a      	cmp	r2, r3
 8007064:	d210      	bcs.n	8007088 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007066:	4b24      	ldr	r3, [pc, #144]	@ (80070f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f023 020f 	bic.w	r2, r3, #15
 800706e:	4922      	ldr	r1, [pc, #136]	@ (80070f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	4313      	orrs	r3, r2
 8007074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007076:	4b20      	ldr	r3, [pc, #128]	@ (80070f8 <HAL_RCC_ClockConfig+0x1c4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d001      	beq.n	8007088 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e032      	b.n	80070ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0304 	and.w	r3, r3, #4
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007094:	4b19      	ldr	r3, [pc, #100]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	4916      	ldr	r1, [pc, #88]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0308 	and.w	r3, r3, #8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d009      	beq.n	80070c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070b2:	4b12      	ldr	r3, [pc, #72]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	490e      	ldr	r1, [pc, #56]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070c6:	f000 f821 	bl	800710c <HAL_RCC_GetSysClockFreq>
 80070ca:	4602      	mov	r2, r0
 80070cc:	4b0b      	ldr	r3, [pc, #44]	@ (80070fc <HAL_RCC_ClockConfig+0x1c8>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	091b      	lsrs	r3, r3, #4
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	490a      	ldr	r1, [pc, #40]	@ (8007100 <HAL_RCC_ClockConfig+0x1cc>)
 80070d8:	5ccb      	ldrb	r3, [r1, r3]
 80070da:	fa22 f303 	lsr.w	r3, r2, r3
 80070de:	4a09      	ldr	r2, [pc, #36]	@ (8007104 <HAL_RCC_ClockConfig+0x1d0>)
 80070e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80070e2:	4b09      	ldr	r3, [pc, #36]	@ (8007108 <HAL_RCC_ClockConfig+0x1d4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fd fa32 	bl	8004550 <HAL_InitTick>

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	40023c00 	.word	0x40023c00
 80070fc:	40023800 	.word	0x40023800
 8007100:	0800cfe8 	.word	0x0800cfe8
 8007104:	20000004 	.word	0x20000004
 8007108:	20000008 	.word	0x20000008

0800710c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800710c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007110:	b094      	sub	sp, #80	@ 0x50
 8007112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007114:	2300      	movs	r3, #0
 8007116:	647b      	str	r3, [r7, #68]	@ 0x44
 8007118:	2300      	movs	r3, #0
 800711a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800711c:	2300      	movs	r3, #0
 800711e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007120:	2300      	movs	r3, #0
 8007122:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007124:	4b79      	ldr	r3, [pc, #484]	@ (800730c <HAL_RCC_GetSysClockFreq+0x200>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f003 030c 	and.w	r3, r3, #12
 800712c:	2b08      	cmp	r3, #8
 800712e:	d00d      	beq.n	800714c <HAL_RCC_GetSysClockFreq+0x40>
 8007130:	2b08      	cmp	r3, #8
 8007132:	f200 80e1 	bhi.w	80072f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <HAL_RCC_GetSysClockFreq+0x34>
 800713a:	2b04      	cmp	r3, #4
 800713c:	d003      	beq.n	8007146 <HAL_RCC_GetSysClockFreq+0x3a>
 800713e:	e0db      	b.n	80072f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007140:	4b73      	ldr	r3, [pc, #460]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x204>)
 8007142:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007144:	e0db      	b.n	80072fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007146:	4b73      	ldr	r3, [pc, #460]	@ (8007314 <HAL_RCC_GetSysClockFreq+0x208>)
 8007148:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800714a:	e0d8      	b.n	80072fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800714c:	4b6f      	ldr	r3, [pc, #444]	@ (800730c <HAL_RCC_GetSysClockFreq+0x200>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007154:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007156:	4b6d      	ldr	r3, [pc, #436]	@ (800730c <HAL_RCC_GetSysClockFreq+0x200>)
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d063      	beq.n	800722a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007162:	4b6a      	ldr	r3, [pc, #424]	@ (800730c <HAL_RCC_GetSysClockFreq+0x200>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	099b      	lsrs	r3, r3, #6
 8007168:	2200      	movs	r2, #0
 800716a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800716c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800716e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007174:	633b      	str	r3, [r7, #48]	@ 0x30
 8007176:	2300      	movs	r3, #0
 8007178:	637b      	str	r3, [r7, #52]	@ 0x34
 800717a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800717e:	4622      	mov	r2, r4
 8007180:	462b      	mov	r3, r5
 8007182:	f04f 0000 	mov.w	r0, #0
 8007186:	f04f 0100 	mov.w	r1, #0
 800718a:	0159      	lsls	r1, r3, #5
 800718c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007190:	0150      	lsls	r0, r2, #5
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4621      	mov	r1, r4
 8007198:	1a51      	subs	r1, r2, r1
 800719a:	6139      	str	r1, [r7, #16]
 800719c:	4629      	mov	r1, r5
 800719e:	eb63 0301 	sbc.w	r3, r3, r1
 80071a2:	617b      	str	r3, [r7, #20]
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	f04f 0300 	mov.w	r3, #0
 80071ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071b0:	4659      	mov	r1, fp
 80071b2:	018b      	lsls	r3, r1, #6
 80071b4:	4651      	mov	r1, sl
 80071b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071ba:	4651      	mov	r1, sl
 80071bc:	018a      	lsls	r2, r1, #6
 80071be:	4651      	mov	r1, sl
 80071c0:	ebb2 0801 	subs.w	r8, r2, r1
 80071c4:	4659      	mov	r1, fp
 80071c6:	eb63 0901 	sbc.w	r9, r3, r1
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	f04f 0300 	mov.w	r3, #0
 80071d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071de:	4690      	mov	r8, r2
 80071e0:	4699      	mov	r9, r3
 80071e2:	4623      	mov	r3, r4
 80071e4:	eb18 0303 	adds.w	r3, r8, r3
 80071e8:	60bb      	str	r3, [r7, #8]
 80071ea:	462b      	mov	r3, r5
 80071ec:	eb49 0303 	adc.w	r3, r9, r3
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80071fe:	4629      	mov	r1, r5
 8007200:	024b      	lsls	r3, r1, #9
 8007202:	4621      	mov	r1, r4
 8007204:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007208:	4621      	mov	r1, r4
 800720a:	024a      	lsls	r2, r1, #9
 800720c:	4610      	mov	r0, r2
 800720e:	4619      	mov	r1, r3
 8007210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007212:	2200      	movs	r2, #0
 8007214:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007216:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800721c:	f7f9 f868 	bl	80002f0 <__aeabi_uldivmod>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4613      	mov	r3, r2
 8007226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007228:	e058      	b.n	80072dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800722a:	4b38      	ldr	r3, [pc, #224]	@ (800730c <HAL_RCC_GetSysClockFreq+0x200>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	099b      	lsrs	r3, r3, #6
 8007230:	2200      	movs	r2, #0
 8007232:	4618      	mov	r0, r3
 8007234:	4611      	mov	r1, r2
 8007236:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800723a:	623b      	str	r3, [r7, #32]
 800723c:	2300      	movs	r3, #0
 800723e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007240:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	f04f 0000 	mov.w	r0, #0
 800724c:	f04f 0100 	mov.w	r1, #0
 8007250:	0159      	lsls	r1, r3, #5
 8007252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007256:	0150      	lsls	r0, r2, #5
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4641      	mov	r1, r8
 800725e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007262:	4649      	mov	r1, r9
 8007264:	eb63 0b01 	sbc.w	fp, r3, r1
 8007268:	f04f 0200 	mov.w	r2, #0
 800726c:	f04f 0300 	mov.w	r3, #0
 8007270:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007274:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007278:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800727c:	ebb2 040a 	subs.w	r4, r2, sl
 8007280:	eb63 050b 	sbc.w	r5, r3, fp
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	00eb      	lsls	r3, r5, #3
 800728e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007292:	00e2      	lsls	r2, r4, #3
 8007294:	4614      	mov	r4, r2
 8007296:	461d      	mov	r5, r3
 8007298:	4643      	mov	r3, r8
 800729a:	18e3      	adds	r3, r4, r3
 800729c:	603b      	str	r3, [r7, #0]
 800729e:	464b      	mov	r3, r9
 80072a0:	eb45 0303 	adc.w	r3, r5, r3
 80072a4:	607b      	str	r3, [r7, #4]
 80072a6:	f04f 0200 	mov.w	r2, #0
 80072aa:	f04f 0300 	mov.w	r3, #0
 80072ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072b2:	4629      	mov	r1, r5
 80072b4:	028b      	lsls	r3, r1, #10
 80072b6:	4621      	mov	r1, r4
 80072b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072bc:	4621      	mov	r1, r4
 80072be:	028a      	lsls	r2, r1, #10
 80072c0:	4610      	mov	r0, r2
 80072c2:	4619      	mov	r1, r3
 80072c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072c6:	2200      	movs	r2, #0
 80072c8:	61bb      	str	r3, [r7, #24]
 80072ca:	61fa      	str	r2, [r7, #28]
 80072cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072d0:	f7f9 f80e 	bl	80002f0 <__aeabi_uldivmod>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4613      	mov	r3, r2
 80072da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80072dc:	4b0b      	ldr	r3, [pc, #44]	@ (800730c <HAL_RCC_GetSysClockFreq+0x200>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	3301      	adds	r3, #1
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80072ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072f6:	e002      	b.n	80072fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072f8:	4b05      	ldr	r3, [pc, #20]	@ (8007310 <HAL_RCC_GetSysClockFreq+0x204>)
 80072fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80072fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007300:	4618      	mov	r0, r3
 8007302:	3750      	adds	r7, #80	@ 0x50
 8007304:	46bd      	mov	sp, r7
 8007306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800730a:	bf00      	nop
 800730c:	40023800 	.word	0x40023800
 8007310:	00f42400 	.word	0x00f42400
 8007314:	007a1200 	.word	0x007a1200

08007318 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800731c:	4b03      	ldr	r3, [pc, #12]	@ (800732c <HAL_RCC_GetHCLKFreq+0x14>)
 800731e:	681b      	ldr	r3, [r3, #0]
}
 8007320:	4618      	mov	r0, r3
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	20000004 	.word	0x20000004

08007330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007334:	f7ff fff0 	bl	8007318 <HAL_RCC_GetHCLKFreq>
 8007338:	4602      	mov	r2, r0
 800733a:	4b05      	ldr	r3, [pc, #20]	@ (8007350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	0a9b      	lsrs	r3, r3, #10
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	4903      	ldr	r1, [pc, #12]	@ (8007354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007346:	5ccb      	ldrb	r3, [r1, r3]
 8007348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800734c:	4618      	mov	r0, r3
 800734e:	bd80      	pop	{r7, pc}
 8007350:	40023800 	.word	0x40023800
 8007354:	0800cff8 	.word	0x0800cff8

08007358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800735c:	f7ff ffdc 	bl	8007318 <HAL_RCC_GetHCLKFreq>
 8007360:	4602      	mov	r2, r0
 8007362:	4b05      	ldr	r3, [pc, #20]	@ (8007378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	0b5b      	lsrs	r3, r3, #13
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	4903      	ldr	r1, [pc, #12]	@ (800737c <HAL_RCC_GetPCLK2Freq+0x24>)
 800736e:	5ccb      	ldrb	r3, [r1, r3]
 8007370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007374:	4618      	mov	r0, r3
 8007376:	bd80      	pop	{r7, pc}
 8007378:	40023800 	.word	0x40023800
 800737c:	0800cff8 	.word	0x0800cff8

08007380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b088      	sub	sp, #32
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d012      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073a8:	4b69      	ldr	r3, [pc, #420]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	4a68      	ldr	r2, [pc, #416]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80073b2:	6093      	str	r3, [r2, #8]
 80073b4:	4b66      	ldr	r3, [pc, #408]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073bc:	4964      	ldr	r1, [pc, #400]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80073ca:	2301      	movs	r3, #1
 80073cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d017      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073da:	4b5d      	ldr	r3, [pc, #372]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e8:	4959      	ldr	r1, [pc, #356]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073f8:	d101      	bne.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80073fa:	2301      	movs	r3, #1
 80073fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007406:	2301      	movs	r3, #1
 8007408:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d017      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007416:	4b4e      	ldr	r3, [pc, #312]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800741c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007424:	494a      	ldr	r1, [pc, #296]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007426:	4313      	orrs	r3, r2
 8007428:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007430:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007434:	d101      	bne.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007436:	2301      	movs	r3, #1
 8007438:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007442:	2301      	movs	r3, #1
 8007444:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007452:	2301      	movs	r3, #1
 8007454:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 808b 	beq.w	800757a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007464:	4b3a      	ldr	r3, [pc, #232]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007468:	4a39      	ldr	r2, [pc, #228]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800746a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800746e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007470:	4b37      	ldr	r3, [pc, #220]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007478:	60bb      	str	r3, [r7, #8]
 800747a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800747c:	4b35      	ldr	r3, [pc, #212]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a34      	ldr	r2, [pc, #208]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007486:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007488:	f7fd f8a6 	bl	80045d8 <HAL_GetTick>
 800748c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800748e:	e008      	b.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007490:	f7fd f8a2 	bl	80045d8 <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	2b64      	cmp	r3, #100	@ 0x64
 800749c:	d901      	bls.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e38f      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80074a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d0f0      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074ae:	4b28      	ldr	r3, [pc, #160]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d035      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d02e      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074cc:	4b20      	ldr	r3, [pc, #128]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074da:	4a1d      	ldr	r2, [pc, #116]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074e0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80074ee:	4a18      	ldr	r2, [pc, #96]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074f4:	4b16      	ldr	r3, [pc, #88]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d114      	bne.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007500:	f7fd f86a 	bl	80045d8 <HAL_GetTick>
 8007504:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007506:	e00a      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007508:	f7fd f866 	bl	80045d8 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007516:	4293      	cmp	r3, r2
 8007518:	d901      	bls.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e351      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800751e:	4b0c      	ldr	r3, [pc, #48]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007522:	f003 0302 	and.w	r3, r3, #2
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0ee      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007536:	d111      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007538:	4b05      	ldr	r3, [pc, #20]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007544:	4b04      	ldr	r3, [pc, #16]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007546:	400b      	ands	r3, r1
 8007548:	4901      	ldr	r1, [pc, #4]	@ (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800754a:	4313      	orrs	r3, r2
 800754c:	608b      	str	r3, [r1, #8]
 800754e:	e00b      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007550:	40023800 	.word	0x40023800
 8007554:	40007000 	.word	0x40007000
 8007558:	0ffffcff 	.word	0x0ffffcff
 800755c:	4bac      	ldr	r3, [pc, #688]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	4aab      	ldr	r2, [pc, #684]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007562:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007566:	6093      	str	r3, [r2, #8]
 8007568:	4ba9      	ldr	r3, [pc, #676]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800756a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007574:	49a6      	ldr	r1, [pc, #664]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007576:	4313      	orrs	r3, r2
 8007578:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0310 	and.w	r3, r3, #16
 8007582:	2b00      	cmp	r3, #0
 8007584:	d010      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007586:	4ba2      	ldr	r3, [pc, #648]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007588:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800758c:	4aa0      	ldr	r2, [pc, #640]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800758e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007592:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007596:	4b9e      	ldr	r3, [pc, #632]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007598:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a0:	499b      	ldr	r1, [pc, #620]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00a      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075b4:	4b96      	ldr	r3, [pc, #600]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075c2:	4993      	ldr	r1, [pc, #588]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075d6:	4b8e      	ldr	r3, [pc, #568]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075e4:	498a      	ldr	r1, [pc, #552]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075f8:	4b85      	ldr	r3, [pc, #532]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007606:	4982      	ldr	r1, [pc, #520]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007608:	4313      	orrs	r3, r2
 800760a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800761a:	4b7d      	ldr	r3, [pc, #500]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800761c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007620:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007628:	4979      	ldr	r1, [pc, #484]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800762a:	4313      	orrs	r3, r2
 800762c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800763c:	4b74      	ldr	r3, [pc, #464]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800763e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007642:	f023 0203 	bic.w	r2, r3, #3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800764a:	4971      	ldr	r1, [pc, #452]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800764c:	4313      	orrs	r3, r2
 800764e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800765e:	4b6c      	ldr	r3, [pc, #432]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007664:	f023 020c 	bic.w	r2, r3, #12
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800766c:	4968      	ldr	r1, [pc, #416]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800766e:	4313      	orrs	r3, r2
 8007670:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007680:	4b63      	ldr	r3, [pc, #396]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007686:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800768e:	4960      	ldr	r1, [pc, #384]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007690:	4313      	orrs	r3, r2
 8007692:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076a2:	4b5b      	ldr	r3, [pc, #364]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076a8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b0:	4957      	ldr	r1, [pc, #348]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076c4:	4b52      	ldr	r3, [pc, #328]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d2:	494f      	ldr	r1, [pc, #316]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80076e6:	4b4a      	ldr	r3, [pc, #296]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076f4:	4946      	ldr	r1, [pc, #280]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00a      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007708:	4b41      	ldr	r3, [pc, #260]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800770a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800770e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007716:	493e      	ldr	r1, [pc, #248]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007718:	4313      	orrs	r3, r2
 800771a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800772a:	4b39      	ldr	r3, [pc, #228]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800772c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007730:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007738:	4935      	ldr	r1, [pc, #212]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800773a:	4313      	orrs	r3, r2
 800773c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00a      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800774c:	4b30      	ldr	r3, [pc, #192]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800774e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007752:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800775a:	492d      	ldr	r1, [pc, #180]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800775c:	4313      	orrs	r3, r2
 800775e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d011      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800776e:	4b28      	ldr	r3, [pc, #160]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007774:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800777c:	4924      	ldr	r1, [pc, #144]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800777e:	4313      	orrs	r3, r2
 8007780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007788:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800778c:	d101      	bne.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800778e:	2301      	movs	r3, #1
 8007790:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 0308 	and.w	r3, r3, #8
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800779e:	2301      	movs	r3, #1
 80077a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077ae:	4b18      	ldr	r3, [pc, #96]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077b4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077bc:	4914      	ldr	r1, [pc, #80]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80077d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077d6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077e0:	490b      	ldr	r1, [pc, #44]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00f      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80077f4:	4b06      	ldr	r3, [pc, #24]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077fa:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007804:	4902      	ldr	r1, [pc, #8]	@ (8007810 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007806:	4313      	orrs	r3, r2
 8007808:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800780c:	e002      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800780e:	bf00      	nop
 8007810:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00b      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007820:	4b8a      	ldr	r3, [pc, #552]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007822:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007826:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007830:	4986      	ldr	r1, [pc, #536]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007832:	4313      	orrs	r3, r2
 8007834:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007844:	4b81      	ldr	r3, [pc, #516]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007846:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800784a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007854:	497d      	ldr	r1, [pc, #500]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007856:	4313      	orrs	r3, r2
 8007858:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d006      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 80d6 	beq.w	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007870:	4b76      	ldr	r3, [pc, #472]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a75      	ldr	r2, [pc, #468]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007876:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800787a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800787c:	f7fc feac 	bl	80045d8 <HAL_GetTick>
 8007880:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007882:	e008      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007884:	f7fc fea8 	bl	80045d8 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b64      	cmp	r3, #100	@ 0x64
 8007890:	d901      	bls.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e195      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007896:	4b6d      	ldr	r3, [pc, #436]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1f0      	bne.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d021      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d11d      	bne.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80078b6:	4b65      	ldr	r3, [pc, #404]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078bc:	0c1b      	lsrs	r3, r3, #16
 80078be:	f003 0303 	and.w	r3, r3, #3
 80078c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80078c4:	4b61      	ldr	r3, [pc, #388]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078ca:	0e1b      	lsrs	r3, r3, #24
 80078cc:	f003 030f 	and.w	r3, r3, #15
 80078d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	019a      	lsls	r2, r3, #6
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	041b      	lsls	r3, r3, #16
 80078dc:	431a      	orrs	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	061b      	lsls	r3, r3, #24
 80078e2:	431a      	orrs	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	071b      	lsls	r3, r3, #28
 80078ea:	4958      	ldr	r1, [pc, #352]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007906:	d00a      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007910:	2b00      	cmp	r3, #0
 8007912:	d02e      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007918:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800791c:	d129      	bne.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800791e:	4b4b      	ldr	r3, [pc, #300]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007924:	0c1b      	lsrs	r3, r3, #16
 8007926:	f003 0303 	and.w	r3, r3, #3
 800792a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800792c:	4b47      	ldr	r3, [pc, #284]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800792e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007932:	0f1b      	lsrs	r3, r3, #28
 8007934:	f003 0307 	and.w	r3, r3, #7
 8007938:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	019a      	lsls	r2, r3, #6
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	041b      	lsls	r3, r3, #16
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	061b      	lsls	r3, r3, #24
 800794c:	431a      	orrs	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	071b      	lsls	r3, r3, #28
 8007952:	493e      	ldr	r1, [pc, #248]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007954:	4313      	orrs	r3, r2
 8007956:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800795a:	4b3c      	ldr	r3, [pc, #240]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800795c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007960:	f023 021f 	bic.w	r2, r3, #31
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007968:	3b01      	subs	r3, #1
 800796a:	4938      	ldr	r1, [pc, #224]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800796c:	4313      	orrs	r3, r2
 800796e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d01d      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800797e:	4b33      	ldr	r3, [pc, #204]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007980:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007984:	0e1b      	lsrs	r3, r3, #24
 8007986:	f003 030f 	and.w	r3, r3, #15
 800798a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800798c:	4b2f      	ldr	r3, [pc, #188]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800798e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007992:	0f1b      	lsrs	r3, r3, #28
 8007994:	f003 0307 	and.w	r3, r3, #7
 8007998:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	019a      	lsls	r2, r3, #6
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	041b      	lsls	r3, r3, #16
 80079a6:	431a      	orrs	r2, r3
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	061b      	lsls	r3, r3, #24
 80079ac:	431a      	orrs	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	071b      	lsls	r3, r3, #28
 80079b2:	4926      	ldr	r1, [pc, #152]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d011      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	019a      	lsls	r2, r3, #6
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	041b      	lsls	r3, r3, #16
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	061b      	lsls	r3, r3, #24
 80079da:	431a      	orrs	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	071b      	lsls	r3, r3, #28
 80079e2:	491a      	ldr	r1, [pc, #104]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80079ea:	4b18      	ldr	r3, [pc, #96]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a17      	ldr	r2, [pc, #92]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80079f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f6:	f7fc fdef 	bl	80045d8 <HAL_GetTick>
 80079fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079fc:	e008      	b.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80079fe:	f7fc fdeb 	bl	80045d8 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b64      	cmp	r3, #100	@ 0x64
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e0d8      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a10:	4b0e      	ldr	r3, [pc, #56]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0f0      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	f040 80ce 	bne.w	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007a24:	4b09      	ldr	r3, [pc, #36]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a08      	ldr	r2, [pc, #32]	@ (8007a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a30:	f7fc fdd2 	bl	80045d8 <HAL_GetTick>
 8007a34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a36:	e00b      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a38:	f7fc fdce 	bl	80045d8 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b64      	cmp	r3, #100	@ 0x64
 8007a44:	d904      	bls.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e0bb      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007a4a:	bf00      	nop
 8007a4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a50:	4b5e      	ldr	r3, [pc, #376]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a5c:	d0ec      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d003      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d009      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d02e      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d12a      	bne.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a86:	4b51      	ldr	r3, [pc, #324]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a8c:	0c1b      	lsrs	r3, r3, #16
 8007a8e:	f003 0303 	and.w	r3, r3, #3
 8007a92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a94:	4b4d      	ldr	r3, [pc, #308]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a9a:	0f1b      	lsrs	r3, r3, #28
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	019a      	lsls	r2, r3, #6
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	041b      	lsls	r3, r3, #16
 8007aac:	431a      	orrs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	061b      	lsls	r3, r3, #24
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	071b      	lsls	r3, r3, #28
 8007aba:	4944      	ldr	r1, [pc, #272]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007ac2:	4b42      	ldr	r3, [pc, #264]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ac8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	021b      	lsls	r3, r3, #8
 8007ad4:	493d      	ldr	r1, [pc, #244]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d022      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007aec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007af0:	d11d      	bne.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007af2:	4b36      	ldr	r3, [pc, #216]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af8:	0e1b      	lsrs	r3, r3, #24
 8007afa:	f003 030f 	and.w	r3, r3, #15
 8007afe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007b00:	4b32      	ldr	r3, [pc, #200]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b06:	0f1b      	lsrs	r3, r3, #28
 8007b08:	f003 0307 	and.w	r3, r3, #7
 8007b0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	019a      	lsls	r2, r3, #6
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a1b      	ldr	r3, [r3, #32]
 8007b18:	041b      	lsls	r3, r3, #16
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	061b      	lsls	r3, r3, #24
 8007b20:	431a      	orrs	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	071b      	lsls	r3, r3, #28
 8007b26:	4929      	ldr	r1, [pc, #164]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f003 0308 	and.w	r3, r3, #8
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d028      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b3a:	4b24      	ldr	r3, [pc, #144]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b40:	0e1b      	lsrs	r3, r3, #24
 8007b42:	f003 030f 	and.w	r3, r3, #15
 8007b46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007b48:	4b20      	ldr	r3, [pc, #128]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b4e:	0c1b      	lsrs	r3, r3, #16
 8007b50:	f003 0303 	and.w	r3, r3, #3
 8007b54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	019a      	lsls	r2, r3, #6
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	041b      	lsls	r3, r3, #16
 8007b60:	431a      	orrs	r2, r3
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	061b      	lsls	r3, r3, #24
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	69db      	ldr	r3, [r3, #28]
 8007b6c:	071b      	lsls	r3, r3, #28
 8007b6e:	4917      	ldr	r1, [pc, #92]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007b76:	4b15      	ldr	r3, [pc, #84]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b84:	4911      	ldr	r1, [pc, #68]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a0e      	ldr	r2, [pc, #56]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b98:	f7fc fd1e 	bl	80045d8 <HAL_GetTick>
 8007b9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b9e:	e008      	b.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ba0:	f7fc fd1a 	bl	80045d8 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b64      	cmp	r3, #100	@ 0x64
 8007bac:	d901      	bls.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e007      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007bb2:	4b06      	ldr	r3, [pc, #24]	@ (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bbe:	d1ef      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3720      	adds	r7, #32
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	40023800 	.word	0x40023800

08007bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e049      	b.n	8007c76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d106      	bne.n	8007bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7f9 fc0c 	bl	8001414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4610      	mov	r0, r2
 8007c10:	f000 f970 	bl	8007ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d001      	beq.n	8007c98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e04c      	b.n	8007d32 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a26      	ldr	r2, [pc, #152]	@ (8007d40 <HAL_TIM_Base_Start+0xc0>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d022      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x70>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb2:	d01d      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x70>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a22      	ldr	r2, [pc, #136]	@ (8007d44 <HAL_TIM_Base_Start+0xc4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d018      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x70>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a21      	ldr	r2, [pc, #132]	@ (8007d48 <HAL_TIM_Base_Start+0xc8>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d013      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x70>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a1f      	ldr	r2, [pc, #124]	@ (8007d4c <HAL_TIM_Base_Start+0xcc>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d00e      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x70>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8007d50 <HAL_TIM_Base_Start+0xd0>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d009      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x70>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8007d54 <HAL_TIM_Base_Start+0xd4>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d004      	beq.n	8007cf0 <HAL_TIM_Base_Start+0x70>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a1b      	ldr	r2, [pc, #108]	@ (8007d58 <HAL_TIM_Base_Start+0xd8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d115      	bne.n	8007d1c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	4b19      	ldr	r3, [pc, #100]	@ (8007d5c <HAL_TIM_Base_Start+0xdc>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2b06      	cmp	r3, #6
 8007d00:	d015      	beq.n	8007d2e <HAL_TIM_Base_Start+0xae>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d08:	d011      	beq.n	8007d2e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f042 0201 	orr.w	r2, r2, #1
 8007d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d1a:	e008      	b.n	8007d2e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	e000      	b.n	8007d30 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	40010000 	.word	0x40010000
 8007d44:	40000400 	.word	0x40000400
 8007d48:	40000800 	.word	0x40000800
 8007d4c:	40000c00 	.word	0x40000c00
 8007d50:	40010400 	.word	0x40010400
 8007d54:	40014000 	.word	0x40014000
 8007d58:	40001800 	.word	0x40001800
 8007d5c:	00010007 	.word	0x00010007

08007d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b084      	sub	sp, #16
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d101      	bne.n	8007d7c <HAL_TIM_ConfigClockSource+0x1c>
 8007d78:	2302      	movs	r3, #2
 8007d7a:	e0b4      	b.n	8007ee6 <HAL_TIM_ConfigClockSource+0x186>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	4b56      	ldr	r3, [pc, #344]	@ (8007ef0 <HAL_TIM_ConfigClockSource+0x190>)
 8007d98:	4013      	ands	r3, r2
 8007d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007db4:	d03e      	beq.n	8007e34 <HAL_TIM_ConfigClockSource+0xd4>
 8007db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dba:	f200 8087 	bhi.w	8007ecc <HAL_TIM_ConfigClockSource+0x16c>
 8007dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dc2:	f000 8086 	beq.w	8007ed2 <HAL_TIM_ConfigClockSource+0x172>
 8007dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dca:	d87f      	bhi.n	8007ecc <HAL_TIM_ConfigClockSource+0x16c>
 8007dcc:	2b70      	cmp	r3, #112	@ 0x70
 8007dce:	d01a      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0xa6>
 8007dd0:	2b70      	cmp	r3, #112	@ 0x70
 8007dd2:	d87b      	bhi.n	8007ecc <HAL_TIM_ConfigClockSource+0x16c>
 8007dd4:	2b60      	cmp	r3, #96	@ 0x60
 8007dd6:	d050      	beq.n	8007e7a <HAL_TIM_ConfigClockSource+0x11a>
 8007dd8:	2b60      	cmp	r3, #96	@ 0x60
 8007dda:	d877      	bhi.n	8007ecc <HAL_TIM_ConfigClockSource+0x16c>
 8007ddc:	2b50      	cmp	r3, #80	@ 0x50
 8007dde:	d03c      	beq.n	8007e5a <HAL_TIM_ConfigClockSource+0xfa>
 8007de0:	2b50      	cmp	r3, #80	@ 0x50
 8007de2:	d873      	bhi.n	8007ecc <HAL_TIM_ConfigClockSource+0x16c>
 8007de4:	2b40      	cmp	r3, #64	@ 0x40
 8007de6:	d058      	beq.n	8007e9a <HAL_TIM_ConfigClockSource+0x13a>
 8007de8:	2b40      	cmp	r3, #64	@ 0x40
 8007dea:	d86f      	bhi.n	8007ecc <HAL_TIM_ConfigClockSource+0x16c>
 8007dec:	2b30      	cmp	r3, #48	@ 0x30
 8007dee:	d064      	beq.n	8007eba <HAL_TIM_ConfigClockSource+0x15a>
 8007df0:	2b30      	cmp	r3, #48	@ 0x30
 8007df2:	d86b      	bhi.n	8007ecc <HAL_TIM_ConfigClockSource+0x16c>
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	d060      	beq.n	8007eba <HAL_TIM_ConfigClockSource+0x15a>
 8007df8:	2b20      	cmp	r3, #32
 8007dfa:	d867      	bhi.n	8007ecc <HAL_TIM_ConfigClockSource+0x16c>
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d05c      	beq.n	8007eba <HAL_TIM_ConfigClockSource+0x15a>
 8007e00:	2b10      	cmp	r3, #16
 8007e02:	d05a      	beq.n	8007eba <HAL_TIM_ConfigClockSource+0x15a>
 8007e04:	e062      	b.n	8007ecc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e16:	f000 f98d 	bl	8008134 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	609a      	str	r2, [r3, #8]
      break;
 8007e32:	e04f      	b.n	8007ed4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e44:	f000 f976 	bl	8008134 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689a      	ldr	r2, [r3, #8]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e56:	609a      	str	r2, [r3, #8]
      break;
 8007e58:	e03c      	b.n	8007ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e66:	461a      	mov	r2, r3
 8007e68:	f000 f8ea 	bl	8008040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2150      	movs	r1, #80	@ 0x50
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f943 	bl	80080fe <TIM_ITRx_SetConfig>
      break;
 8007e78:	e02c      	b.n	8007ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e86:	461a      	mov	r2, r3
 8007e88:	f000 f909 	bl	800809e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2160      	movs	r1, #96	@ 0x60
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f933 	bl	80080fe <TIM_ITRx_SetConfig>
      break;
 8007e98:	e01c      	b.n	8007ed4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f000 f8ca 	bl	8008040 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2140      	movs	r1, #64	@ 0x40
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f923 	bl	80080fe <TIM_ITRx_SetConfig>
      break;
 8007eb8:	e00c      	b.n	8007ed4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	f000 f91a 	bl	80080fe <TIM_ITRx_SetConfig>
      break;
 8007eca:	e003      	b.n	8007ed4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed0:	e000      	b.n	8007ed4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	fffeff88 	.word	0xfffeff88

08007ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a43      	ldr	r2, [pc, #268]	@ (8008014 <TIM_Base_SetConfig+0x120>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d013      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f12:	d00f      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a40      	ldr	r2, [pc, #256]	@ (8008018 <TIM_Base_SetConfig+0x124>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d00b      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a3f      	ldr	r2, [pc, #252]	@ (800801c <TIM_Base_SetConfig+0x128>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d007      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a3e      	ldr	r2, [pc, #248]	@ (8008020 <TIM_Base_SetConfig+0x12c>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d003      	beq.n	8007f34 <TIM_Base_SetConfig+0x40>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a3d      	ldr	r2, [pc, #244]	@ (8008024 <TIM_Base_SetConfig+0x130>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d108      	bne.n	8007f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a32      	ldr	r2, [pc, #200]	@ (8008014 <TIM_Base_SetConfig+0x120>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d02b      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f54:	d027      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a2f      	ldr	r2, [pc, #188]	@ (8008018 <TIM_Base_SetConfig+0x124>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d023      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a2e      	ldr	r2, [pc, #184]	@ (800801c <TIM_Base_SetConfig+0x128>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d01f      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2d      	ldr	r2, [pc, #180]	@ (8008020 <TIM_Base_SetConfig+0x12c>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d01b      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a2c      	ldr	r2, [pc, #176]	@ (8008024 <TIM_Base_SetConfig+0x130>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d017      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a2b      	ldr	r2, [pc, #172]	@ (8008028 <TIM_Base_SetConfig+0x134>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d013      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a2a      	ldr	r2, [pc, #168]	@ (800802c <TIM_Base_SetConfig+0x138>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d00f      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a29      	ldr	r2, [pc, #164]	@ (8008030 <TIM_Base_SetConfig+0x13c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d00b      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a28      	ldr	r2, [pc, #160]	@ (8008034 <TIM_Base_SetConfig+0x140>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d007      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a27      	ldr	r2, [pc, #156]	@ (8008038 <TIM_Base_SetConfig+0x144>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d003      	beq.n	8007fa6 <TIM_Base_SetConfig+0xb2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a26      	ldr	r2, [pc, #152]	@ (800803c <TIM_Base_SetConfig+0x148>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d108      	bne.n	8007fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	689a      	ldr	r2, [r3, #8]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8008014 <TIM_Base_SetConfig+0x120>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d003      	beq.n	8007fe6 <TIM_Base_SetConfig+0xf2>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a10      	ldr	r2, [pc, #64]	@ (8008024 <TIM_Base_SetConfig+0x130>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d103      	bne.n	8007fee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	691a      	ldr	r2, [r3, #16]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f043 0204 	orr.w	r2, r3, #4
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	601a      	str	r2, [r3, #0]
}
 8008006:	bf00      	nop
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	40010000 	.word	0x40010000
 8008018:	40000400 	.word	0x40000400
 800801c:	40000800 	.word	0x40000800
 8008020:	40000c00 	.word	0x40000c00
 8008024:	40010400 	.word	0x40010400
 8008028:	40014000 	.word	0x40014000
 800802c:	40014400 	.word	0x40014400
 8008030:	40014800 	.word	0x40014800
 8008034:	40001800 	.word	0x40001800
 8008038:	40001c00 	.word	0x40001c00
 800803c:	40002000 	.word	0x40002000

08008040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008040:	b480      	push	{r7}
 8008042:	b087      	sub	sp, #28
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	f023 0201 	bic.w	r2, r3, #1
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800806a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	011b      	lsls	r3, r3, #4
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	4313      	orrs	r3, r2
 8008074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f023 030a 	bic.w	r3, r3, #10
 800807c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	4313      	orrs	r3, r2
 8008084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	621a      	str	r2, [r3, #32]
}
 8008092:	bf00      	nop
 8008094:	371c      	adds	r7, #28
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800809e:	b480      	push	{r7}
 80080a0:	b087      	sub	sp, #28
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	60f8      	str	r0, [r7, #12]
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	f023 0210 	bic.w	r2, r3, #16
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80080c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	031b      	lsls	r3, r3, #12
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80080da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	011b      	lsls	r3, r3, #4
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	621a      	str	r2, [r3, #32]
}
 80080f2:	bf00      	nop
 80080f4:	371c      	adds	r7, #28
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080fe:	b480      	push	{r7}
 8008100:	b085      	sub	sp, #20
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4313      	orrs	r3, r2
 800811c:	f043 0307 	orr.w	r3, r3, #7
 8008120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	609a      	str	r2, [r3, #8]
}
 8008128:	bf00      	nop
 800812a:	3714      	adds	r7, #20
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008134:	b480      	push	{r7}
 8008136:	b087      	sub	sp, #28
 8008138:	af00      	add	r7, sp, #0
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	607a      	str	r2, [r7, #4]
 8008140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800814e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	021a      	lsls	r2, r3, #8
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	431a      	orrs	r2, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4313      	orrs	r3, r2
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	4313      	orrs	r3, r2
 8008160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	609a      	str	r2, [r3, #8]
}
 8008168:	bf00      	nop
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008184:	2b01      	cmp	r3, #1
 8008186:	d101      	bne.n	800818c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008188:	2302      	movs	r3, #2
 800818a:	e06d      	b.n	8008268 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2202      	movs	r2, #2
 8008198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a30      	ldr	r2, [pc, #192]	@ (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d004      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a2f      	ldr	r2, [pc, #188]	@ (8008278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d108      	bne.n	80081d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80081c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a20      	ldr	r2, [pc, #128]	@ (8008274 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d022      	beq.n	800823c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081fe:	d01d      	beq.n	800823c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1d      	ldr	r2, [pc, #116]	@ (800827c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d018      	beq.n	800823c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a1c      	ldr	r2, [pc, #112]	@ (8008280 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d013      	beq.n	800823c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a1a      	ldr	r2, [pc, #104]	@ (8008284 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d00e      	beq.n	800823c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a15      	ldr	r2, [pc, #84]	@ (8008278 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d009      	beq.n	800823c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a16      	ldr	r2, [pc, #88]	@ (8008288 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d004      	beq.n	800823c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a15      	ldr	r2, [pc, #84]	@ (800828c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d10c      	bne.n	8008256 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008242:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	4313      	orrs	r3, r2
 800824c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	40010000 	.word	0x40010000
 8008278:	40010400 	.word	0x40010400
 800827c:	40000400 	.word	0x40000400
 8008280:	40000800 	.word	0x40000800
 8008284:	40000c00 	.word	0x40000c00
 8008288:	40014000 	.word	0x40014000
 800828c:	40001800 	.word	0x40001800

08008290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e040      	b.n	8008324 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d106      	bne.n	80082b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7f9 f8cc 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2224      	movs	r2, #36	@ 0x24
 80082bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f022 0201 	bic.w	r2, r2, #1
 80082cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 febe 	bl	8009058 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fc57 	bl	8008b90 <UART_SetConfig>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d101      	bne.n	80082ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e01b      	b.n	8008324 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	685a      	ldr	r2, [r3, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80082fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689a      	ldr	r2, [r3, #8]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800830a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0201 	orr.w	r2, r2, #1
 800831a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 ff3d 	bl	800919c <UART_CheckIdleState>
 8008322:	4603      	mov	r3, r0
}
 8008324:	4618      	mov	r0, r3
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b08a      	sub	sp, #40	@ 0x28
 8008330:	af02      	add	r7, sp, #8
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	603b      	str	r3, [r7, #0]
 8008338:	4613      	mov	r3, r2
 800833a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008340:	2b20      	cmp	r3, #32
 8008342:	d177      	bne.n	8008434 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <HAL_UART_Transmit+0x24>
 800834a:	88fb      	ldrh	r3, [r7, #6]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e070      	b.n	8008436 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2221      	movs	r2, #33	@ 0x21
 8008360:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008362:	f7fc f939 	bl	80045d8 <HAL_GetTick>
 8008366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	88fa      	ldrh	r2, [r7, #6]
 800836c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	88fa      	ldrh	r2, [r7, #6]
 8008374:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008380:	d108      	bne.n	8008394 <HAL_UART_Transmit+0x68>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d104      	bne.n	8008394 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	61bb      	str	r3, [r7, #24]
 8008392:	e003      	b.n	800839c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008398:	2300      	movs	r3, #0
 800839a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800839c:	e02f      	b.n	80083fe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2200      	movs	r2, #0
 80083a6:	2180      	movs	r1, #128	@ 0x80
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 ff9f 	bl	80092ec <UART_WaitOnFlagUntilTimeout>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d004      	beq.n	80083be <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2220      	movs	r2, #32
 80083b8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e03b      	b.n	8008436 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10b      	bne.n	80083dc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	3302      	adds	r3, #2
 80083d8:	61bb      	str	r3, [r7, #24]
 80083da:	e007      	b.n	80083ec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	781a      	ldrb	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	3301      	adds	r3, #1
 80083ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	3b01      	subs	r3, #1
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008404:	b29b      	uxth	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1c9      	bne.n	800839e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2200      	movs	r2, #0
 8008412:	2140      	movs	r1, #64	@ 0x40
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 ff69 	bl	80092ec <UART_WaitOnFlagUntilTimeout>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2220      	movs	r2, #32
 8008424:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e005      	b.n	8008436 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2220      	movs	r2, #32
 800842e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	e000      	b.n	8008436 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008434:	2302      	movs	r3, #2
  }
}
 8008436:	4618      	mov	r0, r3
 8008438:	3720      	adds	r7, #32
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b08a      	sub	sp, #40	@ 0x28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	4613      	mov	r3, r2
 800844c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008452:	2b20      	cmp	r3, #32
 8008454:	d165      	bne.n	8008522 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <HAL_UART_Transmit_DMA+0x22>
 800845c:	88fb      	ldrh	r3, [r7, #6]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e05e      	b.n	8008524 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	88fa      	ldrh	r2, [r7, #6]
 8008470:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	88fa      	ldrh	r2, [r7, #6]
 8008478:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2221      	movs	r2, #33	@ 0x21
 8008488:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800848e:	2b00      	cmp	r3, #0
 8008490:	d027      	beq.n	80084e2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008496:	4a25      	ldr	r2, [pc, #148]	@ (800852c <HAL_UART_Transmit_DMA+0xec>)
 8008498:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800849e:	4a24      	ldr	r2, [pc, #144]	@ (8008530 <HAL_UART_Transmit_DMA+0xf0>)
 80084a0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084a6:	4a23      	ldr	r2, [pc, #140]	@ (8008534 <HAL_UART_Transmit_DMA+0xf4>)
 80084a8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ae:	2200      	movs	r2, #0
 80084b0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084ba:	4619      	mov	r1, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3328      	adds	r3, #40	@ 0x28
 80084c2:	461a      	mov	r2, r3
 80084c4:	88fb      	ldrh	r3, [r7, #6]
 80084c6:	f7fd f87d 	bl	80055c4 <HAL_DMA_Start_IT>
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d008      	beq.n	80084e2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2210      	movs	r2, #16
 80084d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2220      	movs	r2, #32
 80084dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e020      	b.n	8008524 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2240      	movs	r2, #64	@ 0x40
 80084e8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3308      	adds	r3, #8
 80084f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	613b      	str	r3, [r7, #16]
   return(result);
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008500:	627b      	str	r3, [r7, #36]	@ 0x24
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3308      	adds	r3, #8
 8008508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800850a:	623a      	str	r2, [r7, #32]
 800850c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850e:	69f9      	ldr	r1, [r7, #28]
 8008510:	6a3a      	ldr	r2, [r7, #32]
 8008512:	e841 2300 	strex	r3, r2, [r1]
 8008516:	61bb      	str	r3, [r7, #24]
   return(result);
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d1e5      	bne.n	80084ea <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	e000      	b.n	8008524 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8008522:	2302      	movs	r3, #2
  }
}
 8008524:	4618      	mov	r0, r3
 8008526:	3728      	adds	r7, #40	@ 0x28
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	080094db 	.word	0x080094db
 8008530:	08009571 	.word	0x08009571
 8008534:	0800958d 	.word	0x0800958d

08008538 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b0ba      	sub	sp, #232	@ 0xe8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800855e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008562:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008566:	4013      	ands	r3, r2
 8008568:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800856c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008570:	2b00      	cmp	r3, #0
 8008572:	d115      	bne.n	80085a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008578:	f003 0320 	and.w	r3, r3, #32
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00f      	beq.n	80085a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008584:	f003 0320 	and.w	r3, r3, #32
 8008588:	2b00      	cmp	r3, #0
 800858a:	d009      	beq.n	80085a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 82c6 	beq.w	8008b22 <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	4798      	blx	r3
      }
      return;
 800859e:	e2c0      	b.n	8008b22 <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 8117 	beq.w	80087d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80085aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085ae:	f003 0301 	and.w	r3, r3, #1
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d106      	bne.n	80085c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80085b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80085ba:	4b85      	ldr	r3, [pc, #532]	@ (80087d0 <HAL_UART_IRQHandler+0x298>)
 80085bc:	4013      	ands	r3, r2
 80085be:	2b00      	cmp	r3, #0
 80085c0:	f000 810a 	beq.w	80087d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d011      	beq.n	80085f4 <HAL_UART_IRQHandler+0xbc>
 80085d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00b      	beq.n	80085f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2201      	movs	r2, #1
 80085e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ea:	f043 0201 	orr.w	r2, r3, #1
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d011      	beq.n	8008624 <HAL_UART_IRQHandler+0xec>
 8008600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008604:	f003 0301 	and.w	r3, r3, #1
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00b      	beq.n	8008624 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2202      	movs	r2, #2
 8008612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800861a:	f043 0204 	orr.w	r2, r3, #4
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008628:	f003 0304 	and.w	r3, r3, #4
 800862c:	2b00      	cmp	r3, #0
 800862e:	d011      	beq.n	8008654 <HAL_UART_IRQHandler+0x11c>
 8008630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008634:	f003 0301 	and.w	r3, r3, #1
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00b      	beq.n	8008654 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2204      	movs	r2, #4
 8008642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800864a:	f043 0202 	orr.w	r2, r3, #2
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008658:	f003 0308 	and.w	r3, r3, #8
 800865c:	2b00      	cmp	r3, #0
 800865e:	d017      	beq.n	8008690 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008664:	f003 0320 	and.w	r3, r3, #32
 8008668:	2b00      	cmp	r3, #0
 800866a:	d105      	bne.n	8008678 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800866c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008670:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00b      	beq.n	8008690 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2208      	movs	r2, #8
 800867e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008686:	f043 0208 	orr.w	r2, r3, #8
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008698:	2b00      	cmp	r3, #0
 800869a:	d012      	beq.n	80086c2 <HAL_UART_IRQHandler+0x18a>
 800869c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00c      	beq.n	80086c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086b8:	f043 0220 	orr.w	r2, r3, #32
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f000 822c 	beq.w	8008b26 <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80086ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d2:	f003 0320 	and.w	r3, r3, #32
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00d      	beq.n	80086f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80086da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086de:	f003 0320 	and.w	r3, r3, #32
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d007      	beq.n	80086f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800870a:	2b40      	cmp	r3, #64	@ 0x40
 800870c:	d005      	beq.n	800871a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800870e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008712:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008716:	2b00      	cmp	r3, #0
 8008718:	d04f      	beq.n	80087ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fe79 	bl	8009412 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800872a:	2b40      	cmp	r3, #64	@ 0x40
 800872c:	d141      	bne.n	80087b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3308      	adds	r3, #8
 8008734:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800873c:	e853 3f00 	ldrex	r3, [r3]
 8008740:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008744:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800874c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3308      	adds	r3, #8
 8008756:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800875a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800875e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008766:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800876a:	e841 2300 	strex	r3, r2, [r1]
 800876e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008772:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d1d9      	bne.n	800872e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800877e:	2b00      	cmp	r3, #0
 8008780:	d013      	beq.n	80087aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008786:	4a13      	ldr	r2, [pc, #76]	@ (80087d4 <HAL_UART_IRQHandler+0x29c>)
 8008788:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800878e:	4618      	mov	r0, r3
 8008790:	f7fc ffe8 	bl	8005764 <HAL_DMA_Abort_IT>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d017      	beq.n	80087ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800879e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80087a4:	4610      	mov	r0, r2
 80087a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a8:	e00f      	b.n	80087ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f9d0 	bl	8008b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b0:	e00b      	b.n	80087ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f9cc 	bl	8008b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b8:	e007      	b.n	80087ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f9c8 	bl	8008b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80087c8:	e1ad      	b.n	8008b26 <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ca:	bf00      	nop
    return;
 80087cc:	e1ab      	b.n	8008b26 <HAL_UART_IRQHandler+0x5ee>
 80087ce:	bf00      	nop
 80087d0:	04000120 	.word	0x04000120
 80087d4:	0800960b 	.word	0x0800960b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087dc:	2b01      	cmp	r3, #1
 80087de:	f040 8166 	bne.w	8008aae <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087e6:	f003 0310 	and.w	r3, r3, #16
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 815f 	beq.w	8008aae <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087f4:	f003 0310 	and.w	r3, r3, #16
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	f000 8158 	beq.w	8008aae <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2210      	movs	r2, #16
 8008804:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008810:	2b40      	cmp	r3, #64	@ 0x40
 8008812:	f040 80d0 	bne.w	80089b6 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008822:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 80ab 	beq.w	8008982 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008836:	429a      	cmp	r2, r3
 8008838:	f080 80a3 	bcs.w	8008982 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008842:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008850:	f000 8086 	beq.w	8008960 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008860:	e853 3f00 	ldrex	r3, [r3]
 8008864:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008868:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800886c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800887e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008882:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008886:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800888a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1da      	bne.n	8008854 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3308      	adds	r3, #8
 80088a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80088ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088b0:	f023 0301 	bic.w	r3, r3, #1
 80088b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3308      	adds	r3, #8
 80088be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80088c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80088c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80088ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80088ce:	e841 2300 	strex	r3, r2, [r1]
 80088d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80088d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1e1      	bne.n	800889e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088e4:	e853 3f00 	ldrex	r3, [r3]
 80088e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80088ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3308      	adds	r3, #8
 80088fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80088fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008900:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008902:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008904:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008906:	e841 2300 	strex	r3, r2, [r1]
 800890a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800890c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1e3      	bne.n	80088da <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2220      	movs	r2, #32
 8008916:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800892e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008930:	f023 0310 	bic.w	r3, r3, #16
 8008934:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008942:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008944:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008948:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e4      	bne.n	8008920 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800895a:	4618      	mov	r0, r3
 800895c:	f7fc fe92 	bl	8005684 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2202      	movs	r2, #2
 8008964:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008972:	b29b      	uxth	r3, r3
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	b29b      	uxth	r3, r3
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f8f2 	bl	8008b64 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008980:	e0d3      	b.n	8008b2a <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008988:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800898c:	429a      	cmp	r2, r3
 800898e:	f040 80cc 	bne.w	8008b2a <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008996:	69db      	ldr	r3, [r3, #28]
 8008998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800899c:	f040 80c5 	bne.w	8008b2a <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2202      	movs	r2, #2
 80089a4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80089ac:	4619      	mov	r1, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f8d8 	bl	8008b64 <HAL_UARTEx_RxEventCallback>
      return;
 80089b4:	e0b9      	b.n	8008b2a <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 80ab 	beq.w	8008b2e <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 80089d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f000 80a6 	beq.w	8008b2e <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ea:	e853 3f00 	ldrex	r3, [r3]
 80089ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80089f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a0c:	e841 2300 	strex	r3, r2, [r1]
 8008a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1e4      	bne.n	80089e2 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3308      	adds	r3, #8
 8008a1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a22:	e853 3f00 	ldrex	r3, [r3]
 8008a26:	623b      	str	r3, [r7, #32]
   return(result);
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	f023 0301 	bic.w	r3, r3, #1
 8008a2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3308      	adds	r3, #8
 8008a38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a44:	e841 2300 	strex	r3, r2, [r1]
 8008a48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e3      	bne.n	8008a18 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2220      	movs	r2, #32
 8008a54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	e853 3f00 	ldrex	r3, [r3]
 8008a70:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f023 0310 	bic.w	r3, r3, #16
 8008a78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	461a      	mov	r2, r3
 8008a82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008a86:	61fb      	str	r3, [r7, #28]
 8008a88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	69b9      	ldr	r1, [r7, #24]
 8008a8c:	69fa      	ldr	r2, [r7, #28]
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	617b      	str	r3, [r7, #20]
   return(result);
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e4      	bne.n	8008a64 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2202      	movs	r2, #2
 8008a9e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008aa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f85c 	bl	8008b64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008aac:	e03f      	b.n	8008b2e <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00e      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x5a0>
 8008aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d008      	beq.n	8008ad8 <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008ace:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f853 	bl	8008b7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ad6:	e02d      	b.n	8008b34 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00e      	beq.n	8008b02 <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d008      	beq.n	8008b02 <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01c      	beq.n	8008b32 <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	4798      	blx	r3
    }
    return;
 8008b00:	e017      	b.n	8008b32 <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d012      	beq.n	8008b34 <HAL_UART_IRQHandler+0x5fc>
 8008b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00c      	beq.n	8008b34 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fd87 	bl	800962e <UART_EndTransmit_IT>
    return;
 8008b20:	e008      	b.n	8008b34 <HAL_UART_IRQHandler+0x5fc>
      return;
 8008b22:	bf00      	nop
 8008b24:	e006      	b.n	8008b34 <HAL_UART_IRQHandler+0x5fc>
    return;
 8008b26:	bf00      	nop
 8008b28:	e004      	b.n	8008b34 <HAL_UART_IRQHandler+0x5fc>
      return;
 8008b2a:	bf00      	nop
 8008b2c:	e002      	b.n	8008b34 <HAL_UART_IRQHandler+0x5fc>
      return;
 8008b2e:	bf00      	nop
 8008b30:	e000      	b.n	8008b34 <HAL_UART_IRQHandler+0x5fc>
    return;
 8008b32:	bf00      	nop
  }

}
 8008b34:	37e8      	adds	r7, #232	@ 0xe8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop

08008b3c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b088      	sub	sp, #32
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	689a      	ldr	r2, [r3, #8]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	431a      	orrs	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	431a      	orrs	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	4ba6      	ldr	r3, [pc, #664]	@ (8008e54 <UART_SetConfig+0x2c4>)
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	6812      	ldr	r2, [r2, #0]
 8008bc2:	6979      	ldr	r1, [r7, #20]
 8008bc4:	430b      	orrs	r3, r1
 8008bc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68da      	ldr	r2, [r3, #12]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	699b      	ldr	r3, [r3, #24]
 8008be2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a1b      	ldr	r3, [r3, #32]
 8008be8:	697a      	ldr	r2, [r7, #20]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a94      	ldr	r2, [pc, #592]	@ (8008e58 <UART_SetConfig+0x2c8>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d120      	bne.n	8008c4e <UART_SetConfig+0xbe>
 8008c0c:	4b93      	ldr	r3, [pc, #588]	@ (8008e5c <UART_SetConfig+0x2cc>)
 8008c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c12:	f003 0303 	and.w	r3, r3, #3
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d816      	bhi.n	8008c48 <UART_SetConfig+0xb8>
 8008c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c20 <UART_SetConfig+0x90>)
 8008c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c20:	08008c31 	.word	0x08008c31
 8008c24:	08008c3d 	.word	0x08008c3d
 8008c28:	08008c37 	.word	0x08008c37
 8008c2c:	08008c43 	.word	0x08008c43
 8008c30:	2301      	movs	r3, #1
 8008c32:	77fb      	strb	r3, [r7, #31]
 8008c34:	e150      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008c36:	2302      	movs	r3, #2
 8008c38:	77fb      	strb	r3, [r7, #31]
 8008c3a:	e14d      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008c3c:	2304      	movs	r3, #4
 8008c3e:	77fb      	strb	r3, [r7, #31]
 8008c40:	e14a      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008c42:	2308      	movs	r3, #8
 8008c44:	77fb      	strb	r3, [r7, #31]
 8008c46:	e147      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008c48:	2310      	movs	r3, #16
 8008c4a:	77fb      	strb	r3, [r7, #31]
 8008c4c:	e144      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a83      	ldr	r2, [pc, #524]	@ (8008e60 <UART_SetConfig+0x2d0>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d132      	bne.n	8008cbe <UART_SetConfig+0x12e>
 8008c58:	4b80      	ldr	r3, [pc, #512]	@ (8008e5c <UART_SetConfig+0x2cc>)
 8008c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c5e:	f003 030c 	and.w	r3, r3, #12
 8008c62:	2b0c      	cmp	r3, #12
 8008c64:	d828      	bhi.n	8008cb8 <UART_SetConfig+0x128>
 8008c66:	a201      	add	r2, pc, #4	@ (adr r2, 8008c6c <UART_SetConfig+0xdc>)
 8008c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6c:	08008ca1 	.word	0x08008ca1
 8008c70:	08008cb9 	.word	0x08008cb9
 8008c74:	08008cb9 	.word	0x08008cb9
 8008c78:	08008cb9 	.word	0x08008cb9
 8008c7c:	08008cad 	.word	0x08008cad
 8008c80:	08008cb9 	.word	0x08008cb9
 8008c84:	08008cb9 	.word	0x08008cb9
 8008c88:	08008cb9 	.word	0x08008cb9
 8008c8c:	08008ca7 	.word	0x08008ca7
 8008c90:	08008cb9 	.word	0x08008cb9
 8008c94:	08008cb9 	.word	0x08008cb9
 8008c98:	08008cb9 	.word	0x08008cb9
 8008c9c:	08008cb3 	.word	0x08008cb3
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	77fb      	strb	r3, [r7, #31]
 8008ca4:	e118      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	77fb      	strb	r3, [r7, #31]
 8008caa:	e115      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008cac:	2304      	movs	r3, #4
 8008cae:	77fb      	strb	r3, [r7, #31]
 8008cb0:	e112      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008cb2:	2308      	movs	r3, #8
 8008cb4:	77fb      	strb	r3, [r7, #31]
 8008cb6:	e10f      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008cb8:	2310      	movs	r3, #16
 8008cba:	77fb      	strb	r3, [r7, #31]
 8008cbc:	e10c      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a68      	ldr	r2, [pc, #416]	@ (8008e64 <UART_SetConfig+0x2d4>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d120      	bne.n	8008d0a <UART_SetConfig+0x17a>
 8008cc8:	4b64      	ldr	r3, [pc, #400]	@ (8008e5c <UART_SetConfig+0x2cc>)
 8008cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008cd2:	2b30      	cmp	r3, #48	@ 0x30
 8008cd4:	d013      	beq.n	8008cfe <UART_SetConfig+0x16e>
 8008cd6:	2b30      	cmp	r3, #48	@ 0x30
 8008cd8:	d814      	bhi.n	8008d04 <UART_SetConfig+0x174>
 8008cda:	2b20      	cmp	r3, #32
 8008cdc:	d009      	beq.n	8008cf2 <UART_SetConfig+0x162>
 8008cde:	2b20      	cmp	r3, #32
 8008ce0:	d810      	bhi.n	8008d04 <UART_SetConfig+0x174>
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d002      	beq.n	8008cec <UART_SetConfig+0x15c>
 8008ce6:	2b10      	cmp	r3, #16
 8008ce8:	d006      	beq.n	8008cf8 <UART_SetConfig+0x168>
 8008cea:	e00b      	b.n	8008d04 <UART_SetConfig+0x174>
 8008cec:	2300      	movs	r3, #0
 8008cee:	77fb      	strb	r3, [r7, #31]
 8008cf0:	e0f2      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008cf2:	2302      	movs	r3, #2
 8008cf4:	77fb      	strb	r3, [r7, #31]
 8008cf6:	e0ef      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	77fb      	strb	r3, [r7, #31]
 8008cfc:	e0ec      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008cfe:	2308      	movs	r3, #8
 8008d00:	77fb      	strb	r3, [r7, #31]
 8008d02:	e0e9      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008d04:	2310      	movs	r3, #16
 8008d06:	77fb      	strb	r3, [r7, #31]
 8008d08:	e0e6      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a56      	ldr	r2, [pc, #344]	@ (8008e68 <UART_SetConfig+0x2d8>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d120      	bne.n	8008d56 <UART_SetConfig+0x1c6>
 8008d14:	4b51      	ldr	r3, [pc, #324]	@ (8008e5c <UART_SetConfig+0x2cc>)
 8008d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008d1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d20:	d013      	beq.n	8008d4a <UART_SetConfig+0x1ba>
 8008d22:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d24:	d814      	bhi.n	8008d50 <UART_SetConfig+0x1c0>
 8008d26:	2b80      	cmp	r3, #128	@ 0x80
 8008d28:	d009      	beq.n	8008d3e <UART_SetConfig+0x1ae>
 8008d2a:	2b80      	cmp	r3, #128	@ 0x80
 8008d2c:	d810      	bhi.n	8008d50 <UART_SetConfig+0x1c0>
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <UART_SetConfig+0x1a8>
 8008d32:	2b40      	cmp	r3, #64	@ 0x40
 8008d34:	d006      	beq.n	8008d44 <UART_SetConfig+0x1b4>
 8008d36:	e00b      	b.n	8008d50 <UART_SetConfig+0x1c0>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	77fb      	strb	r3, [r7, #31]
 8008d3c:	e0cc      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	77fb      	strb	r3, [r7, #31]
 8008d42:	e0c9      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008d44:	2304      	movs	r3, #4
 8008d46:	77fb      	strb	r3, [r7, #31]
 8008d48:	e0c6      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008d4a:	2308      	movs	r3, #8
 8008d4c:	77fb      	strb	r3, [r7, #31]
 8008d4e:	e0c3      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008d50:	2310      	movs	r3, #16
 8008d52:	77fb      	strb	r3, [r7, #31]
 8008d54:	e0c0      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a44      	ldr	r2, [pc, #272]	@ (8008e6c <UART_SetConfig+0x2dc>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d125      	bne.n	8008dac <UART_SetConfig+0x21c>
 8008d60:	4b3e      	ldr	r3, [pc, #248]	@ (8008e5c <UART_SetConfig+0x2cc>)
 8008d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d6e:	d017      	beq.n	8008da0 <UART_SetConfig+0x210>
 8008d70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008d74:	d817      	bhi.n	8008da6 <UART_SetConfig+0x216>
 8008d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d7a:	d00b      	beq.n	8008d94 <UART_SetConfig+0x204>
 8008d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d80:	d811      	bhi.n	8008da6 <UART_SetConfig+0x216>
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <UART_SetConfig+0x1fe>
 8008d86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d8a:	d006      	beq.n	8008d9a <UART_SetConfig+0x20a>
 8008d8c:	e00b      	b.n	8008da6 <UART_SetConfig+0x216>
 8008d8e:	2300      	movs	r3, #0
 8008d90:	77fb      	strb	r3, [r7, #31]
 8008d92:	e0a1      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008d94:	2302      	movs	r3, #2
 8008d96:	77fb      	strb	r3, [r7, #31]
 8008d98:	e09e      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008d9a:	2304      	movs	r3, #4
 8008d9c:	77fb      	strb	r3, [r7, #31]
 8008d9e:	e09b      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008da0:	2308      	movs	r3, #8
 8008da2:	77fb      	strb	r3, [r7, #31]
 8008da4:	e098      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008da6:	2310      	movs	r3, #16
 8008da8:	77fb      	strb	r3, [r7, #31]
 8008daa:	e095      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a2f      	ldr	r2, [pc, #188]	@ (8008e70 <UART_SetConfig+0x2e0>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d125      	bne.n	8008e02 <UART_SetConfig+0x272>
 8008db6:	4b29      	ldr	r3, [pc, #164]	@ (8008e5c <UART_SetConfig+0x2cc>)
 8008db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dbc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008dc0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008dc4:	d017      	beq.n	8008df6 <UART_SetConfig+0x266>
 8008dc6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008dca:	d817      	bhi.n	8008dfc <UART_SetConfig+0x26c>
 8008dcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dd0:	d00b      	beq.n	8008dea <UART_SetConfig+0x25a>
 8008dd2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dd6:	d811      	bhi.n	8008dfc <UART_SetConfig+0x26c>
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <UART_SetConfig+0x254>
 8008ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008de0:	d006      	beq.n	8008df0 <UART_SetConfig+0x260>
 8008de2:	e00b      	b.n	8008dfc <UART_SetConfig+0x26c>
 8008de4:	2301      	movs	r3, #1
 8008de6:	77fb      	strb	r3, [r7, #31]
 8008de8:	e076      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008dea:	2302      	movs	r3, #2
 8008dec:	77fb      	strb	r3, [r7, #31]
 8008dee:	e073      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008df0:	2304      	movs	r3, #4
 8008df2:	77fb      	strb	r3, [r7, #31]
 8008df4:	e070      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008df6:	2308      	movs	r3, #8
 8008df8:	77fb      	strb	r3, [r7, #31]
 8008dfa:	e06d      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008dfc:	2310      	movs	r3, #16
 8008dfe:	77fb      	strb	r3, [r7, #31]
 8008e00:	e06a      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a1b      	ldr	r2, [pc, #108]	@ (8008e74 <UART_SetConfig+0x2e4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d138      	bne.n	8008e7e <UART_SetConfig+0x2ee>
 8008e0c:	4b13      	ldr	r3, [pc, #76]	@ (8008e5c <UART_SetConfig+0x2cc>)
 8008e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e12:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008e16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e1a:	d017      	beq.n	8008e4c <UART_SetConfig+0x2bc>
 8008e1c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e20:	d82a      	bhi.n	8008e78 <UART_SetConfig+0x2e8>
 8008e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e26:	d00b      	beq.n	8008e40 <UART_SetConfig+0x2b0>
 8008e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e2c:	d824      	bhi.n	8008e78 <UART_SetConfig+0x2e8>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <UART_SetConfig+0x2aa>
 8008e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e36:	d006      	beq.n	8008e46 <UART_SetConfig+0x2b6>
 8008e38:	e01e      	b.n	8008e78 <UART_SetConfig+0x2e8>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	77fb      	strb	r3, [r7, #31]
 8008e3e:	e04b      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008e40:	2302      	movs	r3, #2
 8008e42:	77fb      	strb	r3, [r7, #31]
 8008e44:	e048      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008e46:	2304      	movs	r3, #4
 8008e48:	77fb      	strb	r3, [r7, #31]
 8008e4a:	e045      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008e4c:	2308      	movs	r3, #8
 8008e4e:	77fb      	strb	r3, [r7, #31]
 8008e50:	e042      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008e52:	bf00      	nop
 8008e54:	efff69f3 	.word	0xefff69f3
 8008e58:	40011000 	.word	0x40011000
 8008e5c:	40023800 	.word	0x40023800
 8008e60:	40004400 	.word	0x40004400
 8008e64:	40004800 	.word	0x40004800
 8008e68:	40004c00 	.word	0x40004c00
 8008e6c:	40005000 	.word	0x40005000
 8008e70:	40011400 	.word	0x40011400
 8008e74:	40007800 	.word	0x40007800
 8008e78:	2310      	movs	r3, #16
 8008e7a:	77fb      	strb	r3, [r7, #31]
 8008e7c:	e02c      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a72      	ldr	r2, [pc, #456]	@ (800904c <UART_SetConfig+0x4bc>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d125      	bne.n	8008ed4 <UART_SetConfig+0x344>
 8008e88:	4b71      	ldr	r3, [pc, #452]	@ (8009050 <UART_SetConfig+0x4c0>)
 8008e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e8e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008e92:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008e96:	d017      	beq.n	8008ec8 <UART_SetConfig+0x338>
 8008e98:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008e9c:	d817      	bhi.n	8008ece <UART_SetConfig+0x33e>
 8008e9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ea2:	d00b      	beq.n	8008ebc <UART_SetConfig+0x32c>
 8008ea4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ea8:	d811      	bhi.n	8008ece <UART_SetConfig+0x33e>
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <UART_SetConfig+0x326>
 8008eae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008eb2:	d006      	beq.n	8008ec2 <UART_SetConfig+0x332>
 8008eb4:	e00b      	b.n	8008ece <UART_SetConfig+0x33e>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	77fb      	strb	r3, [r7, #31]
 8008eba:	e00d      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	77fb      	strb	r3, [r7, #31]
 8008ec0:	e00a      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008ec2:	2304      	movs	r3, #4
 8008ec4:	77fb      	strb	r3, [r7, #31]
 8008ec6:	e007      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008ec8:	2308      	movs	r3, #8
 8008eca:	77fb      	strb	r3, [r7, #31]
 8008ecc:	e004      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008ece:	2310      	movs	r3, #16
 8008ed0:	77fb      	strb	r3, [r7, #31]
 8008ed2:	e001      	b.n	8008ed8 <UART_SetConfig+0x348>
 8008ed4:	2310      	movs	r3, #16
 8008ed6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ee0:	d15b      	bne.n	8008f9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008ee2:	7ffb      	ldrb	r3, [r7, #31]
 8008ee4:	2b08      	cmp	r3, #8
 8008ee6:	d828      	bhi.n	8008f3a <UART_SetConfig+0x3aa>
 8008ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef0 <UART_SetConfig+0x360>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f15 	.word	0x08008f15
 8008ef4:	08008f1d 	.word	0x08008f1d
 8008ef8:	08008f25 	.word	0x08008f25
 8008efc:	08008f3b 	.word	0x08008f3b
 8008f00:	08008f2b 	.word	0x08008f2b
 8008f04:	08008f3b 	.word	0x08008f3b
 8008f08:	08008f3b 	.word	0x08008f3b
 8008f0c:	08008f3b 	.word	0x08008f3b
 8008f10:	08008f33 	.word	0x08008f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f14:	f7fe fa0c 	bl	8007330 <HAL_RCC_GetPCLK1Freq>
 8008f18:	61b8      	str	r0, [r7, #24]
        break;
 8008f1a:	e013      	b.n	8008f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f1c:	f7fe fa1c 	bl	8007358 <HAL_RCC_GetPCLK2Freq>
 8008f20:	61b8      	str	r0, [r7, #24]
        break;
 8008f22:	e00f      	b.n	8008f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f24:	4b4b      	ldr	r3, [pc, #300]	@ (8009054 <UART_SetConfig+0x4c4>)
 8008f26:	61bb      	str	r3, [r7, #24]
        break;
 8008f28:	e00c      	b.n	8008f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f2a:	f7fe f8ef 	bl	800710c <HAL_RCC_GetSysClockFreq>
 8008f2e:	61b8      	str	r0, [r7, #24]
        break;
 8008f30:	e008      	b.n	8008f44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f36:	61bb      	str	r3, [r7, #24]
        break;
 8008f38:	e004      	b.n	8008f44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	77bb      	strb	r3, [r7, #30]
        break;
 8008f42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d074      	beq.n	8009034 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	005a      	lsls	r2, r3, #1
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	085b      	lsrs	r3, r3, #1
 8008f54:	441a      	add	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	2b0f      	cmp	r3, #15
 8008f64:	d916      	bls.n	8008f94 <UART_SetConfig+0x404>
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f6c:	d212      	bcs.n	8008f94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	f023 030f 	bic.w	r3, r3, #15
 8008f76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	085b      	lsrs	r3, r3, #1
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	f003 0307 	and.w	r3, r3, #7
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	89fb      	ldrh	r3, [r7, #14]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	89fa      	ldrh	r2, [r7, #14]
 8008f90:	60da      	str	r2, [r3, #12]
 8008f92:	e04f      	b.n	8009034 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	77bb      	strb	r3, [r7, #30]
 8008f98:	e04c      	b.n	8009034 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f9a:	7ffb      	ldrb	r3, [r7, #31]
 8008f9c:	2b08      	cmp	r3, #8
 8008f9e:	d828      	bhi.n	8008ff2 <UART_SetConfig+0x462>
 8008fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa8 <UART_SetConfig+0x418>)
 8008fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa6:	bf00      	nop
 8008fa8:	08008fcd 	.word	0x08008fcd
 8008fac:	08008fd5 	.word	0x08008fd5
 8008fb0:	08008fdd 	.word	0x08008fdd
 8008fb4:	08008ff3 	.word	0x08008ff3
 8008fb8:	08008fe3 	.word	0x08008fe3
 8008fbc:	08008ff3 	.word	0x08008ff3
 8008fc0:	08008ff3 	.word	0x08008ff3
 8008fc4:	08008ff3 	.word	0x08008ff3
 8008fc8:	08008feb 	.word	0x08008feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fcc:	f7fe f9b0 	bl	8007330 <HAL_RCC_GetPCLK1Freq>
 8008fd0:	61b8      	str	r0, [r7, #24]
        break;
 8008fd2:	e013      	b.n	8008ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fd4:	f7fe f9c0 	bl	8007358 <HAL_RCC_GetPCLK2Freq>
 8008fd8:	61b8      	str	r0, [r7, #24]
        break;
 8008fda:	e00f      	b.n	8008ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8009054 <UART_SetConfig+0x4c4>)
 8008fde:	61bb      	str	r3, [r7, #24]
        break;
 8008fe0:	e00c      	b.n	8008ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fe2:	f7fe f893 	bl	800710c <HAL_RCC_GetSysClockFreq>
 8008fe6:	61b8      	str	r0, [r7, #24]
        break;
 8008fe8:	e008      	b.n	8008ffc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fee:	61bb      	str	r3, [r7, #24]
        break;
 8008ff0:	e004      	b.n	8008ffc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	77bb      	strb	r3, [r7, #30]
        break;
 8008ffa:	bf00      	nop
    }

    if (pclk != 0U)
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d018      	beq.n	8009034 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	085a      	lsrs	r2, r3, #1
 8009008:	69bb      	ldr	r3, [r7, #24]
 800900a:	441a      	add	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	fbb2 f3f3 	udiv	r3, r2, r3
 8009014:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2b0f      	cmp	r3, #15
 800901a:	d909      	bls.n	8009030 <UART_SetConfig+0x4a0>
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009022:	d205      	bcs.n	8009030 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	b29a      	uxth	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	60da      	str	r2, [r3, #12]
 800902e:	e001      	b.n	8009034 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009040:	7fbb      	ldrb	r3, [r7, #30]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3720      	adds	r7, #32
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	40007c00 	.word	0x40007c00
 8009050:	40023800 	.word	0x40023800
 8009054:	00f42400 	.word	0x00f42400

08009058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009064:	f003 0308 	and.w	r3, r3, #8
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00a      	beq.n	8009082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00a      	beq.n	80090a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	430a      	orrs	r2, r1
 80090a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a8:	f003 0302 	and.w	r3, r3, #2
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00a      	beq.n	80090c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	430a      	orrs	r2, r1
 80090c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ca:	f003 0304 	and.w	r3, r3, #4
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	430a      	orrs	r2, r1
 80090e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ec:	f003 0310 	and.w	r3, r3, #16
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d00a      	beq.n	800910a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	430a      	orrs	r2, r1
 8009108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800910e:	f003 0320 	and.w	r3, r3, #32
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00a      	beq.n	800912c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	430a      	orrs	r2, r1
 800912a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009134:	2b00      	cmp	r3, #0
 8009136:	d01a      	beq.n	800916e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	430a      	orrs	r2, r1
 800914c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009156:	d10a      	bne.n	800916e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	430a      	orrs	r2, r1
 800918e:	605a      	str	r2, [r3, #4]
  }
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b098      	sub	sp, #96	@ 0x60
 80091a0:	af02      	add	r7, sp, #8
 80091a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091ac:	f7fb fa14 	bl	80045d8 <HAL_GetTick>
 80091b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0308 	and.w	r3, r3, #8
 80091bc:	2b08      	cmp	r3, #8
 80091be:	d12e      	bne.n	800921e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091c8:	2200      	movs	r2, #0
 80091ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f88c 	bl	80092ec <UART_WaitOnFlagUntilTimeout>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d021      	beq.n	800921e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e2:	e853 3f00 	ldrex	r3, [r3]
 80091e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	461a      	mov	r2, r3
 80091f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80091fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009200:	e841 2300 	strex	r3, r2, [r1]
 8009204:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1e6      	bne.n	80091da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2220      	movs	r2, #32
 8009210:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e062      	b.n	80092e4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b04      	cmp	r3, #4
 800922a:	d149      	bne.n	80092c0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800922c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009234:	2200      	movs	r2, #0
 8009236:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f856 	bl	80092ec <UART_WaitOnFlagUntilTimeout>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d03c      	beq.n	80092c0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924e:	e853 3f00 	ldrex	r3, [r3]
 8009252:	623b      	str	r3, [r7, #32]
   return(result);
 8009254:	6a3b      	ldr	r3, [r7, #32]
 8009256:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800925a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	461a      	mov	r2, r3
 8009262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009264:	633b      	str	r3, [r7, #48]	@ 0x30
 8009266:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009268:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800926a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800926c:	e841 2300 	strex	r3, r2, [r1]
 8009270:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1e6      	bne.n	8009246 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3308      	adds	r3, #8
 800927e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	e853 3f00 	ldrex	r3, [r3]
 8009286:	60fb      	str	r3, [r7, #12]
   return(result);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f023 0301 	bic.w	r3, r3, #1
 800928e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3308      	adds	r3, #8
 8009296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009298:	61fa      	str	r2, [r7, #28]
 800929a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929c:	69b9      	ldr	r1, [r7, #24]
 800929e:	69fa      	ldr	r2, [r7, #28]
 80092a0:	e841 2300 	strex	r3, r2, [r1]
 80092a4:	617b      	str	r3, [r7, #20]
   return(result);
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1e5      	bne.n	8009278 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2220      	movs	r2, #32
 80092b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092bc:	2303      	movs	r3, #3
 80092be:	e011      	b.n	80092e4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2220      	movs	r2, #32
 80092c4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2220      	movs	r2, #32
 80092ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3758      	adds	r7, #88	@ 0x58
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	603b      	str	r3, [r7, #0]
 80092f8:	4613      	mov	r3, r2
 80092fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092fc:	e04f      	b.n	800939e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009304:	d04b      	beq.n	800939e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009306:	f7fb f967 	bl	80045d8 <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	69ba      	ldr	r2, [r7, #24]
 8009312:	429a      	cmp	r2, r3
 8009314:	d302      	bcc.n	800931c <UART_WaitOnFlagUntilTimeout+0x30>
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d101      	bne.n	8009320 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e04e      	b.n	80093be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0304 	and.w	r3, r3, #4
 800932a:	2b00      	cmp	r3, #0
 800932c:	d037      	beq.n	800939e <UART_WaitOnFlagUntilTimeout+0xb2>
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2b80      	cmp	r3, #128	@ 0x80
 8009332:	d034      	beq.n	800939e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	2b40      	cmp	r3, #64	@ 0x40
 8009338:	d031      	beq.n	800939e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	69db      	ldr	r3, [r3, #28]
 8009340:	f003 0308 	and.w	r3, r3, #8
 8009344:	2b08      	cmp	r3, #8
 8009346:	d110      	bne.n	800936a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2208      	movs	r2, #8
 800934e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 f85e 	bl	8009412 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2208      	movs	r2, #8
 800935a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e029      	b.n	80093be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	69db      	ldr	r3, [r3, #28]
 8009370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009378:	d111      	bne.n	800939e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009382:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009384:	68f8      	ldr	r0, [r7, #12]
 8009386:	f000 f844 	bl	8009412 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2220      	movs	r2, #32
 800938e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e00f      	b.n	80093be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	69da      	ldr	r2, [r3, #28]
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	4013      	ands	r3, r2
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	bf0c      	ite	eq
 80093ae:	2301      	moveq	r3, #1
 80093b0:	2300      	movne	r3, #0
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	461a      	mov	r2, r3
 80093b6:	79fb      	ldrb	r3, [r7, #7]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d0a0      	beq.n	80092fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b089      	sub	sp, #36	@ 0x24
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	e853 3f00 	ldrex	r3, [r3]
 80093da:	60bb      	str	r3, [r7, #8]
   return(result);
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80093e2:	61fb      	str	r3, [r7, #28]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	461a      	mov	r2, r3
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	61bb      	str	r3, [r7, #24]
 80093ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f0:	6979      	ldr	r1, [r7, #20]
 80093f2:	69ba      	ldr	r2, [r7, #24]
 80093f4:	e841 2300 	strex	r3, r2, [r1]
 80093f8:	613b      	str	r3, [r7, #16]
   return(result);
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e6      	bne.n	80093ce <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2220      	movs	r2, #32
 8009404:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009406:	bf00      	nop
 8009408:	3724      	adds	r7, #36	@ 0x24
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009412:	b480      	push	{r7}
 8009414:	b095      	sub	sp, #84	@ 0x54
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009422:	e853 3f00 	ldrex	r3, [r3]
 8009426:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800942e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	461a      	mov	r2, r3
 8009436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009438:	643b      	str	r3, [r7, #64]	@ 0x40
 800943a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800943e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009440:	e841 2300 	strex	r3, r2, [r1]
 8009444:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1e6      	bne.n	800941a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3308      	adds	r3, #8
 8009452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	e853 3f00 	ldrex	r3, [r3]
 800945a:	61fb      	str	r3, [r7, #28]
   return(result);
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	f023 0301 	bic.w	r3, r3, #1
 8009462:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	3308      	adds	r3, #8
 800946a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800946c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800946e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009470:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009474:	e841 2300 	strex	r3, r2, [r1]
 8009478:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800947a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1e5      	bne.n	800944c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009484:	2b01      	cmp	r3, #1
 8009486:	d118      	bne.n	80094ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	60bb      	str	r3, [r7, #8]
   return(result);
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	f023 0310 	bic.w	r3, r3, #16
 800949c:	647b      	str	r3, [r7, #68]	@ 0x44
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094a6:	61bb      	str	r3, [r7, #24]
 80094a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	6979      	ldr	r1, [r7, #20]
 80094ac:	69ba      	ldr	r2, [r7, #24]
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	613b      	str	r3, [r7, #16]
   return(result);
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e6      	bne.n	8009488 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2220      	movs	r2, #32
 80094be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80094ce:	bf00      	nop
 80094d0:	3754      	adds	r7, #84	@ 0x54
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b090      	sub	sp, #64	@ 0x40
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094f0:	d037      	beq.n	8009562 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80094f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f4:	2200      	movs	r2, #0
 80094f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3308      	adds	r3, #8
 8009500:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009504:	e853 3f00 	ldrex	r3, [r3]
 8009508:	623b      	str	r3, [r7, #32]
   return(result);
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009510:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3308      	adds	r3, #8
 8009518:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800951a:	633a      	str	r2, [r7, #48]	@ 0x30
 800951c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009522:	e841 2300 	strex	r3, r2, [r1]
 8009526:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1e5      	bne.n	80094fa <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800952e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	60fb      	str	r3, [r7, #12]
   return(result);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009542:	637b      	str	r3, [r7, #52]	@ 0x34
 8009544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	461a      	mov	r2, r3
 800954a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800954c:	61fb      	str	r3, [r7, #28]
 800954e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	69b9      	ldr	r1, [r7, #24]
 8009552:	69fa      	ldr	r2, [r7, #28]
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	617b      	str	r3, [r7, #20]
   return(result);
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e6      	bne.n	800952e <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009560:	e002      	b.n	8009568 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8009562:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009564:	f7f7 f898 	bl	8000698 <HAL_UART_TxCpltCallback>
}
 8009568:	bf00      	nop
 800956a:	3740      	adds	r7, #64	@ 0x40
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}

08009570 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b084      	sub	sp, #16
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800957c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f7ff fadc 	bl	8008b3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009584:	bf00      	nop
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009598:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800959e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095b2:	2b80      	cmp	r3, #128	@ 0x80
 80095b4:	d109      	bne.n	80095ca <UART_DMAError+0x3e>
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	2b21      	cmp	r3, #33	@ 0x21
 80095ba:	d106      	bne.n	80095ca <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	2200      	movs	r2, #0
 80095c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80095c4:	6978      	ldr	r0, [r7, #20]
 80095c6:	f7ff fefe 	bl	80093c6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095d4:	2b40      	cmp	r3, #64	@ 0x40
 80095d6:	d109      	bne.n	80095ec <UART_DMAError+0x60>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2b22      	cmp	r3, #34	@ 0x22
 80095dc:	d106      	bne.n	80095ec <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80095e6:	6978      	ldr	r0, [r7, #20]
 80095e8:	f7ff ff13 	bl	8009412 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095f2:	f043 0210 	orr.w	r2, r3, #16
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095fc:	6978      	ldr	r0, [r7, #20]
 80095fe:	f7ff faa7 	bl	8008b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009602:	bf00      	nop
 8009604:	3718      	adds	r7, #24
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009616:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7ff fa95 	bl	8008b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b088      	sub	sp, #32
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	e853 3f00 	ldrex	r3, [r3]
 8009642:	60bb      	str	r3, [r7, #8]
   return(result);
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800964a:	61fb      	str	r3, [r7, #28]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	461a      	mov	r2, r3
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	61bb      	str	r3, [r7, #24]
 8009656:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	6979      	ldr	r1, [r7, #20]
 800965a:	69ba      	ldr	r2, [r7, #24]
 800965c:	e841 2300 	strex	r3, r2, [r1]
 8009660:	613b      	str	r3, [r7, #16]
   return(result);
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1e6      	bne.n	8009636 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2220      	movs	r2, #32
 800966c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7f7 f80f 	bl	8000698 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800967a:	bf00      	nop
 800967c:	3720      	adds	r7, #32
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009684:	b084      	sub	sp, #16
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	f107 001c 	add.w	r0, r7, #28
 8009692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009696:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800969a:	2b01      	cmp	r3, #1
 800969c:	d121      	bne.n	80096e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68da      	ldr	r2, [r3, #12]
 80096ae:	4b21      	ldr	r3, [pc, #132]	@ (8009734 <USB_CoreInit+0xb0>)
 80096b0:	4013      	ands	r3, r2
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80096c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d105      	bne.n	80096d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fa92 	bl	8009c00 <USB_CoreReset>
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]
 80096e0:	e010      	b.n	8009704 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fa86 	bl	8009c00 <USB_CoreReset>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8009704:	7fbb      	ldrb	r3, [r7, #30]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d10b      	bne.n	8009722 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f043 0206 	orr.w	r2, r3, #6
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f043 0220 	orr.w	r2, r3, #32
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009722:	7bfb      	ldrb	r3, [r7, #15]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800972e:	b004      	add	sp, #16
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	ffbdffbf 	.word	0xffbdffbf

08009738 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	f023 0201 	bic.w	r2, r3, #1
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b084      	sub	sp, #16
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	460b      	mov	r3, r1
 8009764:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009766:	2300      	movs	r3, #0
 8009768:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009776:	78fb      	ldrb	r3, [r7, #3]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d115      	bne.n	80097a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009788:	200a      	movs	r0, #10
 800978a:	f7fa ff31 	bl	80045f0 <HAL_Delay>
      ms += 10U;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	330a      	adds	r3, #10
 8009792:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fa25 	bl	8009be4 <USB_GetMode>
 800979a:	4603      	mov	r3, r0
 800979c:	2b01      	cmp	r3, #1
 800979e:	d01e      	beq.n	80097de <USB_SetCurrentMode+0x84>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80097a4:	d9f0      	bls.n	8009788 <USB_SetCurrentMode+0x2e>
 80097a6:	e01a      	b.n	80097de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d115      	bne.n	80097da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80097ba:	200a      	movs	r0, #10
 80097bc:	f7fa ff18 	bl	80045f0 <HAL_Delay>
      ms += 10U;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	330a      	adds	r3, #10
 80097c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fa0c 	bl	8009be4 <USB_GetMode>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d005      	beq.n	80097de <USB_SetCurrentMode+0x84>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80097d6:	d9f0      	bls.n	80097ba <USB_SetCurrentMode+0x60>
 80097d8:	e001      	b.n	80097de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	e005      	b.n	80097ea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2bc8      	cmp	r3, #200	@ 0xc8
 80097e2:	d101      	bne.n	80097e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e000      	b.n	80097ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
	...

080097f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097f4:	b084      	sub	sp, #16
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b086      	sub	sp, #24
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800980e:	2300      	movs	r3, #0
 8009810:	613b      	str	r3, [r7, #16]
 8009812:	e009      	b.n	8009828 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	3340      	adds	r3, #64	@ 0x40
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	2200      	movs	r2, #0
 8009820:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	3301      	adds	r3, #1
 8009826:	613b      	str	r3, [r7, #16]
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	2b0e      	cmp	r3, #14
 800982c:	d9f2      	bls.n	8009814 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800982e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009832:	2b00      	cmp	r3, #0
 8009834:	d11c      	bne.n	8009870 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009844:	f043 0302 	orr.w	r3, r3, #2
 8009848:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800984e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	e005      	b.n	800987c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009874:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009882:	461a      	mov	r2, r3
 8009884:	2300      	movs	r3, #0
 8009886:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009888:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800988c:	2b01      	cmp	r3, #1
 800988e:	d10d      	bne.n	80098ac <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009894:	2b00      	cmp	r3, #0
 8009896:	d104      	bne.n	80098a2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009898:	2100      	movs	r1, #0
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f968 	bl	8009b70 <USB_SetDevSpeed>
 80098a0:	e008      	b.n	80098b4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80098a2:	2101      	movs	r1, #1
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f963 	bl	8009b70 <USB_SetDevSpeed>
 80098aa:	e003      	b.n	80098b4 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80098ac:	2103      	movs	r1, #3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f95e 	bl	8009b70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098b4:	2110      	movs	r1, #16
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f8fa 	bl	8009ab0 <USB_FlushTxFifo>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f924 	bl	8009b14 <USB_FlushRxFifo>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098dc:	461a      	mov	r2, r3
 80098de:	2300      	movs	r3, #0
 80098e0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098e8:	461a      	mov	r2, r3
 80098ea:	2300      	movs	r3, #0
 80098ec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098f4:	461a      	mov	r2, r3
 80098f6:	2300      	movs	r3, #0
 80098f8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098fa:	2300      	movs	r3, #0
 80098fc:	613b      	str	r3, [r7, #16]
 80098fe:	e043      	b.n	8009988 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009912:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009916:	d118      	bne.n	800994a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10a      	bne.n	8009934 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	015a      	lsls	r2, r3, #5
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	4413      	add	r3, r2
 8009926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800992a:	461a      	mov	r2, r3
 800992c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009930:	6013      	str	r3, [r2, #0]
 8009932:	e013      	b.n	800995c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	015a      	lsls	r2, r3, #5
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	4413      	add	r3, r2
 800993c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009940:	461a      	mov	r2, r3
 8009942:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	e008      	b.n	800995c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	4413      	add	r3, r2
 8009952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009956:	461a      	mov	r2, r3
 8009958:	2300      	movs	r3, #0
 800995a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009968:	461a      	mov	r2, r3
 800996a:	2300      	movs	r3, #0
 800996c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	015a      	lsls	r2, r3, #5
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	4413      	add	r3, r2
 8009976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800997a:	461a      	mov	r2, r3
 800997c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009980:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	3301      	adds	r3, #1
 8009986:	613b      	str	r3, [r7, #16]
 8009988:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800998c:	461a      	mov	r2, r3
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	4293      	cmp	r3, r2
 8009992:	d3b5      	bcc.n	8009900 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009994:	2300      	movs	r3, #0
 8009996:	613b      	str	r3, [r7, #16]
 8009998:	e043      	b.n	8009a22 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099b0:	d118      	bne.n	80099e4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10a      	bne.n	80099ce <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099c4:	461a      	mov	r2, r3
 80099c6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80099ca:	6013      	str	r3, [r2, #0]
 80099cc:	e013      	b.n	80099f6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	015a      	lsls	r2, r3, #5
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	4413      	add	r3, r2
 80099d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099da:	461a      	mov	r2, r3
 80099dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80099e0:	6013      	str	r3, [r2, #0]
 80099e2:	e008      	b.n	80099f6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099f0:	461a      	mov	r2, r3
 80099f2:	2300      	movs	r3, #0
 80099f4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	015a      	lsls	r2, r3, #5
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a02:	461a      	mov	r2, r3
 8009a04:	2300      	movs	r3, #0
 8009a06:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	015a      	lsls	r2, r3, #5
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	4413      	add	r3, r2
 8009a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a14:	461a      	mov	r2, r3
 8009a16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	613b      	str	r3, [r7, #16]
 8009a22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a26:	461a      	mov	r2, r3
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d3b5      	bcc.n	800999a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a40:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009a4e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d105      	bne.n	8009a64 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	f043 0210 	orr.w	r2, r3, #16
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	699a      	ldr	r2, [r3, #24]
 8009a68:	4b0f      	ldr	r3, [pc, #60]	@ (8009aa8 <USB_DevInit+0x2b4>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a70:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d005      	beq.n	8009a84 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	f043 0208 	orr.w	r2, r3, #8
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a84:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d105      	bne.n	8009a98 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	699a      	ldr	r2, [r3, #24]
 8009a90:	4b06      	ldr	r3, [pc, #24]	@ (8009aac <USB_DevInit+0x2b8>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3718      	adds	r7, #24
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009aa4:	b004      	add	sp, #16
 8009aa6:	4770      	bx	lr
 8009aa8:	803c3800 	.word	0x803c3800
 8009aac:	40000004 	.word	0x40000004

08009ab0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009aba:	2300      	movs	r3, #0
 8009abc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009aca:	d901      	bls.n	8009ad0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009acc:	2303      	movs	r3, #3
 8009ace:	e01b      	b.n	8009b08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	daf2      	bge.n	8009abe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	019b      	lsls	r3, r3, #6
 8009ae0:	f043 0220 	orr.w	r2, r3, #32
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3301      	adds	r3, #1
 8009aec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009af4:	d901      	bls.n	8009afa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e006      	b.n	8009b08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	f003 0320 	and.w	r3, r3, #32
 8009b02:	2b20      	cmp	r3, #32
 8009b04:	d0f0      	beq.n	8009ae8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b2c:	d901      	bls.n	8009b32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e018      	b.n	8009b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	daf2      	bge.n	8009b20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2210      	movs	r2, #16
 8009b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3301      	adds	r3, #1
 8009b48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b50:	d901      	bls.n	8009b56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e006      	b.n	8009b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	f003 0310 	and.w	r3, r3, #16
 8009b5e:	2b10      	cmp	r3, #16
 8009b60:	d0f0      	beq.n	8009b44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3714      	adds	r7, #20
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	460b      	mov	r3, r1
 8009b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	68f9      	ldr	r1, [r7, #12]
 8009b8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b90:	4313      	orrs	r3, r2
 8009b92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b085      	sub	sp, #20
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009bbc:	f023 0303 	bic.w	r3, r3, #3
 8009bc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bd0:	f043 0302 	orr.w	r3, r3, #2
 8009bd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	f003 0301 	and.w	r3, r3, #1
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c18:	d901      	bls.n	8009c1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e022      	b.n	8009c64 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	daf2      	bge.n	8009c0c <USB_CoreReset+0xc>

  count = 10U;
 8009c26:	230a      	movs	r3, #10
 8009c28:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8009c2a:	e002      	b.n	8009c32 <USB_CoreReset+0x32>
  {
    count--;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1f9      	bne.n	8009c2c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	f043 0201 	orr.w	r2, r3, #1
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	3301      	adds	r3, #1
 8009c48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c50:	d901      	bls.n	8009c56 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e006      	b.n	8009c64 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	691b      	ldr	r3, [r3, #16]
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d0f0      	beq.n	8009c44 <USB_CoreReset+0x44>

  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <__cvt>:
 8009c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c72:	ed2d 8b02 	vpush	{d8}
 8009c76:	eeb0 8b40 	vmov.f64	d8, d0
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	4617      	mov	r7, r2
 8009c7e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009c80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c82:	ee18 2a90 	vmov	r2, s17
 8009c86:	f025 0520 	bic.w	r5, r5, #32
 8009c8a:	2a00      	cmp	r2, #0
 8009c8c:	bfb6      	itet	lt
 8009c8e:	222d      	movlt	r2, #45	@ 0x2d
 8009c90:	2200      	movge	r2, #0
 8009c92:	eeb1 8b40 	vneglt.f64	d8, d0
 8009c96:	2d46      	cmp	r5, #70	@ 0x46
 8009c98:	460c      	mov	r4, r1
 8009c9a:	701a      	strb	r2, [r3, #0]
 8009c9c:	d004      	beq.n	8009ca8 <__cvt+0x38>
 8009c9e:	2d45      	cmp	r5, #69	@ 0x45
 8009ca0:	d100      	bne.n	8009ca4 <__cvt+0x34>
 8009ca2:	3401      	adds	r4, #1
 8009ca4:	2102      	movs	r1, #2
 8009ca6:	e000      	b.n	8009caa <__cvt+0x3a>
 8009ca8:	2103      	movs	r1, #3
 8009caa:	ab03      	add	r3, sp, #12
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	ab02      	add	r3, sp, #8
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	4622      	mov	r2, r4
 8009cb4:	4633      	mov	r3, r6
 8009cb6:	eeb0 0b48 	vmov.f64	d0, d8
 8009cba:	f000 fe2d 	bl	800a918 <_dtoa_r>
 8009cbe:	2d47      	cmp	r5, #71	@ 0x47
 8009cc0:	d114      	bne.n	8009cec <__cvt+0x7c>
 8009cc2:	07fb      	lsls	r3, r7, #31
 8009cc4:	d50a      	bpl.n	8009cdc <__cvt+0x6c>
 8009cc6:	1902      	adds	r2, r0, r4
 8009cc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd0:	bf08      	it	eq
 8009cd2:	9203      	streq	r2, [sp, #12]
 8009cd4:	2130      	movs	r1, #48	@ 0x30
 8009cd6:	9b03      	ldr	r3, [sp, #12]
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d319      	bcc.n	8009d10 <__cvt+0xa0>
 8009cdc:	9b03      	ldr	r3, [sp, #12]
 8009cde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ce0:	1a1b      	subs	r3, r3, r0
 8009ce2:	6013      	str	r3, [r2, #0]
 8009ce4:	b005      	add	sp, #20
 8009ce6:	ecbd 8b02 	vpop	{d8}
 8009cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cec:	2d46      	cmp	r5, #70	@ 0x46
 8009cee:	eb00 0204 	add.w	r2, r0, r4
 8009cf2:	d1e9      	bne.n	8009cc8 <__cvt+0x58>
 8009cf4:	7803      	ldrb	r3, [r0, #0]
 8009cf6:	2b30      	cmp	r3, #48	@ 0x30
 8009cf8:	d107      	bne.n	8009d0a <__cvt+0x9a>
 8009cfa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d02:	bf1c      	itt	ne
 8009d04:	f1c4 0401 	rsbne	r4, r4, #1
 8009d08:	6034      	strne	r4, [r6, #0]
 8009d0a:	6833      	ldr	r3, [r6, #0]
 8009d0c:	441a      	add	r2, r3
 8009d0e:	e7db      	b.n	8009cc8 <__cvt+0x58>
 8009d10:	1c5c      	adds	r4, r3, #1
 8009d12:	9403      	str	r4, [sp, #12]
 8009d14:	7019      	strb	r1, [r3, #0]
 8009d16:	e7de      	b.n	8009cd6 <__cvt+0x66>

08009d18 <__exponent>:
 8009d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d1a:	2900      	cmp	r1, #0
 8009d1c:	bfba      	itte	lt
 8009d1e:	4249      	neglt	r1, r1
 8009d20:	232d      	movlt	r3, #45	@ 0x2d
 8009d22:	232b      	movge	r3, #43	@ 0x2b
 8009d24:	2909      	cmp	r1, #9
 8009d26:	7002      	strb	r2, [r0, #0]
 8009d28:	7043      	strb	r3, [r0, #1]
 8009d2a:	dd29      	ble.n	8009d80 <__exponent+0x68>
 8009d2c:	f10d 0307 	add.w	r3, sp, #7
 8009d30:	461d      	mov	r5, r3
 8009d32:	270a      	movs	r7, #10
 8009d34:	461a      	mov	r2, r3
 8009d36:	fbb1 f6f7 	udiv	r6, r1, r7
 8009d3a:	fb07 1416 	mls	r4, r7, r6, r1
 8009d3e:	3430      	adds	r4, #48	@ 0x30
 8009d40:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d44:	460c      	mov	r4, r1
 8009d46:	2c63      	cmp	r4, #99	@ 0x63
 8009d48:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	dcf1      	bgt.n	8009d34 <__exponent+0x1c>
 8009d50:	3130      	adds	r1, #48	@ 0x30
 8009d52:	1e94      	subs	r4, r2, #2
 8009d54:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d58:	1c41      	adds	r1, r0, #1
 8009d5a:	4623      	mov	r3, r4
 8009d5c:	42ab      	cmp	r3, r5
 8009d5e:	d30a      	bcc.n	8009d76 <__exponent+0x5e>
 8009d60:	f10d 0309 	add.w	r3, sp, #9
 8009d64:	1a9b      	subs	r3, r3, r2
 8009d66:	42ac      	cmp	r4, r5
 8009d68:	bf88      	it	hi
 8009d6a:	2300      	movhi	r3, #0
 8009d6c:	3302      	adds	r3, #2
 8009d6e:	4403      	add	r3, r0
 8009d70:	1a18      	subs	r0, r3, r0
 8009d72:	b003      	add	sp, #12
 8009d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d76:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009d7a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009d7e:	e7ed      	b.n	8009d5c <__exponent+0x44>
 8009d80:	2330      	movs	r3, #48	@ 0x30
 8009d82:	3130      	adds	r1, #48	@ 0x30
 8009d84:	7083      	strb	r3, [r0, #2]
 8009d86:	70c1      	strb	r1, [r0, #3]
 8009d88:	1d03      	adds	r3, r0, #4
 8009d8a:	e7f1      	b.n	8009d70 <__exponent+0x58>
 8009d8c:	0000      	movs	r0, r0
	...

08009d90 <_printf_float>:
 8009d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d94:	b08d      	sub	sp, #52	@ 0x34
 8009d96:	460c      	mov	r4, r1
 8009d98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009d9c:	4616      	mov	r6, r2
 8009d9e:	461f      	mov	r7, r3
 8009da0:	4605      	mov	r5, r0
 8009da2:	f000 fca9 	bl	800a6f8 <_localeconv_r>
 8009da6:	f8d0 b000 	ldr.w	fp, [r0]
 8009daa:	4658      	mov	r0, fp
 8009dac:	f7f6 fa98 	bl	80002e0 <strlen>
 8009db0:	2300      	movs	r3, #0
 8009db2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009db4:	f8d8 3000 	ldr.w	r3, [r8]
 8009db8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009dbc:	6822      	ldr	r2, [r4, #0]
 8009dbe:	9005      	str	r0, [sp, #20]
 8009dc0:	3307      	adds	r3, #7
 8009dc2:	f023 0307 	bic.w	r3, r3, #7
 8009dc6:	f103 0108 	add.w	r1, r3, #8
 8009dca:	f8c8 1000 	str.w	r1, [r8]
 8009dce:	ed93 0b00 	vldr	d0, [r3]
 8009dd2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a030 <_printf_float+0x2a0>
 8009dd6:	eeb0 7bc0 	vabs.f64	d7, d0
 8009dda:	eeb4 7b46 	vcmp.f64	d7, d6
 8009dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009de2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009de6:	dd24      	ble.n	8009e32 <_printf_float+0xa2>
 8009de8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df0:	d502      	bpl.n	8009df8 <_printf_float+0x68>
 8009df2:	232d      	movs	r3, #45	@ 0x2d
 8009df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009df8:	498f      	ldr	r1, [pc, #572]	@ (800a038 <_printf_float+0x2a8>)
 8009dfa:	4b90      	ldr	r3, [pc, #576]	@ (800a03c <_printf_float+0x2ac>)
 8009dfc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009e00:	bf8c      	ite	hi
 8009e02:	4688      	movhi	r8, r1
 8009e04:	4698      	movls	r8, r3
 8009e06:	f022 0204 	bic.w	r2, r2, #4
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	6123      	str	r3, [r4, #16]
 8009e0e:	6022      	str	r2, [r4, #0]
 8009e10:	f04f 0a00 	mov.w	sl, #0
 8009e14:	9700      	str	r7, [sp, #0]
 8009e16:	4633      	mov	r3, r6
 8009e18:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009e1a:	4621      	mov	r1, r4
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	f000 f9d1 	bl	800a1c4 <_printf_common>
 8009e22:	3001      	adds	r0, #1
 8009e24:	f040 8089 	bne.w	8009f3a <_printf_float+0x1aa>
 8009e28:	f04f 30ff 	mov.w	r0, #4294967295
 8009e2c:	b00d      	add	sp, #52	@ 0x34
 8009e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e32:	eeb4 0b40 	vcmp.f64	d0, d0
 8009e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e3a:	d709      	bvc.n	8009e50 <_printf_float+0xc0>
 8009e3c:	ee10 3a90 	vmov	r3, s1
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	bfbc      	itt	lt
 8009e44:	232d      	movlt	r3, #45	@ 0x2d
 8009e46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009e4a:	497d      	ldr	r1, [pc, #500]	@ (800a040 <_printf_float+0x2b0>)
 8009e4c:	4b7d      	ldr	r3, [pc, #500]	@ (800a044 <_printf_float+0x2b4>)
 8009e4e:	e7d5      	b.n	8009dfc <_printf_float+0x6c>
 8009e50:	6863      	ldr	r3, [r4, #4]
 8009e52:	1c59      	adds	r1, r3, #1
 8009e54:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009e58:	d139      	bne.n	8009ece <_printf_float+0x13e>
 8009e5a:	2306      	movs	r3, #6
 8009e5c:	6063      	str	r3, [r4, #4]
 8009e5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009e62:	2300      	movs	r3, #0
 8009e64:	6022      	str	r2, [r4, #0]
 8009e66:	9303      	str	r3, [sp, #12]
 8009e68:	ab0a      	add	r3, sp, #40	@ 0x28
 8009e6a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009e6e:	ab09      	add	r3, sp, #36	@ 0x24
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	6861      	ldr	r1, [r4, #4]
 8009e74:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009e78:	4628      	mov	r0, r5
 8009e7a:	f7ff fef9 	bl	8009c70 <__cvt>
 8009e7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e84:	4680      	mov	r8, r0
 8009e86:	d129      	bne.n	8009edc <_printf_float+0x14c>
 8009e88:	1cc8      	adds	r0, r1, #3
 8009e8a:	db02      	blt.n	8009e92 <_printf_float+0x102>
 8009e8c:	6863      	ldr	r3, [r4, #4]
 8009e8e:	4299      	cmp	r1, r3
 8009e90:	dd41      	ble.n	8009f16 <_printf_float+0x186>
 8009e92:	f1a9 0902 	sub.w	r9, r9, #2
 8009e96:	fa5f f989 	uxtb.w	r9, r9
 8009e9a:	3901      	subs	r1, #1
 8009e9c:	464a      	mov	r2, r9
 8009e9e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009ea2:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ea4:	f7ff ff38 	bl	8009d18 <__exponent>
 8009ea8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009eaa:	1813      	adds	r3, r2, r0
 8009eac:	2a01      	cmp	r2, #1
 8009eae:	4682      	mov	sl, r0
 8009eb0:	6123      	str	r3, [r4, #16]
 8009eb2:	dc02      	bgt.n	8009eba <_printf_float+0x12a>
 8009eb4:	6822      	ldr	r2, [r4, #0]
 8009eb6:	07d2      	lsls	r2, r2, #31
 8009eb8:	d501      	bpl.n	8009ebe <_printf_float+0x12e>
 8009eba:	3301      	adds	r3, #1
 8009ebc:	6123      	str	r3, [r4, #16]
 8009ebe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d0a6      	beq.n	8009e14 <_printf_float+0x84>
 8009ec6:	232d      	movs	r3, #45	@ 0x2d
 8009ec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ecc:	e7a2      	b.n	8009e14 <_printf_float+0x84>
 8009ece:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009ed2:	d1c4      	bne.n	8009e5e <_printf_float+0xce>
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1c2      	bne.n	8009e5e <_printf_float+0xce>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e7bf      	b.n	8009e5c <_printf_float+0xcc>
 8009edc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009ee0:	d9db      	bls.n	8009e9a <_printf_float+0x10a>
 8009ee2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009ee6:	d118      	bne.n	8009f1a <_printf_float+0x18a>
 8009ee8:	2900      	cmp	r1, #0
 8009eea:	6863      	ldr	r3, [r4, #4]
 8009eec:	dd0b      	ble.n	8009f06 <_printf_float+0x176>
 8009eee:	6121      	str	r1, [r4, #16]
 8009ef0:	b913      	cbnz	r3, 8009ef8 <_printf_float+0x168>
 8009ef2:	6822      	ldr	r2, [r4, #0]
 8009ef4:	07d0      	lsls	r0, r2, #31
 8009ef6:	d502      	bpl.n	8009efe <_printf_float+0x16e>
 8009ef8:	3301      	adds	r3, #1
 8009efa:	440b      	add	r3, r1
 8009efc:	6123      	str	r3, [r4, #16]
 8009efe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f00:	f04f 0a00 	mov.w	sl, #0
 8009f04:	e7db      	b.n	8009ebe <_printf_float+0x12e>
 8009f06:	b913      	cbnz	r3, 8009f0e <_printf_float+0x17e>
 8009f08:	6822      	ldr	r2, [r4, #0]
 8009f0a:	07d2      	lsls	r2, r2, #31
 8009f0c:	d501      	bpl.n	8009f12 <_printf_float+0x182>
 8009f0e:	3302      	adds	r3, #2
 8009f10:	e7f4      	b.n	8009efc <_printf_float+0x16c>
 8009f12:	2301      	movs	r3, #1
 8009f14:	e7f2      	b.n	8009efc <_printf_float+0x16c>
 8009f16:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009f1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f1c:	4299      	cmp	r1, r3
 8009f1e:	db05      	blt.n	8009f2c <_printf_float+0x19c>
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	6121      	str	r1, [r4, #16]
 8009f24:	07d8      	lsls	r0, r3, #31
 8009f26:	d5ea      	bpl.n	8009efe <_printf_float+0x16e>
 8009f28:	1c4b      	adds	r3, r1, #1
 8009f2a:	e7e7      	b.n	8009efc <_printf_float+0x16c>
 8009f2c:	2900      	cmp	r1, #0
 8009f2e:	bfd4      	ite	le
 8009f30:	f1c1 0202 	rsble	r2, r1, #2
 8009f34:	2201      	movgt	r2, #1
 8009f36:	4413      	add	r3, r2
 8009f38:	e7e0      	b.n	8009efc <_printf_float+0x16c>
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	055a      	lsls	r2, r3, #21
 8009f3e:	d407      	bmi.n	8009f50 <_printf_float+0x1c0>
 8009f40:	6923      	ldr	r3, [r4, #16]
 8009f42:	4642      	mov	r2, r8
 8009f44:	4631      	mov	r1, r6
 8009f46:	4628      	mov	r0, r5
 8009f48:	47b8      	blx	r7
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	d12a      	bne.n	8009fa4 <_printf_float+0x214>
 8009f4e:	e76b      	b.n	8009e28 <_printf_float+0x98>
 8009f50:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009f54:	f240 80e0 	bls.w	800a118 <_printf_float+0x388>
 8009f58:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009f5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f64:	d133      	bne.n	8009fce <_printf_float+0x23e>
 8009f66:	4a38      	ldr	r2, [pc, #224]	@ (800a048 <_printf_float+0x2b8>)
 8009f68:	2301      	movs	r3, #1
 8009f6a:	4631      	mov	r1, r6
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	47b8      	blx	r7
 8009f70:	3001      	adds	r0, #1
 8009f72:	f43f af59 	beq.w	8009e28 <_printf_float+0x98>
 8009f76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009f7a:	4543      	cmp	r3, r8
 8009f7c:	db02      	blt.n	8009f84 <_printf_float+0x1f4>
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	07d8      	lsls	r0, r3, #31
 8009f82:	d50f      	bpl.n	8009fa4 <_printf_float+0x214>
 8009f84:	9b05      	ldr	r3, [sp, #20]
 8009f86:	465a      	mov	r2, fp
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	47b8      	blx	r7
 8009f8e:	3001      	adds	r0, #1
 8009f90:	f43f af4a 	beq.w	8009e28 <_printf_float+0x98>
 8009f94:	f04f 0900 	mov.w	r9, #0
 8009f98:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f9c:	f104 0a1a 	add.w	sl, r4, #26
 8009fa0:	45c8      	cmp	r8, r9
 8009fa2:	dc09      	bgt.n	8009fb8 <_printf_float+0x228>
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	079b      	lsls	r3, r3, #30
 8009fa8:	f100 8107 	bmi.w	800a1ba <_printf_float+0x42a>
 8009fac:	68e0      	ldr	r0, [r4, #12]
 8009fae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fb0:	4298      	cmp	r0, r3
 8009fb2:	bfb8      	it	lt
 8009fb4:	4618      	movlt	r0, r3
 8009fb6:	e739      	b.n	8009e2c <_printf_float+0x9c>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	4652      	mov	r2, sl
 8009fbc:	4631      	mov	r1, r6
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	47b8      	blx	r7
 8009fc2:	3001      	adds	r0, #1
 8009fc4:	f43f af30 	beq.w	8009e28 <_printf_float+0x98>
 8009fc8:	f109 0901 	add.w	r9, r9, #1
 8009fcc:	e7e8      	b.n	8009fa0 <_printf_float+0x210>
 8009fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	dc3b      	bgt.n	800a04c <_printf_float+0x2bc>
 8009fd4:	4a1c      	ldr	r2, [pc, #112]	@ (800a048 <_printf_float+0x2b8>)
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	4631      	mov	r1, r6
 8009fda:	4628      	mov	r0, r5
 8009fdc:	47b8      	blx	r7
 8009fde:	3001      	adds	r0, #1
 8009fe0:	f43f af22 	beq.w	8009e28 <_printf_float+0x98>
 8009fe4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009fe8:	ea59 0303 	orrs.w	r3, r9, r3
 8009fec:	d102      	bne.n	8009ff4 <_printf_float+0x264>
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	07d9      	lsls	r1, r3, #31
 8009ff2:	d5d7      	bpl.n	8009fa4 <_printf_float+0x214>
 8009ff4:	9b05      	ldr	r3, [sp, #20]
 8009ff6:	465a      	mov	r2, fp
 8009ff8:	4631      	mov	r1, r6
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	47b8      	blx	r7
 8009ffe:	3001      	adds	r0, #1
 800a000:	f43f af12 	beq.w	8009e28 <_printf_float+0x98>
 800a004:	f04f 0a00 	mov.w	sl, #0
 800a008:	f104 0b1a 	add.w	fp, r4, #26
 800a00c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a00e:	425b      	negs	r3, r3
 800a010:	4553      	cmp	r3, sl
 800a012:	dc01      	bgt.n	800a018 <_printf_float+0x288>
 800a014:	464b      	mov	r3, r9
 800a016:	e794      	b.n	8009f42 <_printf_float+0x1b2>
 800a018:	2301      	movs	r3, #1
 800a01a:	465a      	mov	r2, fp
 800a01c:	4631      	mov	r1, r6
 800a01e:	4628      	mov	r0, r5
 800a020:	47b8      	blx	r7
 800a022:	3001      	adds	r0, #1
 800a024:	f43f af00 	beq.w	8009e28 <_printf_float+0x98>
 800a028:	f10a 0a01 	add.w	sl, sl, #1
 800a02c:	e7ee      	b.n	800a00c <_printf_float+0x27c>
 800a02e:	bf00      	nop
 800a030:	ffffffff 	.word	0xffffffff
 800a034:	7fefffff 	.word	0x7fefffff
 800a038:	080204e4 	.word	0x080204e4
 800a03c:	080204e0 	.word	0x080204e0
 800a040:	080204ec 	.word	0x080204ec
 800a044:	080204e8 	.word	0x080204e8
 800a048:	080204f0 	.word	0x080204f0
 800a04c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a04e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a052:	4553      	cmp	r3, sl
 800a054:	bfa8      	it	ge
 800a056:	4653      	movge	r3, sl
 800a058:	2b00      	cmp	r3, #0
 800a05a:	4699      	mov	r9, r3
 800a05c:	dc37      	bgt.n	800a0ce <_printf_float+0x33e>
 800a05e:	2300      	movs	r3, #0
 800a060:	9307      	str	r3, [sp, #28]
 800a062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a066:	f104 021a 	add.w	r2, r4, #26
 800a06a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a06c:	9907      	ldr	r1, [sp, #28]
 800a06e:	9306      	str	r3, [sp, #24]
 800a070:	eba3 0309 	sub.w	r3, r3, r9
 800a074:	428b      	cmp	r3, r1
 800a076:	dc31      	bgt.n	800a0dc <_printf_float+0x34c>
 800a078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a07a:	459a      	cmp	sl, r3
 800a07c:	dc3b      	bgt.n	800a0f6 <_printf_float+0x366>
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	07da      	lsls	r2, r3, #31
 800a082:	d438      	bmi.n	800a0f6 <_printf_float+0x366>
 800a084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a086:	ebaa 0903 	sub.w	r9, sl, r3
 800a08a:	9b06      	ldr	r3, [sp, #24]
 800a08c:	ebaa 0303 	sub.w	r3, sl, r3
 800a090:	4599      	cmp	r9, r3
 800a092:	bfa8      	it	ge
 800a094:	4699      	movge	r9, r3
 800a096:	f1b9 0f00 	cmp.w	r9, #0
 800a09a:	dc34      	bgt.n	800a106 <_printf_float+0x376>
 800a09c:	f04f 0800 	mov.w	r8, #0
 800a0a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0a4:	f104 0b1a 	add.w	fp, r4, #26
 800a0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0aa:	ebaa 0303 	sub.w	r3, sl, r3
 800a0ae:	eba3 0309 	sub.w	r3, r3, r9
 800a0b2:	4543      	cmp	r3, r8
 800a0b4:	f77f af76 	ble.w	8009fa4 <_printf_float+0x214>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	465a      	mov	r2, fp
 800a0bc:	4631      	mov	r1, r6
 800a0be:	4628      	mov	r0, r5
 800a0c0:	47b8      	blx	r7
 800a0c2:	3001      	adds	r0, #1
 800a0c4:	f43f aeb0 	beq.w	8009e28 <_printf_float+0x98>
 800a0c8:	f108 0801 	add.w	r8, r8, #1
 800a0cc:	e7ec      	b.n	800a0a8 <_printf_float+0x318>
 800a0ce:	4642      	mov	r2, r8
 800a0d0:	4631      	mov	r1, r6
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	47b8      	blx	r7
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	d1c1      	bne.n	800a05e <_printf_float+0x2ce>
 800a0da:	e6a5      	b.n	8009e28 <_printf_float+0x98>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	4631      	mov	r1, r6
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	9206      	str	r2, [sp, #24]
 800a0e4:	47b8      	blx	r7
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	f43f ae9e 	beq.w	8009e28 <_printf_float+0x98>
 800a0ec:	9b07      	ldr	r3, [sp, #28]
 800a0ee:	9a06      	ldr	r2, [sp, #24]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	9307      	str	r3, [sp, #28]
 800a0f4:	e7b9      	b.n	800a06a <_printf_float+0x2da>
 800a0f6:	9b05      	ldr	r3, [sp, #20]
 800a0f8:	465a      	mov	r2, fp
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	47b8      	blx	r7
 800a100:	3001      	adds	r0, #1
 800a102:	d1bf      	bne.n	800a084 <_printf_float+0x2f4>
 800a104:	e690      	b.n	8009e28 <_printf_float+0x98>
 800a106:	9a06      	ldr	r2, [sp, #24]
 800a108:	464b      	mov	r3, r9
 800a10a:	4442      	add	r2, r8
 800a10c:	4631      	mov	r1, r6
 800a10e:	4628      	mov	r0, r5
 800a110:	47b8      	blx	r7
 800a112:	3001      	adds	r0, #1
 800a114:	d1c2      	bne.n	800a09c <_printf_float+0x30c>
 800a116:	e687      	b.n	8009e28 <_printf_float+0x98>
 800a118:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a11c:	f1b9 0f01 	cmp.w	r9, #1
 800a120:	dc01      	bgt.n	800a126 <_printf_float+0x396>
 800a122:	07db      	lsls	r3, r3, #31
 800a124:	d536      	bpl.n	800a194 <_printf_float+0x404>
 800a126:	2301      	movs	r3, #1
 800a128:	4642      	mov	r2, r8
 800a12a:	4631      	mov	r1, r6
 800a12c:	4628      	mov	r0, r5
 800a12e:	47b8      	blx	r7
 800a130:	3001      	adds	r0, #1
 800a132:	f43f ae79 	beq.w	8009e28 <_printf_float+0x98>
 800a136:	9b05      	ldr	r3, [sp, #20]
 800a138:	465a      	mov	r2, fp
 800a13a:	4631      	mov	r1, r6
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b8      	blx	r7
 800a140:	3001      	adds	r0, #1
 800a142:	f43f ae71 	beq.w	8009e28 <_printf_float+0x98>
 800a146:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a14a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a152:	f109 39ff 	add.w	r9, r9, #4294967295
 800a156:	d018      	beq.n	800a18a <_printf_float+0x3fa>
 800a158:	464b      	mov	r3, r9
 800a15a:	f108 0201 	add.w	r2, r8, #1
 800a15e:	4631      	mov	r1, r6
 800a160:	4628      	mov	r0, r5
 800a162:	47b8      	blx	r7
 800a164:	3001      	adds	r0, #1
 800a166:	d10c      	bne.n	800a182 <_printf_float+0x3f2>
 800a168:	e65e      	b.n	8009e28 <_printf_float+0x98>
 800a16a:	2301      	movs	r3, #1
 800a16c:	465a      	mov	r2, fp
 800a16e:	4631      	mov	r1, r6
 800a170:	4628      	mov	r0, r5
 800a172:	47b8      	blx	r7
 800a174:	3001      	adds	r0, #1
 800a176:	f43f ae57 	beq.w	8009e28 <_printf_float+0x98>
 800a17a:	f108 0801 	add.w	r8, r8, #1
 800a17e:	45c8      	cmp	r8, r9
 800a180:	dbf3      	blt.n	800a16a <_printf_float+0x3da>
 800a182:	4653      	mov	r3, sl
 800a184:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a188:	e6dc      	b.n	8009f44 <_printf_float+0x1b4>
 800a18a:	f04f 0800 	mov.w	r8, #0
 800a18e:	f104 0b1a 	add.w	fp, r4, #26
 800a192:	e7f4      	b.n	800a17e <_printf_float+0x3ee>
 800a194:	2301      	movs	r3, #1
 800a196:	4642      	mov	r2, r8
 800a198:	e7e1      	b.n	800a15e <_printf_float+0x3ce>
 800a19a:	2301      	movs	r3, #1
 800a19c:	464a      	mov	r2, r9
 800a19e:	4631      	mov	r1, r6
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	47b8      	blx	r7
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	f43f ae3f 	beq.w	8009e28 <_printf_float+0x98>
 800a1aa:	f108 0801 	add.w	r8, r8, #1
 800a1ae:	68e3      	ldr	r3, [r4, #12]
 800a1b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a1b2:	1a5b      	subs	r3, r3, r1
 800a1b4:	4543      	cmp	r3, r8
 800a1b6:	dcf0      	bgt.n	800a19a <_printf_float+0x40a>
 800a1b8:	e6f8      	b.n	8009fac <_printf_float+0x21c>
 800a1ba:	f04f 0800 	mov.w	r8, #0
 800a1be:	f104 0919 	add.w	r9, r4, #25
 800a1c2:	e7f4      	b.n	800a1ae <_printf_float+0x41e>

0800a1c4 <_printf_common>:
 800a1c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c8:	4616      	mov	r6, r2
 800a1ca:	4698      	mov	r8, r3
 800a1cc:	688a      	ldr	r2, [r1, #8]
 800a1ce:	690b      	ldr	r3, [r1, #16]
 800a1d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	bfb8      	it	lt
 800a1d8:	4613      	movlt	r3, r2
 800a1da:	6033      	str	r3, [r6, #0]
 800a1dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1e0:	4607      	mov	r7, r0
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	b10a      	cbz	r2, 800a1ea <_printf_common+0x26>
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	6033      	str	r3, [r6, #0]
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	0699      	lsls	r1, r3, #26
 800a1ee:	bf42      	ittt	mi
 800a1f0:	6833      	ldrmi	r3, [r6, #0]
 800a1f2:	3302      	addmi	r3, #2
 800a1f4:	6033      	strmi	r3, [r6, #0]
 800a1f6:	6825      	ldr	r5, [r4, #0]
 800a1f8:	f015 0506 	ands.w	r5, r5, #6
 800a1fc:	d106      	bne.n	800a20c <_printf_common+0x48>
 800a1fe:	f104 0a19 	add.w	sl, r4, #25
 800a202:	68e3      	ldr	r3, [r4, #12]
 800a204:	6832      	ldr	r2, [r6, #0]
 800a206:	1a9b      	subs	r3, r3, r2
 800a208:	42ab      	cmp	r3, r5
 800a20a:	dc26      	bgt.n	800a25a <_printf_common+0x96>
 800a20c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a210:	6822      	ldr	r2, [r4, #0]
 800a212:	3b00      	subs	r3, #0
 800a214:	bf18      	it	ne
 800a216:	2301      	movne	r3, #1
 800a218:	0692      	lsls	r2, r2, #26
 800a21a:	d42b      	bmi.n	800a274 <_printf_common+0xb0>
 800a21c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a220:	4641      	mov	r1, r8
 800a222:	4638      	mov	r0, r7
 800a224:	47c8      	blx	r9
 800a226:	3001      	adds	r0, #1
 800a228:	d01e      	beq.n	800a268 <_printf_common+0xa4>
 800a22a:	6823      	ldr	r3, [r4, #0]
 800a22c:	6922      	ldr	r2, [r4, #16]
 800a22e:	f003 0306 	and.w	r3, r3, #6
 800a232:	2b04      	cmp	r3, #4
 800a234:	bf02      	ittt	eq
 800a236:	68e5      	ldreq	r5, [r4, #12]
 800a238:	6833      	ldreq	r3, [r6, #0]
 800a23a:	1aed      	subeq	r5, r5, r3
 800a23c:	68a3      	ldr	r3, [r4, #8]
 800a23e:	bf0c      	ite	eq
 800a240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a244:	2500      	movne	r5, #0
 800a246:	4293      	cmp	r3, r2
 800a248:	bfc4      	itt	gt
 800a24a:	1a9b      	subgt	r3, r3, r2
 800a24c:	18ed      	addgt	r5, r5, r3
 800a24e:	2600      	movs	r6, #0
 800a250:	341a      	adds	r4, #26
 800a252:	42b5      	cmp	r5, r6
 800a254:	d11a      	bne.n	800a28c <_printf_common+0xc8>
 800a256:	2000      	movs	r0, #0
 800a258:	e008      	b.n	800a26c <_printf_common+0xa8>
 800a25a:	2301      	movs	r3, #1
 800a25c:	4652      	mov	r2, sl
 800a25e:	4641      	mov	r1, r8
 800a260:	4638      	mov	r0, r7
 800a262:	47c8      	blx	r9
 800a264:	3001      	adds	r0, #1
 800a266:	d103      	bne.n	800a270 <_printf_common+0xac>
 800a268:	f04f 30ff 	mov.w	r0, #4294967295
 800a26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a270:	3501      	adds	r5, #1
 800a272:	e7c6      	b.n	800a202 <_printf_common+0x3e>
 800a274:	18e1      	adds	r1, r4, r3
 800a276:	1c5a      	adds	r2, r3, #1
 800a278:	2030      	movs	r0, #48	@ 0x30
 800a27a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a27e:	4422      	add	r2, r4
 800a280:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a288:	3302      	adds	r3, #2
 800a28a:	e7c7      	b.n	800a21c <_printf_common+0x58>
 800a28c:	2301      	movs	r3, #1
 800a28e:	4622      	mov	r2, r4
 800a290:	4641      	mov	r1, r8
 800a292:	4638      	mov	r0, r7
 800a294:	47c8      	blx	r9
 800a296:	3001      	adds	r0, #1
 800a298:	d0e6      	beq.n	800a268 <_printf_common+0xa4>
 800a29a:	3601      	adds	r6, #1
 800a29c:	e7d9      	b.n	800a252 <_printf_common+0x8e>
	...

0800a2a0 <_printf_i>:
 800a2a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a4:	7e0f      	ldrb	r7, [r1, #24]
 800a2a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2a8:	2f78      	cmp	r7, #120	@ 0x78
 800a2aa:	4691      	mov	r9, r2
 800a2ac:	4680      	mov	r8, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	469a      	mov	sl, r3
 800a2b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2b6:	d807      	bhi.n	800a2c8 <_printf_i+0x28>
 800a2b8:	2f62      	cmp	r7, #98	@ 0x62
 800a2ba:	d80a      	bhi.n	800a2d2 <_printf_i+0x32>
 800a2bc:	2f00      	cmp	r7, #0
 800a2be:	f000 80d1 	beq.w	800a464 <_printf_i+0x1c4>
 800a2c2:	2f58      	cmp	r7, #88	@ 0x58
 800a2c4:	f000 80b8 	beq.w	800a438 <_printf_i+0x198>
 800a2c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a2d0:	e03a      	b.n	800a348 <_printf_i+0xa8>
 800a2d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a2d6:	2b15      	cmp	r3, #21
 800a2d8:	d8f6      	bhi.n	800a2c8 <_printf_i+0x28>
 800a2da:	a101      	add	r1, pc, #4	@ (adr r1, 800a2e0 <_printf_i+0x40>)
 800a2dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2e0:	0800a339 	.word	0x0800a339
 800a2e4:	0800a34d 	.word	0x0800a34d
 800a2e8:	0800a2c9 	.word	0x0800a2c9
 800a2ec:	0800a2c9 	.word	0x0800a2c9
 800a2f0:	0800a2c9 	.word	0x0800a2c9
 800a2f4:	0800a2c9 	.word	0x0800a2c9
 800a2f8:	0800a34d 	.word	0x0800a34d
 800a2fc:	0800a2c9 	.word	0x0800a2c9
 800a300:	0800a2c9 	.word	0x0800a2c9
 800a304:	0800a2c9 	.word	0x0800a2c9
 800a308:	0800a2c9 	.word	0x0800a2c9
 800a30c:	0800a44b 	.word	0x0800a44b
 800a310:	0800a377 	.word	0x0800a377
 800a314:	0800a405 	.word	0x0800a405
 800a318:	0800a2c9 	.word	0x0800a2c9
 800a31c:	0800a2c9 	.word	0x0800a2c9
 800a320:	0800a46d 	.word	0x0800a46d
 800a324:	0800a2c9 	.word	0x0800a2c9
 800a328:	0800a377 	.word	0x0800a377
 800a32c:	0800a2c9 	.word	0x0800a2c9
 800a330:	0800a2c9 	.word	0x0800a2c9
 800a334:	0800a40d 	.word	0x0800a40d
 800a338:	6833      	ldr	r3, [r6, #0]
 800a33a:	1d1a      	adds	r2, r3, #4
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	6032      	str	r2, [r6, #0]
 800a340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a348:	2301      	movs	r3, #1
 800a34a:	e09c      	b.n	800a486 <_printf_i+0x1e6>
 800a34c:	6833      	ldr	r3, [r6, #0]
 800a34e:	6820      	ldr	r0, [r4, #0]
 800a350:	1d19      	adds	r1, r3, #4
 800a352:	6031      	str	r1, [r6, #0]
 800a354:	0606      	lsls	r6, r0, #24
 800a356:	d501      	bpl.n	800a35c <_printf_i+0xbc>
 800a358:	681d      	ldr	r5, [r3, #0]
 800a35a:	e003      	b.n	800a364 <_printf_i+0xc4>
 800a35c:	0645      	lsls	r5, r0, #25
 800a35e:	d5fb      	bpl.n	800a358 <_printf_i+0xb8>
 800a360:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a364:	2d00      	cmp	r5, #0
 800a366:	da03      	bge.n	800a370 <_printf_i+0xd0>
 800a368:	232d      	movs	r3, #45	@ 0x2d
 800a36a:	426d      	negs	r5, r5
 800a36c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a370:	4858      	ldr	r0, [pc, #352]	@ (800a4d4 <_printf_i+0x234>)
 800a372:	230a      	movs	r3, #10
 800a374:	e011      	b.n	800a39a <_printf_i+0xfa>
 800a376:	6821      	ldr	r1, [r4, #0]
 800a378:	6833      	ldr	r3, [r6, #0]
 800a37a:	0608      	lsls	r0, r1, #24
 800a37c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a380:	d402      	bmi.n	800a388 <_printf_i+0xe8>
 800a382:	0649      	lsls	r1, r1, #25
 800a384:	bf48      	it	mi
 800a386:	b2ad      	uxthmi	r5, r5
 800a388:	2f6f      	cmp	r7, #111	@ 0x6f
 800a38a:	4852      	ldr	r0, [pc, #328]	@ (800a4d4 <_printf_i+0x234>)
 800a38c:	6033      	str	r3, [r6, #0]
 800a38e:	bf14      	ite	ne
 800a390:	230a      	movne	r3, #10
 800a392:	2308      	moveq	r3, #8
 800a394:	2100      	movs	r1, #0
 800a396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a39a:	6866      	ldr	r6, [r4, #4]
 800a39c:	60a6      	str	r6, [r4, #8]
 800a39e:	2e00      	cmp	r6, #0
 800a3a0:	db05      	blt.n	800a3ae <_printf_i+0x10e>
 800a3a2:	6821      	ldr	r1, [r4, #0]
 800a3a4:	432e      	orrs	r6, r5
 800a3a6:	f021 0104 	bic.w	r1, r1, #4
 800a3aa:	6021      	str	r1, [r4, #0]
 800a3ac:	d04b      	beq.n	800a446 <_printf_i+0x1a6>
 800a3ae:	4616      	mov	r6, r2
 800a3b0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3b4:	fb03 5711 	mls	r7, r3, r1, r5
 800a3b8:	5dc7      	ldrb	r7, [r0, r7]
 800a3ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a3be:	462f      	mov	r7, r5
 800a3c0:	42bb      	cmp	r3, r7
 800a3c2:	460d      	mov	r5, r1
 800a3c4:	d9f4      	bls.n	800a3b0 <_printf_i+0x110>
 800a3c6:	2b08      	cmp	r3, #8
 800a3c8:	d10b      	bne.n	800a3e2 <_printf_i+0x142>
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	07df      	lsls	r7, r3, #31
 800a3ce:	d508      	bpl.n	800a3e2 <_printf_i+0x142>
 800a3d0:	6923      	ldr	r3, [r4, #16]
 800a3d2:	6861      	ldr	r1, [r4, #4]
 800a3d4:	4299      	cmp	r1, r3
 800a3d6:	bfde      	ittt	le
 800a3d8:	2330      	movle	r3, #48	@ 0x30
 800a3da:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3de:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a3e2:	1b92      	subs	r2, r2, r6
 800a3e4:	6122      	str	r2, [r4, #16]
 800a3e6:	f8cd a000 	str.w	sl, [sp]
 800a3ea:	464b      	mov	r3, r9
 800a3ec:	aa03      	add	r2, sp, #12
 800a3ee:	4621      	mov	r1, r4
 800a3f0:	4640      	mov	r0, r8
 800a3f2:	f7ff fee7 	bl	800a1c4 <_printf_common>
 800a3f6:	3001      	adds	r0, #1
 800a3f8:	d14a      	bne.n	800a490 <_printf_i+0x1f0>
 800a3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a3fe:	b004      	add	sp, #16
 800a400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a404:	6823      	ldr	r3, [r4, #0]
 800a406:	f043 0320 	orr.w	r3, r3, #32
 800a40a:	6023      	str	r3, [r4, #0]
 800a40c:	4832      	ldr	r0, [pc, #200]	@ (800a4d8 <_printf_i+0x238>)
 800a40e:	2778      	movs	r7, #120	@ 0x78
 800a410:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	6831      	ldr	r1, [r6, #0]
 800a418:	061f      	lsls	r7, r3, #24
 800a41a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a41e:	d402      	bmi.n	800a426 <_printf_i+0x186>
 800a420:	065f      	lsls	r7, r3, #25
 800a422:	bf48      	it	mi
 800a424:	b2ad      	uxthmi	r5, r5
 800a426:	6031      	str	r1, [r6, #0]
 800a428:	07d9      	lsls	r1, r3, #31
 800a42a:	bf44      	itt	mi
 800a42c:	f043 0320 	orrmi.w	r3, r3, #32
 800a430:	6023      	strmi	r3, [r4, #0]
 800a432:	b11d      	cbz	r5, 800a43c <_printf_i+0x19c>
 800a434:	2310      	movs	r3, #16
 800a436:	e7ad      	b.n	800a394 <_printf_i+0xf4>
 800a438:	4826      	ldr	r0, [pc, #152]	@ (800a4d4 <_printf_i+0x234>)
 800a43a:	e7e9      	b.n	800a410 <_printf_i+0x170>
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	f023 0320 	bic.w	r3, r3, #32
 800a442:	6023      	str	r3, [r4, #0]
 800a444:	e7f6      	b.n	800a434 <_printf_i+0x194>
 800a446:	4616      	mov	r6, r2
 800a448:	e7bd      	b.n	800a3c6 <_printf_i+0x126>
 800a44a:	6833      	ldr	r3, [r6, #0]
 800a44c:	6825      	ldr	r5, [r4, #0]
 800a44e:	6961      	ldr	r1, [r4, #20]
 800a450:	1d18      	adds	r0, r3, #4
 800a452:	6030      	str	r0, [r6, #0]
 800a454:	062e      	lsls	r6, r5, #24
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	d501      	bpl.n	800a45e <_printf_i+0x1be>
 800a45a:	6019      	str	r1, [r3, #0]
 800a45c:	e002      	b.n	800a464 <_printf_i+0x1c4>
 800a45e:	0668      	lsls	r0, r5, #25
 800a460:	d5fb      	bpl.n	800a45a <_printf_i+0x1ba>
 800a462:	8019      	strh	r1, [r3, #0]
 800a464:	2300      	movs	r3, #0
 800a466:	6123      	str	r3, [r4, #16]
 800a468:	4616      	mov	r6, r2
 800a46a:	e7bc      	b.n	800a3e6 <_printf_i+0x146>
 800a46c:	6833      	ldr	r3, [r6, #0]
 800a46e:	1d1a      	adds	r2, r3, #4
 800a470:	6032      	str	r2, [r6, #0]
 800a472:	681e      	ldr	r6, [r3, #0]
 800a474:	6862      	ldr	r2, [r4, #4]
 800a476:	2100      	movs	r1, #0
 800a478:	4630      	mov	r0, r6
 800a47a:	f7f5 fee1 	bl	8000240 <memchr>
 800a47e:	b108      	cbz	r0, 800a484 <_printf_i+0x1e4>
 800a480:	1b80      	subs	r0, r0, r6
 800a482:	6060      	str	r0, [r4, #4]
 800a484:	6863      	ldr	r3, [r4, #4]
 800a486:	6123      	str	r3, [r4, #16]
 800a488:	2300      	movs	r3, #0
 800a48a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a48e:	e7aa      	b.n	800a3e6 <_printf_i+0x146>
 800a490:	6923      	ldr	r3, [r4, #16]
 800a492:	4632      	mov	r2, r6
 800a494:	4649      	mov	r1, r9
 800a496:	4640      	mov	r0, r8
 800a498:	47d0      	blx	sl
 800a49a:	3001      	adds	r0, #1
 800a49c:	d0ad      	beq.n	800a3fa <_printf_i+0x15a>
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	079b      	lsls	r3, r3, #30
 800a4a2:	d413      	bmi.n	800a4cc <_printf_i+0x22c>
 800a4a4:	68e0      	ldr	r0, [r4, #12]
 800a4a6:	9b03      	ldr	r3, [sp, #12]
 800a4a8:	4298      	cmp	r0, r3
 800a4aa:	bfb8      	it	lt
 800a4ac:	4618      	movlt	r0, r3
 800a4ae:	e7a6      	b.n	800a3fe <_printf_i+0x15e>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	4632      	mov	r2, r6
 800a4b4:	4649      	mov	r1, r9
 800a4b6:	4640      	mov	r0, r8
 800a4b8:	47d0      	blx	sl
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	d09d      	beq.n	800a3fa <_printf_i+0x15a>
 800a4be:	3501      	adds	r5, #1
 800a4c0:	68e3      	ldr	r3, [r4, #12]
 800a4c2:	9903      	ldr	r1, [sp, #12]
 800a4c4:	1a5b      	subs	r3, r3, r1
 800a4c6:	42ab      	cmp	r3, r5
 800a4c8:	dcf2      	bgt.n	800a4b0 <_printf_i+0x210>
 800a4ca:	e7eb      	b.n	800a4a4 <_printf_i+0x204>
 800a4cc:	2500      	movs	r5, #0
 800a4ce:	f104 0619 	add.w	r6, r4, #25
 800a4d2:	e7f5      	b.n	800a4c0 <_printf_i+0x220>
 800a4d4:	080204f2 	.word	0x080204f2
 800a4d8:	08020503 	.word	0x08020503

0800a4dc <std>:
 800a4dc:	2300      	movs	r3, #0
 800a4de:	b510      	push	{r4, lr}
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	e9c0 3300 	strd	r3, r3, [r0]
 800a4e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4ea:	6083      	str	r3, [r0, #8]
 800a4ec:	8181      	strh	r1, [r0, #12]
 800a4ee:	6643      	str	r3, [r0, #100]	@ 0x64
 800a4f0:	81c2      	strh	r2, [r0, #14]
 800a4f2:	6183      	str	r3, [r0, #24]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	2208      	movs	r2, #8
 800a4f8:	305c      	adds	r0, #92	@ 0x5c
 800a4fa:	f000 f8f4 	bl	800a6e6 <memset>
 800a4fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a534 <std+0x58>)
 800a500:	6263      	str	r3, [r4, #36]	@ 0x24
 800a502:	4b0d      	ldr	r3, [pc, #52]	@ (800a538 <std+0x5c>)
 800a504:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a506:	4b0d      	ldr	r3, [pc, #52]	@ (800a53c <std+0x60>)
 800a508:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a50a:	4b0d      	ldr	r3, [pc, #52]	@ (800a540 <std+0x64>)
 800a50c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a50e:	4b0d      	ldr	r3, [pc, #52]	@ (800a544 <std+0x68>)
 800a510:	6224      	str	r4, [r4, #32]
 800a512:	429c      	cmp	r4, r3
 800a514:	d006      	beq.n	800a524 <std+0x48>
 800a516:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a51a:	4294      	cmp	r4, r2
 800a51c:	d002      	beq.n	800a524 <std+0x48>
 800a51e:	33d0      	adds	r3, #208	@ 0xd0
 800a520:	429c      	cmp	r4, r3
 800a522:	d105      	bne.n	800a530 <std+0x54>
 800a524:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a52c:	f000 b958 	b.w	800a7e0 <__retarget_lock_init_recursive>
 800a530:	bd10      	pop	{r4, pc}
 800a532:	bf00      	nop
 800a534:	0800a661 	.word	0x0800a661
 800a538:	0800a683 	.word	0x0800a683
 800a53c:	0800a6bb 	.word	0x0800a6bb
 800a540:	0800a6df 	.word	0x0800a6df
 800a544:	20003fe0 	.word	0x20003fe0

0800a548 <stdio_exit_handler>:
 800a548:	4a02      	ldr	r2, [pc, #8]	@ (800a554 <stdio_exit_handler+0xc>)
 800a54a:	4903      	ldr	r1, [pc, #12]	@ (800a558 <stdio_exit_handler+0x10>)
 800a54c:	4803      	ldr	r0, [pc, #12]	@ (800a55c <stdio_exit_handler+0x14>)
 800a54e:	f000 b869 	b.w	800a624 <_fwalk_sglue>
 800a552:	bf00      	nop
 800a554:	20000010 	.word	0x20000010
 800a558:	0800bdd1 	.word	0x0800bdd1
 800a55c:	20000020 	.word	0x20000020

0800a560 <cleanup_stdio>:
 800a560:	6841      	ldr	r1, [r0, #4]
 800a562:	4b0c      	ldr	r3, [pc, #48]	@ (800a594 <cleanup_stdio+0x34>)
 800a564:	4299      	cmp	r1, r3
 800a566:	b510      	push	{r4, lr}
 800a568:	4604      	mov	r4, r0
 800a56a:	d001      	beq.n	800a570 <cleanup_stdio+0x10>
 800a56c:	f001 fc30 	bl	800bdd0 <_fflush_r>
 800a570:	68a1      	ldr	r1, [r4, #8]
 800a572:	4b09      	ldr	r3, [pc, #36]	@ (800a598 <cleanup_stdio+0x38>)
 800a574:	4299      	cmp	r1, r3
 800a576:	d002      	beq.n	800a57e <cleanup_stdio+0x1e>
 800a578:	4620      	mov	r0, r4
 800a57a:	f001 fc29 	bl	800bdd0 <_fflush_r>
 800a57e:	68e1      	ldr	r1, [r4, #12]
 800a580:	4b06      	ldr	r3, [pc, #24]	@ (800a59c <cleanup_stdio+0x3c>)
 800a582:	4299      	cmp	r1, r3
 800a584:	d004      	beq.n	800a590 <cleanup_stdio+0x30>
 800a586:	4620      	mov	r0, r4
 800a588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a58c:	f001 bc20 	b.w	800bdd0 <_fflush_r>
 800a590:	bd10      	pop	{r4, pc}
 800a592:	bf00      	nop
 800a594:	20003fe0 	.word	0x20003fe0
 800a598:	20004048 	.word	0x20004048
 800a59c:	200040b0 	.word	0x200040b0

0800a5a0 <global_stdio_init.part.0>:
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a5d0 <global_stdio_init.part.0+0x30>)
 800a5a4:	4c0b      	ldr	r4, [pc, #44]	@ (800a5d4 <global_stdio_init.part.0+0x34>)
 800a5a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a5d8 <global_stdio_init.part.0+0x38>)
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	2104      	movs	r1, #4
 800a5b0:	f7ff ff94 	bl	800a4dc <std>
 800a5b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	2109      	movs	r1, #9
 800a5bc:	f7ff ff8e 	bl	800a4dc <std>
 800a5c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a5c4:	2202      	movs	r2, #2
 800a5c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5ca:	2112      	movs	r1, #18
 800a5cc:	f7ff bf86 	b.w	800a4dc <std>
 800a5d0:	20004118 	.word	0x20004118
 800a5d4:	20003fe0 	.word	0x20003fe0
 800a5d8:	0800a549 	.word	0x0800a549

0800a5dc <__sfp_lock_acquire>:
 800a5dc:	4801      	ldr	r0, [pc, #4]	@ (800a5e4 <__sfp_lock_acquire+0x8>)
 800a5de:	f000 b900 	b.w	800a7e2 <__retarget_lock_acquire_recursive>
 800a5e2:	bf00      	nop
 800a5e4:	20004121 	.word	0x20004121

0800a5e8 <__sfp_lock_release>:
 800a5e8:	4801      	ldr	r0, [pc, #4]	@ (800a5f0 <__sfp_lock_release+0x8>)
 800a5ea:	f000 b8fb 	b.w	800a7e4 <__retarget_lock_release_recursive>
 800a5ee:	bf00      	nop
 800a5f0:	20004121 	.word	0x20004121

0800a5f4 <__sinit>:
 800a5f4:	b510      	push	{r4, lr}
 800a5f6:	4604      	mov	r4, r0
 800a5f8:	f7ff fff0 	bl	800a5dc <__sfp_lock_acquire>
 800a5fc:	6a23      	ldr	r3, [r4, #32]
 800a5fe:	b11b      	cbz	r3, 800a608 <__sinit+0x14>
 800a600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a604:	f7ff bff0 	b.w	800a5e8 <__sfp_lock_release>
 800a608:	4b04      	ldr	r3, [pc, #16]	@ (800a61c <__sinit+0x28>)
 800a60a:	6223      	str	r3, [r4, #32]
 800a60c:	4b04      	ldr	r3, [pc, #16]	@ (800a620 <__sinit+0x2c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1f5      	bne.n	800a600 <__sinit+0xc>
 800a614:	f7ff ffc4 	bl	800a5a0 <global_stdio_init.part.0>
 800a618:	e7f2      	b.n	800a600 <__sinit+0xc>
 800a61a:	bf00      	nop
 800a61c:	0800a561 	.word	0x0800a561
 800a620:	20004118 	.word	0x20004118

0800a624 <_fwalk_sglue>:
 800a624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a628:	4607      	mov	r7, r0
 800a62a:	4688      	mov	r8, r1
 800a62c:	4614      	mov	r4, r2
 800a62e:	2600      	movs	r6, #0
 800a630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a634:	f1b9 0901 	subs.w	r9, r9, #1
 800a638:	d505      	bpl.n	800a646 <_fwalk_sglue+0x22>
 800a63a:	6824      	ldr	r4, [r4, #0]
 800a63c:	2c00      	cmp	r4, #0
 800a63e:	d1f7      	bne.n	800a630 <_fwalk_sglue+0xc>
 800a640:	4630      	mov	r0, r6
 800a642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a646:	89ab      	ldrh	r3, [r5, #12]
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d907      	bls.n	800a65c <_fwalk_sglue+0x38>
 800a64c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a650:	3301      	adds	r3, #1
 800a652:	d003      	beq.n	800a65c <_fwalk_sglue+0x38>
 800a654:	4629      	mov	r1, r5
 800a656:	4638      	mov	r0, r7
 800a658:	47c0      	blx	r8
 800a65a:	4306      	orrs	r6, r0
 800a65c:	3568      	adds	r5, #104	@ 0x68
 800a65e:	e7e9      	b.n	800a634 <_fwalk_sglue+0x10>

0800a660 <__sread>:
 800a660:	b510      	push	{r4, lr}
 800a662:	460c      	mov	r4, r1
 800a664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a668:	f000 f86c 	bl	800a744 <_read_r>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	bfab      	itete	ge
 800a670:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a672:	89a3      	ldrhlt	r3, [r4, #12]
 800a674:	181b      	addge	r3, r3, r0
 800a676:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a67a:	bfac      	ite	ge
 800a67c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a67e:	81a3      	strhlt	r3, [r4, #12]
 800a680:	bd10      	pop	{r4, pc}

0800a682 <__swrite>:
 800a682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a686:	461f      	mov	r7, r3
 800a688:	898b      	ldrh	r3, [r1, #12]
 800a68a:	05db      	lsls	r3, r3, #23
 800a68c:	4605      	mov	r5, r0
 800a68e:	460c      	mov	r4, r1
 800a690:	4616      	mov	r6, r2
 800a692:	d505      	bpl.n	800a6a0 <__swrite+0x1e>
 800a694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a698:	2302      	movs	r3, #2
 800a69a:	2200      	movs	r2, #0
 800a69c:	f000 f840 	bl	800a720 <_lseek_r>
 800a6a0:	89a3      	ldrh	r3, [r4, #12]
 800a6a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6aa:	81a3      	strh	r3, [r4, #12]
 800a6ac:	4632      	mov	r2, r6
 800a6ae:	463b      	mov	r3, r7
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b6:	f000 b857 	b.w	800a768 <_write_r>

0800a6ba <__sseek>:
 800a6ba:	b510      	push	{r4, lr}
 800a6bc:	460c      	mov	r4, r1
 800a6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c2:	f000 f82d 	bl	800a720 <_lseek_r>
 800a6c6:	1c43      	adds	r3, r0, #1
 800a6c8:	89a3      	ldrh	r3, [r4, #12]
 800a6ca:	bf15      	itete	ne
 800a6cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a6ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6d6:	81a3      	strheq	r3, [r4, #12]
 800a6d8:	bf18      	it	ne
 800a6da:	81a3      	strhne	r3, [r4, #12]
 800a6dc:	bd10      	pop	{r4, pc}

0800a6de <__sclose>:
 800a6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6e2:	f000 b80d 	b.w	800a700 <_close_r>

0800a6e6 <memset>:
 800a6e6:	4402      	add	r2, r0
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d100      	bne.n	800a6f0 <memset+0xa>
 800a6ee:	4770      	bx	lr
 800a6f0:	f803 1b01 	strb.w	r1, [r3], #1
 800a6f4:	e7f9      	b.n	800a6ea <memset+0x4>
	...

0800a6f8 <_localeconv_r>:
 800a6f8:	4800      	ldr	r0, [pc, #0]	@ (800a6fc <_localeconv_r+0x4>)
 800a6fa:	4770      	bx	lr
 800a6fc:	2000015c 	.word	0x2000015c

0800a700 <_close_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4d06      	ldr	r5, [pc, #24]	@ (800a71c <_close_r+0x1c>)
 800a704:	2300      	movs	r3, #0
 800a706:	4604      	mov	r4, r0
 800a708:	4608      	mov	r0, r1
 800a70a:	602b      	str	r3, [r5, #0]
 800a70c:	f7f7 f868 	bl	80017e0 <_close>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d102      	bne.n	800a71a <_close_r+0x1a>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	b103      	cbz	r3, 800a71a <_close_r+0x1a>
 800a718:	6023      	str	r3, [r4, #0]
 800a71a:	bd38      	pop	{r3, r4, r5, pc}
 800a71c:	2000411c 	.word	0x2000411c

0800a720 <_lseek_r>:
 800a720:	b538      	push	{r3, r4, r5, lr}
 800a722:	4d07      	ldr	r5, [pc, #28]	@ (800a740 <_lseek_r+0x20>)
 800a724:	4604      	mov	r4, r0
 800a726:	4608      	mov	r0, r1
 800a728:	4611      	mov	r1, r2
 800a72a:	2200      	movs	r2, #0
 800a72c:	602a      	str	r2, [r5, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	f7f7 f87d 	bl	800182e <_lseek>
 800a734:	1c43      	adds	r3, r0, #1
 800a736:	d102      	bne.n	800a73e <_lseek_r+0x1e>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	b103      	cbz	r3, 800a73e <_lseek_r+0x1e>
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	bd38      	pop	{r3, r4, r5, pc}
 800a740:	2000411c 	.word	0x2000411c

0800a744 <_read_r>:
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	4d07      	ldr	r5, [pc, #28]	@ (800a764 <_read_r+0x20>)
 800a748:	4604      	mov	r4, r0
 800a74a:	4608      	mov	r0, r1
 800a74c:	4611      	mov	r1, r2
 800a74e:	2200      	movs	r2, #0
 800a750:	602a      	str	r2, [r5, #0]
 800a752:	461a      	mov	r2, r3
 800a754:	f7f7 f80b 	bl	800176e <_read>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_read_r+0x1e>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_read_r+0x1e>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	2000411c 	.word	0x2000411c

0800a768 <_write_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4d07      	ldr	r5, [pc, #28]	@ (800a788 <_write_r+0x20>)
 800a76c:	4604      	mov	r4, r0
 800a76e:	4608      	mov	r0, r1
 800a770:	4611      	mov	r1, r2
 800a772:	2200      	movs	r2, #0
 800a774:	602a      	str	r2, [r5, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	f7f7 f816 	bl	80017a8 <_write>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d102      	bne.n	800a786 <_write_r+0x1e>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	b103      	cbz	r3, 800a786 <_write_r+0x1e>
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	2000411c 	.word	0x2000411c

0800a78c <__errno>:
 800a78c:	4b01      	ldr	r3, [pc, #4]	@ (800a794 <__errno+0x8>)
 800a78e:	6818      	ldr	r0, [r3, #0]
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	2000001c 	.word	0x2000001c

0800a798 <__libc_init_array>:
 800a798:	b570      	push	{r4, r5, r6, lr}
 800a79a:	4d0d      	ldr	r5, [pc, #52]	@ (800a7d0 <__libc_init_array+0x38>)
 800a79c:	4c0d      	ldr	r4, [pc, #52]	@ (800a7d4 <__libc_init_array+0x3c>)
 800a79e:	1b64      	subs	r4, r4, r5
 800a7a0:	10a4      	asrs	r4, r4, #2
 800a7a2:	2600      	movs	r6, #0
 800a7a4:	42a6      	cmp	r6, r4
 800a7a6:	d109      	bne.n	800a7bc <__libc_init_array+0x24>
 800a7a8:	4d0b      	ldr	r5, [pc, #44]	@ (800a7d8 <__libc_init_array+0x40>)
 800a7aa:	4c0c      	ldr	r4, [pc, #48]	@ (800a7dc <__libc_init_array+0x44>)
 800a7ac:	f002 fc10 	bl	800cfd0 <_init>
 800a7b0:	1b64      	subs	r4, r4, r5
 800a7b2:	10a4      	asrs	r4, r4, #2
 800a7b4:	2600      	movs	r6, #0
 800a7b6:	42a6      	cmp	r6, r4
 800a7b8:	d105      	bne.n	800a7c6 <__libc_init_array+0x2e>
 800a7ba:	bd70      	pop	{r4, r5, r6, pc}
 800a7bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7c0:	4798      	blx	r3
 800a7c2:	3601      	adds	r6, #1
 800a7c4:	e7ee      	b.n	800a7a4 <__libc_init_array+0xc>
 800a7c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ca:	4798      	blx	r3
 800a7cc:	3601      	adds	r6, #1
 800a7ce:	e7f2      	b.n	800a7b6 <__libc_init_array+0x1e>
 800a7d0:	08020a38 	.word	0x08020a38
 800a7d4:	08020a38 	.word	0x08020a38
 800a7d8:	08020a38 	.word	0x08020a38
 800a7dc:	08020a3c 	.word	0x08020a3c

0800a7e0 <__retarget_lock_init_recursive>:
 800a7e0:	4770      	bx	lr

0800a7e2 <__retarget_lock_acquire_recursive>:
 800a7e2:	4770      	bx	lr

0800a7e4 <__retarget_lock_release_recursive>:
 800a7e4:	4770      	bx	lr

0800a7e6 <memcpy>:
 800a7e6:	440a      	add	r2, r1
 800a7e8:	4291      	cmp	r1, r2
 800a7ea:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7ee:	d100      	bne.n	800a7f2 <memcpy+0xc>
 800a7f0:	4770      	bx	lr
 800a7f2:	b510      	push	{r4, lr}
 800a7f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7fc:	4291      	cmp	r1, r2
 800a7fe:	d1f9      	bne.n	800a7f4 <memcpy+0xe>
 800a800:	bd10      	pop	{r4, pc}

0800a802 <quorem>:
 800a802:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a806:	6903      	ldr	r3, [r0, #16]
 800a808:	690c      	ldr	r4, [r1, #16]
 800a80a:	42a3      	cmp	r3, r4
 800a80c:	4607      	mov	r7, r0
 800a80e:	db7e      	blt.n	800a90e <quorem+0x10c>
 800a810:	3c01      	subs	r4, #1
 800a812:	f101 0814 	add.w	r8, r1, #20
 800a816:	00a3      	lsls	r3, r4, #2
 800a818:	f100 0514 	add.w	r5, r0, #20
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a822:	9301      	str	r3, [sp, #4]
 800a824:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a828:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a82c:	3301      	adds	r3, #1
 800a82e:	429a      	cmp	r2, r3
 800a830:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a834:	fbb2 f6f3 	udiv	r6, r2, r3
 800a838:	d32e      	bcc.n	800a898 <quorem+0x96>
 800a83a:	f04f 0a00 	mov.w	sl, #0
 800a83e:	46c4      	mov	ip, r8
 800a840:	46ae      	mov	lr, r5
 800a842:	46d3      	mov	fp, sl
 800a844:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a848:	b298      	uxth	r0, r3
 800a84a:	fb06 a000 	mla	r0, r6, r0, sl
 800a84e:	0c02      	lsrs	r2, r0, #16
 800a850:	0c1b      	lsrs	r3, r3, #16
 800a852:	fb06 2303 	mla	r3, r6, r3, r2
 800a856:	f8de 2000 	ldr.w	r2, [lr]
 800a85a:	b280      	uxth	r0, r0
 800a85c:	b292      	uxth	r2, r2
 800a85e:	1a12      	subs	r2, r2, r0
 800a860:	445a      	add	r2, fp
 800a862:	f8de 0000 	ldr.w	r0, [lr]
 800a866:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a870:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a874:	b292      	uxth	r2, r2
 800a876:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a87a:	45e1      	cmp	r9, ip
 800a87c:	f84e 2b04 	str.w	r2, [lr], #4
 800a880:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a884:	d2de      	bcs.n	800a844 <quorem+0x42>
 800a886:	9b00      	ldr	r3, [sp, #0]
 800a888:	58eb      	ldr	r3, [r5, r3]
 800a88a:	b92b      	cbnz	r3, 800a898 <quorem+0x96>
 800a88c:	9b01      	ldr	r3, [sp, #4]
 800a88e:	3b04      	subs	r3, #4
 800a890:	429d      	cmp	r5, r3
 800a892:	461a      	mov	r2, r3
 800a894:	d32f      	bcc.n	800a8f6 <quorem+0xf4>
 800a896:	613c      	str	r4, [r7, #16]
 800a898:	4638      	mov	r0, r7
 800a89a:	f001 f90d 	bl	800bab8 <__mcmp>
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	db25      	blt.n	800a8ee <quorem+0xec>
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	f858 2b04 	ldr.w	r2, [r8], #4
 800a8aa:	f8d1 c000 	ldr.w	ip, [r1]
 800a8ae:	fa1f fe82 	uxth.w	lr, r2
 800a8b2:	fa1f f38c 	uxth.w	r3, ip
 800a8b6:	eba3 030e 	sub.w	r3, r3, lr
 800a8ba:	4403      	add	r3, r0
 800a8bc:	0c12      	lsrs	r2, r2, #16
 800a8be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a8c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a8c6:	b29b      	uxth	r3, r3
 800a8c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8cc:	45c1      	cmp	r9, r8
 800a8ce:	f841 3b04 	str.w	r3, [r1], #4
 800a8d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a8d6:	d2e6      	bcs.n	800a8a6 <quorem+0xa4>
 800a8d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a8dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a8e0:	b922      	cbnz	r2, 800a8ec <quorem+0xea>
 800a8e2:	3b04      	subs	r3, #4
 800a8e4:	429d      	cmp	r5, r3
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	d30b      	bcc.n	800a902 <quorem+0x100>
 800a8ea:	613c      	str	r4, [r7, #16]
 800a8ec:	3601      	adds	r6, #1
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	b003      	add	sp, #12
 800a8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f6:	6812      	ldr	r2, [r2, #0]
 800a8f8:	3b04      	subs	r3, #4
 800a8fa:	2a00      	cmp	r2, #0
 800a8fc:	d1cb      	bne.n	800a896 <quorem+0x94>
 800a8fe:	3c01      	subs	r4, #1
 800a900:	e7c6      	b.n	800a890 <quorem+0x8e>
 800a902:	6812      	ldr	r2, [r2, #0]
 800a904:	3b04      	subs	r3, #4
 800a906:	2a00      	cmp	r2, #0
 800a908:	d1ef      	bne.n	800a8ea <quorem+0xe8>
 800a90a:	3c01      	subs	r4, #1
 800a90c:	e7ea      	b.n	800a8e4 <quorem+0xe2>
 800a90e:	2000      	movs	r0, #0
 800a910:	e7ee      	b.n	800a8f0 <quorem+0xee>
 800a912:	0000      	movs	r0, r0
 800a914:	0000      	movs	r0, r0
	...

0800a918 <_dtoa_r>:
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	ed2d 8b02 	vpush	{d8}
 800a920:	69c7      	ldr	r7, [r0, #28]
 800a922:	b091      	sub	sp, #68	@ 0x44
 800a924:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a928:	ec55 4b10 	vmov	r4, r5, d0
 800a92c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a92e:	9107      	str	r1, [sp, #28]
 800a930:	4681      	mov	r9, r0
 800a932:	9209      	str	r2, [sp, #36]	@ 0x24
 800a934:	930d      	str	r3, [sp, #52]	@ 0x34
 800a936:	b97f      	cbnz	r7, 800a958 <_dtoa_r+0x40>
 800a938:	2010      	movs	r0, #16
 800a93a:	f000 fd95 	bl	800b468 <malloc>
 800a93e:	4602      	mov	r2, r0
 800a940:	f8c9 001c 	str.w	r0, [r9, #28]
 800a944:	b920      	cbnz	r0, 800a950 <_dtoa_r+0x38>
 800a946:	4ba0      	ldr	r3, [pc, #640]	@ (800abc8 <_dtoa_r+0x2b0>)
 800a948:	21ef      	movs	r1, #239	@ 0xef
 800a94a:	48a0      	ldr	r0, [pc, #640]	@ (800abcc <_dtoa_r+0x2b4>)
 800a94c:	f001 fa78 	bl	800be40 <__assert_func>
 800a950:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a954:	6007      	str	r7, [r0, #0]
 800a956:	60c7      	str	r7, [r0, #12]
 800a958:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a95c:	6819      	ldr	r1, [r3, #0]
 800a95e:	b159      	cbz	r1, 800a978 <_dtoa_r+0x60>
 800a960:	685a      	ldr	r2, [r3, #4]
 800a962:	604a      	str	r2, [r1, #4]
 800a964:	2301      	movs	r3, #1
 800a966:	4093      	lsls	r3, r2
 800a968:	608b      	str	r3, [r1, #8]
 800a96a:	4648      	mov	r0, r9
 800a96c:	f000 fe72 	bl	800b654 <_Bfree>
 800a970:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a974:	2200      	movs	r2, #0
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	1e2b      	subs	r3, r5, #0
 800a97a:	bfbb      	ittet	lt
 800a97c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a980:	9303      	strlt	r3, [sp, #12]
 800a982:	2300      	movge	r3, #0
 800a984:	2201      	movlt	r2, #1
 800a986:	bfac      	ite	ge
 800a988:	6033      	strge	r3, [r6, #0]
 800a98a:	6032      	strlt	r2, [r6, #0]
 800a98c:	4b90      	ldr	r3, [pc, #576]	@ (800abd0 <_dtoa_r+0x2b8>)
 800a98e:	9e03      	ldr	r6, [sp, #12]
 800a990:	43b3      	bics	r3, r6
 800a992:	d110      	bne.n	800a9b6 <_dtoa_r+0x9e>
 800a994:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a996:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a99a:	6013      	str	r3, [r2, #0]
 800a99c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a9a0:	4323      	orrs	r3, r4
 800a9a2:	f000 84e6 	beq.w	800b372 <_dtoa_r+0xa5a>
 800a9a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a9a8:	4f8a      	ldr	r7, [pc, #552]	@ (800abd4 <_dtoa_r+0x2bc>)
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 84e8 	beq.w	800b380 <_dtoa_r+0xa68>
 800a9b0:	1cfb      	adds	r3, r7, #3
 800a9b2:	f000 bce3 	b.w	800b37c <_dtoa_r+0xa64>
 800a9b6:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a9ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c2:	d10a      	bne.n	800a9da <_dtoa_r+0xc2>
 800a9c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	6013      	str	r3, [r2, #0]
 800a9ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a9cc:	b113      	cbz	r3, 800a9d4 <_dtoa_r+0xbc>
 800a9ce:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a9d0:	4b81      	ldr	r3, [pc, #516]	@ (800abd8 <_dtoa_r+0x2c0>)
 800a9d2:	6013      	str	r3, [r2, #0]
 800a9d4:	4f81      	ldr	r7, [pc, #516]	@ (800abdc <_dtoa_r+0x2c4>)
 800a9d6:	f000 bcd3 	b.w	800b380 <_dtoa_r+0xa68>
 800a9da:	aa0e      	add	r2, sp, #56	@ 0x38
 800a9dc:	a90f      	add	r1, sp, #60	@ 0x3c
 800a9de:	4648      	mov	r0, r9
 800a9e0:	eeb0 0b48 	vmov.f64	d0, d8
 800a9e4:	f001 f918 	bl	800bc18 <__d2b>
 800a9e8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a9ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9ee:	9001      	str	r0, [sp, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d045      	beq.n	800aa80 <_dtoa_r+0x168>
 800a9f4:	eeb0 7b48 	vmov.f64	d7, d8
 800a9f8:	ee18 1a90 	vmov	r1, s17
 800a9fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800aa00:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800aa04:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800aa08:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800aa0c:	2500      	movs	r5, #0
 800aa0e:	ee07 1a90 	vmov	s15, r1
 800aa12:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800aa16:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800abb0 <_dtoa_r+0x298>
 800aa1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aa1e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800abb8 <_dtoa_r+0x2a0>
 800aa22:	eea7 6b05 	vfma.f64	d6, d7, d5
 800aa26:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800abc0 <_dtoa_r+0x2a8>
 800aa2a:	ee07 3a90 	vmov	s15, r3
 800aa2e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800aa32:	eeb0 7b46 	vmov.f64	d7, d6
 800aa36:	eea4 7b05 	vfma.f64	d7, d4, d5
 800aa3a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800aa3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800aa42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa46:	ee16 8a90 	vmov	r8, s13
 800aa4a:	d508      	bpl.n	800aa5e <_dtoa_r+0x146>
 800aa4c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800aa50:	eeb4 6b47 	vcmp.f64	d6, d7
 800aa54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa58:	bf18      	it	ne
 800aa5a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800aa5e:	f1b8 0f16 	cmp.w	r8, #22
 800aa62:	d82b      	bhi.n	800aabc <_dtoa_r+0x1a4>
 800aa64:	495e      	ldr	r1, [pc, #376]	@ (800abe0 <_dtoa_r+0x2c8>)
 800aa66:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800aa6a:	ed91 7b00 	vldr	d7, [r1]
 800aa6e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800aa72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa76:	d501      	bpl.n	800aa7c <_dtoa_r+0x164>
 800aa78:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	e01e      	b.n	800aabe <_dtoa_r+0x1a6>
 800aa80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa82:	4413      	add	r3, r2
 800aa84:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800aa88:	2920      	cmp	r1, #32
 800aa8a:	bfc1      	itttt	gt
 800aa8c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800aa90:	408e      	lslgt	r6, r1
 800aa92:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800aa96:	fa24 f101 	lsrgt.w	r1, r4, r1
 800aa9a:	bfd6      	itet	le
 800aa9c:	f1c1 0120 	rsble	r1, r1, #32
 800aaa0:	4331      	orrgt	r1, r6
 800aaa2:	fa04 f101 	lslle.w	r1, r4, r1
 800aaa6:	ee07 1a90 	vmov	s15, r1
 800aaaa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800aaae:	3b01      	subs	r3, #1
 800aab0:	ee17 1a90 	vmov	r1, s15
 800aab4:	2501      	movs	r5, #1
 800aab6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800aaba:	e7a8      	b.n	800aa0e <_dtoa_r+0xf6>
 800aabc:	2101      	movs	r1, #1
 800aabe:	1ad2      	subs	r2, r2, r3
 800aac0:	1e53      	subs	r3, r2, #1
 800aac2:	9306      	str	r3, [sp, #24]
 800aac4:	bf45      	ittet	mi
 800aac6:	f1c2 0301 	rsbmi	r3, r2, #1
 800aaca:	9304      	strmi	r3, [sp, #16]
 800aacc:	2300      	movpl	r3, #0
 800aace:	2300      	movmi	r3, #0
 800aad0:	bf4c      	ite	mi
 800aad2:	9306      	strmi	r3, [sp, #24]
 800aad4:	9304      	strpl	r3, [sp, #16]
 800aad6:	f1b8 0f00 	cmp.w	r8, #0
 800aada:	910c      	str	r1, [sp, #48]	@ 0x30
 800aadc:	db18      	blt.n	800ab10 <_dtoa_r+0x1f8>
 800aade:	9b06      	ldr	r3, [sp, #24]
 800aae0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800aae4:	4443      	add	r3, r8
 800aae6:	9306      	str	r3, [sp, #24]
 800aae8:	2300      	movs	r3, #0
 800aaea:	9a07      	ldr	r2, [sp, #28]
 800aaec:	2a09      	cmp	r2, #9
 800aaee:	d845      	bhi.n	800ab7c <_dtoa_r+0x264>
 800aaf0:	2a05      	cmp	r2, #5
 800aaf2:	bfc4      	itt	gt
 800aaf4:	3a04      	subgt	r2, #4
 800aaf6:	9207      	strgt	r2, [sp, #28]
 800aaf8:	9a07      	ldr	r2, [sp, #28]
 800aafa:	f1a2 0202 	sub.w	r2, r2, #2
 800aafe:	bfcc      	ite	gt
 800ab00:	2400      	movgt	r4, #0
 800ab02:	2401      	movle	r4, #1
 800ab04:	2a03      	cmp	r2, #3
 800ab06:	d844      	bhi.n	800ab92 <_dtoa_r+0x27a>
 800ab08:	e8df f002 	tbb	[pc, r2]
 800ab0c:	0b173634 	.word	0x0b173634
 800ab10:	9b04      	ldr	r3, [sp, #16]
 800ab12:	2200      	movs	r2, #0
 800ab14:	eba3 0308 	sub.w	r3, r3, r8
 800ab18:	9304      	str	r3, [sp, #16]
 800ab1a:	920a      	str	r2, [sp, #40]	@ 0x28
 800ab1c:	f1c8 0300 	rsb	r3, r8, #0
 800ab20:	e7e3      	b.n	800aaea <_dtoa_r+0x1d2>
 800ab22:	2201      	movs	r2, #1
 800ab24:	9208      	str	r2, [sp, #32]
 800ab26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab28:	eb08 0b02 	add.w	fp, r8, r2
 800ab2c:	f10b 0a01 	add.w	sl, fp, #1
 800ab30:	4652      	mov	r2, sl
 800ab32:	2a01      	cmp	r2, #1
 800ab34:	bfb8      	it	lt
 800ab36:	2201      	movlt	r2, #1
 800ab38:	e006      	b.n	800ab48 <_dtoa_r+0x230>
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	9208      	str	r2, [sp, #32]
 800ab3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab40:	2a00      	cmp	r2, #0
 800ab42:	dd29      	ble.n	800ab98 <_dtoa_r+0x280>
 800ab44:	4693      	mov	fp, r2
 800ab46:	4692      	mov	sl, r2
 800ab48:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	2004      	movs	r0, #4
 800ab50:	f100 0614 	add.w	r6, r0, #20
 800ab54:	4296      	cmp	r6, r2
 800ab56:	d926      	bls.n	800aba6 <_dtoa_r+0x28e>
 800ab58:	6079      	str	r1, [r7, #4]
 800ab5a:	4648      	mov	r0, r9
 800ab5c:	9305      	str	r3, [sp, #20]
 800ab5e:	f000 fd39 	bl	800b5d4 <_Balloc>
 800ab62:	9b05      	ldr	r3, [sp, #20]
 800ab64:	4607      	mov	r7, r0
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d13e      	bne.n	800abe8 <_dtoa_r+0x2d0>
 800ab6a:	4b1e      	ldr	r3, [pc, #120]	@ (800abe4 <_dtoa_r+0x2cc>)
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ab72:	e6ea      	b.n	800a94a <_dtoa_r+0x32>
 800ab74:	2200      	movs	r2, #0
 800ab76:	e7e1      	b.n	800ab3c <_dtoa_r+0x224>
 800ab78:	2200      	movs	r2, #0
 800ab7a:	e7d3      	b.n	800ab24 <_dtoa_r+0x20c>
 800ab7c:	2401      	movs	r4, #1
 800ab7e:	2200      	movs	r2, #0
 800ab80:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ab84:	f04f 3bff 	mov.w	fp, #4294967295
 800ab88:	2100      	movs	r1, #0
 800ab8a:	46da      	mov	sl, fp
 800ab8c:	2212      	movs	r2, #18
 800ab8e:	9109      	str	r1, [sp, #36]	@ 0x24
 800ab90:	e7da      	b.n	800ab48 <_dtoa_r+0x230>
 800ab92:	2201      	movs	r2, #1
 800ab94:	9208      	str	r2, [sp, #32]
 800ab96:	e7f5      	b.n	800ab84 <_dtoa_r+0x26c>
 800ab98:	f04f 0b01 	mov.w	fp, #1
 800ab9c:	46da      	mov	sl, fp
 800ab9e:	465a      	mov	r2, fp
 800aba0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800aba4:	e7d0      	b.n	800ab48 <_dtoa_r+0x230>
 800aba6:	3101      	adds	r1, #1
 800aba8:	0040      	lsls	r0, r0, #1
 800abaa:	e7d1      	b.n	800ab50 <_dtoa_r+0x238>
 800abac:	f3af 8000 	nop.w
 800abb0:	636f4361 	.word	0x636f4361
 800abb4:	3fd287a7 	.word	0x3fd287a7
 800abb8:	8b60c8b3 	.word	0x8b60c8b3
 800abbc:	3fc68a28 	.word	0x3fc68a28
 800abc0:	509f79fb 	.word	0x509f79fb
 800abc4:	3fd34413 	.word	0x3fd34413
 800abc8:	08020521 	.word	0x08020521
 800abcc:	08020538 	.word	0x08020538
 800abd0:	7ff00000 	.word	0x7ff00000
 800abd4:	0802051d 	.word	0x0802051d
 800abd8:	080204f1 	.word	0x080204f1
 800abdc:	080204f0 	.word	0x080204f0
 800abe0:	08020688 	.word	0x08020688
 800abe4:	08020590 	.word	0x08020590
 800abe8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800abec:	f1ba 0f0e 	cmp.w	sl, #14
 800abf0:	6010      	str	r0, [r2, #0]
 800abf2:	d86e      	bhi.n	800acd2 <_dtoa_r+0x3ba>
 800abf4:	2c00      	cmp	r4, #0
 800abf6:	d06c      	beq.n	800acd2 <_dtoa_r+0x3ba>
 800abf8:	f1b8 0f00 	cmp.w	r8, #0
 800abfc:	f340 80b4 	ble.w	800ad68 <_dtoa_r+0x450>
 800ac00:	4ac8      	ldr	r2, [pc, #800]	@ (800af24 <_dtoa_r+0x60c>)
 800ac02:	f008 010f 	and.w	r1, r8, #15
 800ac06:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ac0a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ac0e:	ed92 7b00 	vldr	d7, [r2]
 800ac12:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ac16:	f000 809b 	beq.w	800ad50 <_dtoa_r+0x438>
 800ac1a:	4ac3      	ldr	r2, [pc, #780]	@ (800af28 <_dtoa_r+0x610>)
 800ac1c:	ed92 6b08 	vldr	d6, [r2, #32]
 800ac20:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ac24:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ac28:	f001 010f 	and.w	r1, r1, #15
 800ac2c:	2203      	movs	r2, #3
 800ac2e:	48be      	ldr	r0, [pc, #760]	@ (800af28 <_dtoa_r+0x610>)
 800ac30:	2900      	cmp	r1, #0
 800ac32:	f040 808f 	bne.w	800ad54 <_dtoa_r+0x43c>
 800ac36:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ac3a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ac3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac42:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ac44:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac48:	2900      	cmp	r1, #0
 800ac4a:	f000 80b3 	beq.w	800adb4 <_dtoa_r+0x49c>
 800ac4e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ac52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ac56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac5a:	f140 80ab 	bpl.w	800adb4 <_dtoa_r+0x49c>
 800ac5e:	f1ba 0f00 	cmp.w	sl, #0
 800ac62:	f000 80a7 	beq.w	800adb4 <_dtoa_r+0x49c>
 800ac66:	f1bb 0f00 	cmp.w	fp, #0
 800ac6a:	dd30      	ble.n	800acce <_dtoa_r+0x3b6>
 800ac6c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ac70:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac74:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac78:	f108 31ff 	add.w	r1, r8, #4294967295
 800ac7c:	9105      	str	r1, [sp, #20]
 800ac7e:	3201      	adds	r2, #1
 800ac80:	465c      	mov	r4, fp
 800ac82:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ac86:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ac8a:	ee07 2a90 	vmov	s15, r2
 800ac8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ac92:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ac96:	ee15 2a90 	vmov	r2, s11
 800ac9a:	ec51 0b15 	vmov	r0, r1, d5
 800ac9e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800aca2:	2c00      	cmp	r4, #0
 800aca4:	f040 808a 	bne.w	800adbc <_dtoa_r+0x4a4>
 800aca8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800acac:	ee36 6b47 	vsub.f64	d6, d6, d7
 800acb0:	ec41 0b17 	vmov	d7, r0, r1
 800acb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800acb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acbc:	f300 826a 	bgt.w	800b194 <_dtoa_r+0x87c>
 800acc0:	eeb1 7b47 	vneg.f64	d7, d7
 800acc4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800acc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800accc:	d423      	bmi.n	800ad16 <_dtoa_r+0x3fe>
 800acce:	ed8d 8b02 	vstr	d8, [sp, #8]
 800acd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800acd4:	2a00      	cmp	r2, #0
 800acd6:	f2c0 8129 	blt.w	800af2c <_dtoa_r+0x614>
 800acda:	f1b8 0f0e 	cmp.w	r8, #14
 800acde:	f300 8125 	bgt.w	800af2c <_dtoa_r+0x614>
 800ace2:	4b90      	ldr	r3, [pc, #576]	@ (800af24 <_dtoa_r+0x60c>)
 800ace4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ace8:	ed93 6b00 	vldr	d6, [r3]
 800acec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f280 80c8 	bge.w	800ae84 <_dtoa_r+0x56c>
 800acf4:	f1ba 0f00 	cmp.w	sl, #0
 800acf8:	f300 80c4 	bgt.w	800ae84 <_dtoa_r+0x56c>
 800acfc:	d10b      	bne.n	800ad16 <_dtoa_r+0x3fe>
 800acfe:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ad02:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ad06:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ad0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad12:	f2c0 823c 	blt.w	800b18e <_dtoa_r+0x876>
 800ad16:	2400      	movs	r4, #0
 800ad18:	4625      	mov	r5, r4
 800ad1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad1c:	43db      	mvns	r3, r3
 800ad1e:	9305      	str	r3, [sp, #20]
 800ad20:	463e      	mov	r6, r7
 800ad22:	f04f 0800 	mov.w	r8, #0
 800ad26:	4621      	mov	r1, r4
 800ad28:	4648      	mov	r0, r9
 800ad2a:	f000 fc93 	bl	800b654 <_Bfree>
 800ad2e:	2d00      	cmp	r5, #0
 800ad30:	f000 80a2 	beq.w	800ae78 <_dtoa_r+0x560>
 800ad34:	f1b8 0f00 	cmp.w	r8, #0
 800ad38:	d005      	beq.n	800ad46 <_dtoa_r+0x42e>
 800ad3a:	45a8      	cmp	r8, r5
 800ad3c:	d003      	beq.n	800ad46 <_dtoa_r+0x42e>
 800ad3e:	4641      	mov	r1, r8
 800ad40:	4648      	mov	r0, r9
 800ad42:	f000 fc87 	bl	800b654 <_Bfree>
 800ad46:	4629      	mov	r1, r5
 800ad48:	4648      	mov	r0, r9
 800ad4a:	f000 fc83 	bl	800b654 <_Bfree>
 800ad4e:	e093      	b.n	800ae78 <_dtoa_r+0x560>
 800ad50:	2202      	movs	r2, #2
 800ad52:	e76c      	b.n	800ac2e <_dtoa_r+0x316>
 800ad54:	07cc      	lsls	r4, r1, #31
 800ad56:	d504      	bpl.n	800ad62 <_dtoa_r+0x44a>
 800ad58:	ed90 6b00 	vldr	d6, [r0]
 800ad5c:	3201      	adds	r2, #1
 800ad5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad62:	1049      	asrs	r1, r1, #1
 800ad64:	3008      	adds	r0, #8
 800ad66:	e763      	b.n	800ac30 <_dtoa_r+0x318>
 800ad68:	d022      	beq.n	800adb0 <_dtoa_r+0x498>
 800ad6a:	f1c8 0100 	rsb	r1, r8, #0
 800ad6e:	4a6d      	ldr	r2, [pc, #436]	@ (800af24 <_dtoa_r+0x60c>)
 800ad70:	f001 000f 	and.w	r0, r1, #15
 800ad74:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ad78:	ed92 7b00 	vldr	d7, [r2]
 800ad7c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ad80:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad84:	4868      	ldr	r0, [pc, #416]	@ (800af28 <_dtoa_r+0x610>)
 800ad86:	1109      	asrs	r1, r1, #4
 800ad88:	2400      	movs	r4, #0
 800ad8a:	2202      	movs	r2, #2
 800ad8c:	b929      	cbnz	r1, 800ad9a <_dtoa_r+0x482>
 800ad8e:	2c00      	cmp	r4, #0
 800ad90:	f43f af57 	beq.w	800ac42 <_dtoa_r+0x32a>
 800ad94:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ad98:	e753      	b.n	800ac42 <_dtoa_r+0x32a>
 800ad9a:	07ce      	lsls	r6, r1, #31
 800ad9c:	d505      	bpl.n	800adaa <_dtoa_r+0x492>
 800ad9e:	ed90 6b00 	vldr	d6, [r0]
 800ada2:	3201      	adds	r2, #1
 800ada4:	2401      	movs	r4, #1
 800ada6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800adaa:	1049      	asrs	r1, r1, #1
 800adac:	3008      	adds	r0, #8
 800adae:	e7ed      	b.n	800ad8c <_dtoa_r+0x474>
 800adb0:	2202      	movs	r2, #2
 800adb2:	e746      	b.n	800ac42 <_dtoa_r+0x32a>
 800adb4:	f8cd 8014 	str.w	r8, [sp, #20]
 800adb8:	4654      	mov	r4, sl
 800adba:	e762      	b.n	800ac82 <_dtoa_r+0x36a>
 800adbc:	4a59      	ldr	r2, [pc, #356]	@ (800af24 <_dtoa_r+0x60c>)
 800adbe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800adc2:	ed12 4b02 	vldr	d4, [r2, #-8]
 800adc6:	9a08      	ldr	r2, [sp, #32]
 800adc8:	ec41 0b17 	vmov	d7, r0, r1
 800adcc:	443c      	add	r4, r7
 800adce:	b34a      	cbz	r2, 800ae24 <_dtoa_r+0x50c>
 800add0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800add4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800add8:	463e      	mov	r6, r7
 800adda:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800adde:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ade2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ade6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800adea:	ee14 2a90 	vmov	r2, s9
 800adee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800adf2:	3230      	adds	r2, #48	@ 0x30
 800adf4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800adf8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800adfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae00:	f806 2b01 	strb.w	r2, [r6], #1
 800ae04:	d438      	bmi.n	800ae78 <_dtoa_r+0x560>
 800ae06:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ae0a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ae0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae12:	d46e      	bmi.n	800aef2 <_dtoa_r+0x5da>
 800ae14:	42a6      	cmp	r6, r4
 800ae16:	f43f af5a 	beq.w	800acce <_dtoa_r+0x3b6>
 800ae1a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ae1e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ae22:	e7e0      	b.n	800ade6 <_dtoa_r+0x4ce>
 800ae24:	4621      	mov	r1, r4
 800ae26:	463e      	mov	r6, r7
 800ae28:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ae2c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ae30:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ae34:	ee14 2a90 	vmov	r2, s9
 800ae38:	3230      	adds	r2, #48	@ 0x30
 800ae3a:	f806 2b01 	strb.w	r2, [r6], #1
 800ae3e:	42a6      	cmp	r6, r4
 800ae40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ae44:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ae48:	d119      	bne.n	800ae7e <_dtoa_r+0x566>
 800ae4a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800ae4e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ae52:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ae56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae5a:	dc4a      	bgt.n	800aef2 <_dtoa_r+0x5da>
 800ae5c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ae60:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ae64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae68:	f57f af31 	bpl.w	800acce <_dtoa_r+0x3b6>
 800ae6c:	460e      	mov	r6, r1
 800ae6e:	3901      	subs	r1, #1
 800ae70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae74:	2b30      	cmp	r3, #48	@ 0x30
 800ae76:	d0f9      	beq.n	800ae6c <_dtoa_r+0x554>
 800ae78:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ae7c:	e027      	b.n	800aece <_dtoa_r+0x5b6>
 800ae7e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ae82:	e7d5      	b.n	800ae30 <_dtoa_r+0x518>
 800ae84:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae88:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ae8c:	463e      	mov	r6, r7
 800ae8e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ae92:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ae96:	ee15 3a10 	vmov	r3, s10
 800ae9a:	3330      	adds	r3, #48	@ 0x30
 800ae9c:	f806 3b01 	strb.w	r3, [r6], #1
 800aea0:	1bf3      	subs	r3, r6, r7
 800aea2:	459a      	cmp	sl, r3
 800aea4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800aea8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800aeac:	d132      	bne.n	800af14 <_dtoa_r+0x5fc>
 800aeae:	ee37 7b07 	vadd.f64	d7, d7, d7
 800aeb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aeb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeba:	dc18      	bgt.n	800aeee <_dtoa_r+0x5d6>
 800aebc:	eeb4 7b46 	vcmp.f64	d7, d6
 800aec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aec4:	d103      	bne.n	800aece <_dtoa_r+0x5b6>
 800aec6:	ee15 3a10 	vmov	r3, s10
 800aeca:	07db      	lsls	r3, r3, #31
 800aecc:	d40f      	bmi.n	800aeee <_dtoa_r+0x5d6>
 800aece:	9901      	ldr	r1, [sp, #4]
 800aed0:	4648      	mov	r0, r9
 800aed2:	f000 fbbf 	bl	800b654 <_Bfree>
 800aed6:	2300      	movs	r3, #0
 800aed8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aeda:	7033      	strb	r3, [r6, #0]
 800aedc:	f108 0301 	add.w	r3, r8, #1
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f000 824b 	beq.w	800b380 <_dtoa_r+0xa68>
 800aeea:	601e      	str	r6, [r3, #0]
 800aeec:	e248      	b.n	800b380 <_dtoa_r+0xa68>
 800aeee:	f8cd 8014 	str.w	r8, [sp, #20]
 800aef2:	4633      	mov	r3, r6
 800aef4:	461e      	mov	r6, r3
 800aef6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aefa:	2a39      	cmp	r2, #57	@ 0x39
 800aefc:	d106      	bne.n	800af0c <_dtoa_r+0x5f4>
 800aefe:	429f      	cmp	r7, r3
 800af00:	d1f8      	bne.n	800aef4 <_dtoa_r+0x5dc>
 800af02:	9a05      	ldr	r2, [sp, #20]
 800af04:	3201      	adds	r2, #1
 800af06:	9205      	str	r2, [sp, #20]
 800af08:	2230      	movs	r2, #48	@ 0x30
 800af0a:	703a      	strb	r2, [r7, #0]
 800af0c:	781a      	ldrb	r2, [r3, #0]
 800af0e:	3201      	adds	r2, #1
 800af10:	701a      	strb	r2, [r3, #0]
 800af12:	e7b1      	b.n	800ae78 <_dtoa_r+0x560>
 800af14:	ee27 7b04 	vmul.f64	d7, d7, d4
 800af18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af20:	d1b5      	bne.n	800ae8e <_dtoa_r+0x576>
 800af22:	e7d4      	b.n	800aece <_dtoa_r+0x5b6>
 800af24:	08020688 	.word	0x08020688
 800af28:	08020660 	.word	0x08020660
 800af2c:	9908      	ldr	r1, [sp, #32]
 800af2e:	2900      	cmp	r1, #0
 800af30:	f000 80e9 	beq.w	800b106 <_dtoa_r+0x7ee>
 800af34:	9907      	ldr	r1, [sp, #28]
 800af36:	2901      	cmp	r1, #1
 800af38:	f300 80cb 	bgt.w	800b0d2 <_dtoa_r+0x7ba>
 800af3c:	2d00      	cmp	r5, #0
 800af3e:	f000 80c4 	beq.w	800b0ca <_dtoa_r+0x7b2>
 800af42:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800af46:	9e04      	ldr	r6, [sp, #16]
 800af48:	461c      	mov	r4, r3
 800af4a:	9305      	str	r3, [sp, #20]
 800af4c:	9b04      	ldr	r3, [sp, #16]
 800af4e:	4413      	add	r3, r2
 800af50:	9304      	str	r3, [sp, #16]
 800af52:	9b06      	ldr	r3, [sp, #24]
 800af54:	2101      	movs	r1, #1
 800af56:	4413      	add	r3, r2
 800af58:	4648      	mov	r0, r9
 800af5a:	9306      	str	r3, [sp, #24]
 800af5c:	f000 fc2e 	bl	800b7bc <__i2b>
 800af60:	9b05      	ldr	r3, [sp, #20]
 800af62:	4605      	mov	r5, r0
 800af64:	b166      	cbz	r6, 800af80 <_dtoa_r+0x668>
 800af66:	9a06      	ldr	r2, [sp, #24]
 800af68:	2a00      	cmp	r2, #0
 800af6a:	dd09      	ble.n	800af80 <_dtoa_r+0x668>
 800af6c:	42b2      	cmp	r2, r6
 800af6e:	9904      	ldr	r1, [sp, #16]
 800af70:	bfa8      	it	ge
 800af72:	4632      	movge	r2, r6
 800af74:	1a89      	subs	r1, r1, r2
 800af76:	9104      	str	r1, [sp, #16]
 800af78:	9906      	ldr	r1, [sp, #24]
 800af7a:	1ab6      	subs	r6, r6, r2
 800af7c:	1a8a      	subs	r2, r1, r2
 800af7e:	9206      	str	r2, [sp, #24]
 800af80:	b30b      	cbz	r3, 800afc6 <_dtoa_r+0x6ae>
 800af82:	9a08      	ldr	r2, [sp, #32]
 800af84:	2a00      	cmp	r2, #0
 800af86:	f000 80c5 	beq.w	800b114 <_dtoa_r+0x7fc>
 800af8a:	2c00      	cmp	r4, #0
 800af8c:	f000 80bf 	beq.w	800b10e <_dtoa_r+0x7f6>
 800af90:	4629      	mov	r1, r5
 800af92:	4622      	mov	r2, r4
 800af94:	4648      	mov	r0, r9
 800af96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af98:	f000 fcc8 	bl	800b92c <__pow5mult>
 800af9c:	9a01      	ldr	r2, [sp, #4]
 800af9e:	4601      	mov	r1, r0
 800afa0:	4605      	mov	r5, r0
 800afa2:	4648      	mov	r0, r9
 800afa4:	f000 fc20 	bl	800b7e8 <__multiply>
 800afa8:	9901      	ldr	r1, [sp, #4]
 800afaa:	9005      	str	r0, [sp, #20]
 800afac:	4648      	mov	r0, r9
 800afae:	f000 fb51 	bl	800b654 <_Bfree>
 800afb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afb4:	1b1b      	subs	r3, r3, r4
 800afb6:	f000 80b0 	beq.w	800b11a <_dtoa_r+0x802>
 800afba:	9905      	ldr	r1, [sp, #20]
 800afbc:	461a      	mov	r2, r3
 800afbe:	4648      	mov	r0, r9
 800afc0:	f000 fcb4 	bl	800b92c <__pow5mult>
 800afc4:	9001      	str	r0, [sp, #4]
 800afc6:	2101      	movs	r1, #1
 800afc8:	4648      	mov	r0, r9
 800afca:	f000 fbf7 	bl	800b7bc <__i2b>
 800afce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afd0:	4604      	mov	r4, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f000 81da 	beq.w	800b38c <_dtoa_r+0xa74>
 800afd8:	461a      	mov	r2, r3
 800afda:	4601      	mov	r1, r0
 800afdc:	4648      	mov	r0, r9
 800afde:	f000 fca5 	bl	800b92c <__pow5mult>
 800afe2:	9b07      	ldr	r3, [sp, #28]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	4604      	mov	r4, r0
 800afe8:	f300 80a0 	bgt.w	800b12c <_dtoa_r+0x814>
 800afec:	9b02      	ldr	r3, [sp, #8]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f040 8096 	bne.w	800b120 <_dtoa_r+0x808>
 800aff4:	9b03      	ldr	r3, [sp, #12]
 800aff6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800affa:	2a00      	cmp	r2, #0
 800affc:	f040 8092 	bne.w	800b124 <_dtoa_r+0x80c>
 800b000:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b004:	0d12      	lsrs	r2, r2, #20
 800b006:	0512      	lsls	r2, r2, #20
 800b008:	2a00      	cmp	r2, #0
 800b00a:	f000 808d 	beq.w	800b128 <_dtoa_r+0x810>
 800b00e:	9b04      	ldr	r3, [sp, #16]
 800b010:	3301      	adds	r3, #1
 800b012:	9304      	str	r3, [sp, #16]
 800b014:	9b06      	ldr	r3, [sp, #24]
 800b016:	3301      	adds	r3, #1
 800b018:	9306      	str	r3, [sp, #24]
 800b01a:	2301      	movs	r3, #1
 800b01c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b01e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b020:	2b00      	cmp	r3, #0
 800b022:	f000 81b9 	beq.w	800b398 <_dtoa_r+0xa80>
 800b026:	6922      	ldr	r2, [r4, #16]
 800b028:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b02c:	6910      	ldr	r0, [r2, #16]
 800b02e:	f000 fb79 	bl	800b724 <__hi0bits>
 800b032:	f1c0 0020 	rsb	r0, r0, #32
 800b036:	9b06      	ldr	r3, [sp, #24]
 800b038:	4418      	add	r0, r3
 800b03a:	f010 001f 	ands.w	r0, r0, #31
 800b03e:	f000 8081 	beq.w	800b144 <_dtoa_r+0x82c>
 800b042:	f1c0 0220 	rsb	r2, r0, #32
 800b046:	2a04      	cmp	r2, #4
 800b048:	dd73      	ble.n	800b132 <_dtoa_r+0x81a>
 800b04a:	9b04      	ldr	r3, [sp, #16]
 800b04c:	f1c0 001c 	rsb	r0, r0, #28
 800b050:	4403      	add	r3, r0
 800b052:	9304      	str	r3, [sp, #16]
 800b054:	9b06      	ldr	r3, [sp, #24]
 800b056:	4406      	add	r6, r0
 800b058:	4403      	add	r3, r0
 800b05a:	9306      	str	r3, [sp, #24]
 800b05c:	9b04      	ldr	r3, [sp, #16]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	dd05      	ble.n	800b06e <_dtoa_r+0x756>
 800b062:	9901      	ldr	r1, [sp, #4]
 800b064:	461a      	mov	r2, r3
 800b066:	4648      	mov	r0, r9
 800b068:	f000 fcba 	bl	800b9e0 <__lshift>
 800b06c:	9001      	str	r0, [sp, #4]
 800b06e:	9b06      	ldr	r3, [sp, #24]
 800b070:	2b00      	cmp	r3, #0
 800b072:	dd05      	ble.n	800b080 <_dtoa_r+0x768>
 800b074:	4621      	mov	r1, r4
 800b076:	461a      	mov	r2, r3
 800b078:	4648      	mov	r0, r9
 800b07a:	f000 fcb1 	bl	800b9e0 <__lshift>
 800b07e:	4604      	mov	r4, r0
 800b080:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b082:	2b00      	cmp	r3, #0
 800b084:	d060      	beq.n	800b148 <_dtoa_r+0x830>
 800b086:	9801      	ldr	r0, [sp, #4]
 800b088:	4621      	mov	r1, r4
 800b08a:	f000 fd15 	bl	800bab8 <__mcmp>
 800b08e:	2800      	cmp	r0, #0
 800b090:	da5a      	bge.n	800b148 <_dtoa_r+0x830>
 800b092:	f108 33ff 	add.w	r3, r8, #4294967295
 800b096:	9305      	str	r3, [sp, #20]
 800b098:	9901      	ldr	r1, [sp, #4]
 800b09a:	2300      	movs	r3, #0
 800b09c:	220a      	movs	r2, #10
 800b09e:	4648      	mov	r0, r9
 800b0a0:	f000 fafa 	bl	800b698 <__multadd>
 800b0a4:	9b08      	ldr	r3, [sp, #32]
 800b0a6:	9001      	str	r0, [sp, #4]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 8177 	beq.w	800b39c <_dtoa_r+0xa84>
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	220a      	movs	r2, #10
 800b0b4:	4648      	mov	r0, r9
 800b0b6:	f000 faef 	bl	800b698 <__multadd>
 800b0ba:	f1bb 0f00 	cmp.w	fp, #0
 800b0be:	4605      	mov	r5, r0
 800b0c0:	dc6e      	bgt.n	800b1a0 <_dtoa_r+0x888>
 800b0c2:	9b07      	ldr	r3, [sp, #28]
 800b0c4:	2b02      	cmp	r3, #2
 800b0c6:	dc48      	bgt.n	800b15a <_dtoa_r+0x842>
 800b0c8:	e06a      	b.n	800b1a0 <_dtoa_r+0x888>
 800b0ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b0d0:	e739      	b.n	800af46 <_dtoa_r+0x62e>
 800b0d2:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b0d6:	42a3      	cmp	r3, r4
 800b0d8:	db07      	blt.n	800b0ea <_dtoa_r+0x7d2>
 800b0da:	f1ba 0f00 	cmp.w	sl, #0
 800b0de:	eba3 0404 	sub.w	r4, r3, r4
 800b0e2:	db0b      	blt.n	800b0fc <_dtoa_r+0x7e4>
 800b0e4:	9e04      	ldr	r6, [sp, #16]
 800b0e6:	4652      	mov	r2, sl
 800b0e8:	e72f      	b.n	800af4a <_dtoa_r+0x632>
 800b0ea:	1ae2      	subs	r2, r4, r3
 800b0ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b0ee:	9e04      	ldr	r6, [sp, #16]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0f4:	4652      	mov	r2, sl
 800b0f6:	4623      	mov	r3, r4
 800b0f8:	2400      	movs	r4, #0
 800b0fa:	e726      	b.n	800af4a <_dtoa_r+0x632>
 800b0fc:	9a04      	ldr	r2, [sp, #16]
 800b0fe:	eba2 060a 	sub.w	r6, r2, sl
 800b102:	2200      	movs	r2, #0
 800b104:	e721      	b.n	800af4a <_dtoa_r+0x632>
 800b106:	9e04      	ldr	r6, [sp, #16]
 800b108:	9d08      	ldr	r5, [sp, #32]
 800b10a:	461c      	mov	r4, r3
 800b10c:	e72a      	b.n	800af64 <_dtoa_r+0x64c>
 800b10e:	9a01      	ldr	r2, [sp, #4]
 800b110:	9205      	str	r2, [sp, #20]
 800b112:	e752      	b.n	800afba <_dtoa_r+0x6a2>
 800b114:	9901      	ldr	r1, [sp, #4]
 800b116:	461a      	mov	r2, r3
 800b118:	e751      	b.n	800afbe <_dtoa_r+0x6a6>
 800b11a:	9b05      	ldr	r3, [sp, #20]
 800b11c:	9301      	str	r3, [sp, #4]
 800b11e:	e752      	b.n	800afc6 <_dtoa_r+0x6ae>
 800b120:	2300      	movs	r3, #0
 800b122:	e77b      	b.n	800b01c <_dtoa_r+0x704>
 800b124:	9b02      	ldr	r3, [sp, #8]
 800b126:	e779      	b.n	800b01c <_dtoa_r+0x704>
 800b128:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b12a:	e778      	b.n	800b01e <_dtoa_r+0x706>
 800b12c:	2300      	movs	r3, #0
 800b12e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b130:	e779      	b.n	800b026 <_dtoa_r+0x70e>
 800b132:	d093      	beq.n	800b05c <_dtoa_r+0x744>
 800b134:	9b04      	ldr	r3, [sp, #16]
 800b136:	321c      	adds	r2, #28
 800b138:	4413      	add	r3, r2
 800b13a:	9304      	str	r3, [sp, #16]
 800b13c:	9b06      	ldr	r3, [sp, #24]
 800b13e:	4416      	add	r6, r2
 800b140:	4413      	add	r3, r2
 800b142:	e78a      	b.n	800b05a <_dtoa_r+0x742>
 800b144:	4602      	mov	r2, r0
 800b146:	e7f5      	b.n	800b134 <_dtoa_r+0x81c>
 800b148:	f1ba 0f00 	cmp.w	sl, #0
 800b14c:	f8cd 8014 	str.w	r8, [sp, #20]
 800b150:	46d3      	mov	fp, sl
 800b152:	dc21      	bgt.n	800b198 <_dtoa_r+0x880>
 800b154:	9b07      	ldr	r3, [sp, #28]
 800b156:	2b02      	cmp	r3, #2
 800b158:	dd1e      	ble.n	800b198 <_dtoa_r+0x880>
 800b15a:	f1bb 0f00 	cmp.w	fp, #0
 800b15e:	f47f addc 	bne.w	800ad1a <_dtoa_r+0x402>
 800b162:	4621      	mov	r1, r4
 800b164:	465b      	mov	r3, fp
 800b166:	2205      	movs	r2, #5
 800b168:	4648      	mov	r0, r9
 800b16a:	f000 fa95 	bl	800b698 <__multadd>
 800b16e:	4601      	mov	r1, r0
 800b170:	4604      	mov	r4, r0
 800b172:	9801      	ldr	r0, [sp, #4]
 800b174:	f000 fca0 	bl	800bab8 <__mcmp>
 800b178:	2800      	cmp	r0, #0
 800b17a:	f77f adce 	ble.w	800ad1a <_dtoa_r+0x402>
 800b17e:	463e      	mov	r6, r7
 800b180:	2331      	movs	r3, #49	@ 0x31
 800b182:	f806 3b01 	strb.w	r3, [r6], #1
 800b186:	9b05      	ldr	r3, [sp, #20]
 800b188:	3301      	adds	r3, #1
 800b18a:	9305      	str	r3, [sp, #20]
 800b18c:	e5c9      	b.n	800ad22 <_dtoa_r+0x40a>
 800b18e:	f8cd 8014 	str.w	r8, [sp, #20]
 800b192:	4654      	mov	r4, sl
 800b194:	4625      	mov	r5, r4
 800b196:	e7f2      	b.n	800b17e <_dtoa_r+0x866>
 800b198:	9b08      	ldr	r3, [sp, #32]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f000 8102 	beq.w	800b3a4 <_dtoa_r+0xa8c>
 800b1a0:	2e00      	cmp	r6, #0
 800b1a2:	dd05      	ble.n	800b1b0 <_dtoa_r+0x898>
 800b1a4:	4629      	mov	r1, r5
 800b1a6:	4632      	mov	r2, r6
 800b1a8:	4648      	mov	r0, r9
 800b1aa:	f000 fc19 	bl	800b9e0 <__lshift>
 800b1ae:	4605      	mov	r5, r0
 800b1b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d058      	beq.n	800b268 <_dtoa_r+0x950>
 800b1b6:	6869      	ldr	r1, [r5, #4]
 800b1b8:	4648      	mov	r0, r9
 800b1ba:	f000 fa0b 	bl	800b5d4 <_Balloc>
 800b1be:	4606      	mov	r6, r0
 800b1c0:	b928      	cbnz	r0, 800b1ce <_dtoa_r+0x8b6>
 800b1c2:	4b82      	ldr	r3, [pc, #520]	@ (800b3cc <_dtoa_r+0xab4>)
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b1ca:	f7ff bbbe 	b.w	800a94a <_dtoa_r+0x32>
 800b1ce:	692a      	ldr	r2, [r5, #16]
 800b1d0:	3202      	adds	r2, #2
 800b1d2:	0092      	lsls	r2, r2, #2
 800b1d4:	f105 010c 	add.w	r1, r5, #12
 800b1d8:	300c      	adds	r0, #12
 800b1da:	f7ff fb04 	bl	800a7e6 <memcpy>
 800b1de:	2201      	movs	r2, #1
 800b1e0:	4631      	mov	r1, r6
 800b1e2:	4648      	mov	r0, r9
 800b1e4:	f000 fbfc 	bl	800b9e0 <__lshift>
 800b1e8:	1c7b      	adds	r3, r7, #1
 800b1ea:	9304      	str	r3, [sp, #16]
 800b1ec:	eb07 030b 	add.w	r3, r7, fp
 800b1f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1f2:	9b02      	ldr	r3, [sp, #8]
 800b1f4:	f003 0301 	and.w	r3, r3, #1
 800b1f8:	46a8      	mov	r8, r5
 800b1fa:	9308      	str	r3, [sp, #32]
 800b1fc:	4605      	mov	r5, r0
 800b1fe:	9b04      	ldr	r3, [sp, #16]
 800b200:	9801      	ldr	r0, [sp, #4]
 800b202:	4621      	mov	r1, r4
 800b204:	f103 3bff 	add.w	fp, r3, #4294967295
 800b208:	f7ff fafb 	bl	800a802 <quorem>
 800b20c:	4641      	mov	r1, r8
 800b20e:	9002      	str	r0, [sp, #8]
 800b210:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b214:	9801      	ldr	r0, [sp, #4]
 800b216:	f000 fc4f 	bl	800bab8 <__mcmp>
 800b21a:	462a      	mov	r2, r5
 800b21c:	9006      	str	r0, [sp, #24]
 800b21e:	4621      	mov	r1, r4
 800b220:	4648      	mov	r0, r9
 800b222:	f000 fc65 	bl	800baf0 <__mdiff>
 800b226:	68c2      	ldr	r2, [r0, #12]
 800b228:	4606      	mov	r6, r0
 800b22a:	b9fa      	cbnz	r2, 800b26c <_dtoa_r+0x954>
 800b22c:	4601      	mov	r1, r0
 800b22e:	9801      	ldr	r0, [sp, #4]
 800b230:	f000 fc42 	bl	800bab8 <__mcmp>
 800b234:	4602      	mov	r2, r0
 800b236:	4631      	mov	r1, r6
 800b238:	4648      	mov	r0, r9
 800b23a:	920a      	str	r2, [sp, #40]	@ 0x28
 800b23c:	f000 fa0a 	bl	800b654 <_Bfree>
 800b240:	9b07      	ldr	r3, [sp, #28]
 800b242:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b244:	9e04      	ldr	r6, [sp, #16]
 800b246:	ea42 0103 	orr.w	r1, r2, r3
 800b24a:	9b08      	ldr	r3, [sp, #32]
 800b24c:	4319      	orrs	r1, r3
 800b24e:	d10f      	bne.n	800b270 <_dtoa_r+0x958>
 800b250:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b254:	d028      	beq.n	800b2a8 <_dtoa_r+0x990>
 800b256:	9b06      	ldr	r3, [sp, #24]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	dd02      	ble.n	800b262 <_dtoa_r+0x94a>
 800b25c:	9b02      	ldr	r3, [sp, #8]
 800b25e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b262:	f88b a000 	strb.w	sl, [fp]
 800b266:	e55e      	b.n	800ad26 <_dtoa_r+0x40e>
 800b268:	4628      	mov	r0, r5
 800b26a:	e7bd      	b.n	800b1e8 <_dtoa_r+0x8d0>
 800b26c:	2201      	movs	r2, #1
 800b26e:	e7e2      	b.n	800b236 <_dtoa_r+0x91e>
 800b270:	9b06      	ldr	r3, [sp, #24]
 800b272:	2b00      	cmp	r3, #0
 800b274:	db04      	blt.n	800b280 <_dtoa_r+0x968>
 800b276:	9907      	ldr	r1, [sp, #28]
 800b278:	430b      	orrs	r3, r1
 800b27a:	9908      	ldr	r1, [sp, #32]
 800b27c:	430b      	orrs	r3, r1
 800b27e:	d120      	bne.n	800b2c2 <_dtoa_r+0x9aa>
 800b280:	2a00      	cmp	r2, #0
 800b282:	ddee      	ble.n	800b262 <_dtoa_r+0x94a>
 800b284:	9901      	ldr	r1, [sp, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	4648      	mov	r0, r9
 800b28a:	f000 fba9 	bl	800b9e0 <__lshift>
 800b28e:	4621      	mov	r1, r4
 800b290:	9001      	str	r0, [sp, #4]
 800b292:	f000 fc11 	bl	800bab8 <__mcmp>
 800b296:	2800      	cmp	r0, #0
 800b298:	dc03      	bgt.n	800b2a2 <_dtoa_r+0x98a>
 800b29a:	d1e2      	bne.n	800b262 <_dtoa_r+0x94a>
 800b29c:	f01a 0f01 	tst.w	sl, #1
 800b2a0:	d0df      	beq.n	800b262 <_dtoa_r+0x94a>
 800b2a2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b2a6:	d1d9      	bne.n	800b25c <_dtoa_r+0x944>
 800b2a8:	2339      	movs	r3, #57	@ 0x39
 800b2aa:	f88b 3000 	strb.w	r3, [fp]
 800b2ae:	4633      	mov	r3, r6
 800b2b0:	461e      	mov	r6, r3
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b2b8:	2a39      	cmp	r2, #57	@ 0x39
 800b2ba:	d052      	beq.n	800b362 <_dtoa_r+0xa4a>
 800b2bc:	3201      	adds	r2, #1
 800b2be:	701a      	strb	r2, [r3, #0]
 800b2c0:	e531      	b.n	800ad26 <_dtoa_r+0x40e>
 800b2c2:	2a00      	cmp	r2, #0
 800b2c4:	dd07      	ble.n	800b2d6 <_dtoa_r+0x9be>
 800b2c6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b2ca:	d0ed      	beq.n	800b2a8 <_dtoa_r+0x990>
 800b2cc:	f10a 0301 	add.w	r3, sl, #1
 800b2d0:	f88b 3000 	strb.w	r3, [fp]
 800b2d4:	e527      	b.n	800ad26 <_dtoa_r+0x40e>
 800b2d6:	9b04      	ldr	r3, [sp, #16]
 800b2d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2da:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d029      	beq.n	800b336 <_dtoa_r+0xa1e>
 800b2e2:	9901      	ldr	r1, [sp, #4]
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	220a      	movs	r2, #10
 800b2e8:	4648      	mov	r0, r9
 800b2ea:	f000 f9d5 	bl	800b698 <__multadd>
 800b2ee:	45a8      	cmp	r8, r5
 800b2f0:	9001      	str	r0, [sp, #4]
 800b2f2:	f04f 0300 	mov.w	r3, #0
 800b2f6:	f04f 020a 	mov.w	r2, #10
 800b2fa:	4641      	mov	r1, r8
 800b2fc:	4648      	mov	r0, r9
 800b2fe:	d107      	bne.n	800b310 <_dtoa_r+0x9f8>
 800b300:	f000 f9ca 	bl	800b698 <__multadd>
 800b304:	4680      	mov	r8, r0
 800b306:	4605      	mov	r5, r0
 800b308:	9b04      	ldr	r3, [sp, #16]
 800b30a:	3301      	adds	r3, #1
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	e776      	b.n	800b1fe <_dtoa_r+0x8e6>
 800b310:	f000 f9c2 	bl	800b698 <__multadd>
 800b314:	4629      	mov	r1, r5
 800b316:	4680      	mov	r8, r0
 800b318:	2300      	movs	r3, #0
 800b31a:	220a      	movs	r2, #10
 800b31c:	4648      	mov	r0, r9
 800b31e:	f000 f9bb 	bl	800b698 <__multadd>
 800b322:	4605      	mov	r5, r0
 800b324:	e7f0      	b.n	800b308 <_dtoa_r+0x9f0>
 800b326:	f1bb 0f00 	cmp.w	fp, #0
 800b32a:	bfcc      	ite	gt
 800b32c:	465e      	movgt	r6, fp
 800b32e:	2601      	movle	r6, #1
 800b330:	443e      	add	r6, r7
 800b332:	f04f 0800 	mov.w	r8, #0
 800b336:	9901      	ldr	r1, [sp, #4]
 800b338:	2201      	movs	r2, #1
 800b33a:	4648      	mov	r0, r9
 800b33c:	f000 fb50 	bl	800b9e0 <__lshift>
 800b340:	4621      	mov	r1, r4
 800b342:	9001      	str	r0, [sp, #4]
 800b344:	f000 fbb8 	bl	800bab8 <__mcmp>
 800b348:	2800      	cmp	r0, #0
 800b34a:	dcb0      	bgt.n	800b2ae <_dtoa_r+0x996>
 800b34c:	d102      	bne.n	800b354 <_dtoa_r+0xa3c>
 800b34e:	f01a 0f01 	tst.w	sl, #1
 800b352:	d1ac      	bne.n	800b2ae <_dtoa_r+0x996>
 800b354:	4633      	mov	r3, r6
 800b356:	461e      	mov	r6, r3
 800b358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b35c:	2a30      	cmp	r2, #48	@ 0x30
 800b35e:	d0fa      	beq.n	800b356 <_dtoa_r+0xa3e>
 800b360:	e4e1      	b.n	800ad26 <_dtoa_r+0x40e>
 800b362:	429f      	cmp	r7, r3
 800b364:	d1a4      	bne.n	800b2b0 <_dtoa_r+0x998>
 800b366:	9b05      	ldr	r3, [sp, #20]
 800b368:	3301      	adds	r3, #1
 800b36a:	9305      	str	r3, [sp, #20]
 800b36c:	2331      	movs	r3, #49	@ 0x31
 800b36e:	703b      	strb	r3, [r7, #0]
 800b370:	e4d9      	b.n	800ad26 <_dtoa_r+0x40e>
 800b372:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b374:	4f16      	ldr	r7, [pc, #88]	@ (800b3d0 <_dtoa_r+0xab8>)
 800b376:	b11b      	cbz	r3, 800b380 <_dtoa_r+0xa68>
 800b378:	f107 0308 	add.w	r3, r7, #8
 800b37c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b37e:	6013      	str	r3, [r2, #0]
 800b380:	4638      	mov	r0, r7
 800b382:	b011      	add	sp, #68	@ 0x44
 800b384:	ecbd 8b02 	vpop	{d8}
 800b388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38c:	9b07      	ldr	r3, [sp, #28]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	f77f ae2c 	ble.w	800afec <_dtoa_r+0x6d4>
 800b394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b396:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b398:	2001      	movs	r0, #1
 800b39a:	e64c      	b.n	800b036 <_dtoa_r+0x71e>
 800b39c:	f1bb 0f00 	cmp.w	fp, #0
 800b3a0:	f77f aed8 	ble.w	800b154 <_dtoa_r+0x83c>
 800b3a4:	463e      	mov	r6, r7
 800b3a6:	9801      	ldr	r0, [sp, #4]
 800b3a8:	4621      	mov	r1, r4
 800b3aa:	f7ff fa2a 	bl	800a802 <quorem>
 800b3ae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b3b2:	f806 ab01 	strb.w	sl, [r6], #1
 800b3b6:	1bf2      	subs	r2, r6, r7
 800b3b8:	4593      	cmp	fp, r2
 800b3ba:	ddb4      	ble.n	800b326 <_dtoa_r+0xa0e>
 800b3bc:	9901      	ldr	r1, [sp, #4]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	220a      	movs	r2, #10
 800b3c2:	4648      	mov	r0, r9
 800b3c4:	f000 f968 	bl	800b698 <__multadd>
 800b3c8:	9001      	str	r0, [sp, #4]
 800b3ca:	e7ec      	b.n	800b3a6 <_dtoa_r+0xa8e>
 800b3cc:	08020590 	.word	0x08020590
 800b3d0:	08020514 	.word	0x08020514

0800b3d4 <_free_r>:
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	2900      	cmp	r1, #0
 800b3da:	d041      	beq.n	800b460 <_free_r+0x8c>
 800b3dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3e0:	1f0c      	subs	r4, r1, #4
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	bfb8      	it	lt
 800b3e6:	18e4      	addlt	r4, r4, r3
 800b3e8:	f000 f8e8 	bl	800b5bc <__malloc_lock>
 800b3ec:	4a1d      	ldr	r2, [pc, #116]	@ (800b464 <_free_r+0x90>)
 800b3ee:	6813      	ldr	r3, [r2, #0]
 800b3f0:	b933      	cbnz	r3, 800b400 <_free_r+0x2c>
 800b3f2:	6063      	str	r3, [r4, #4]
 800b3f4:	6014      	str	r4, [r2, #0]
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3fc:	f000 b8e4 	b.w	800b5c8 <__malloc_unlock>
 800b400:	42a3      	cmp	r3, r4
 800b402:	d908      	bls.n	800b416 <_free_r+0x42>
 800b404:	6820      	ldr	r0, [r4, #0]
 800b406:	1821      	adds	r1, r4, r0
 800b408:	428b      	cmp	r3, r1
 800b40a:	bf01      	itttt	eq
 800b40c:	6819      	ldreq	r1, [r3, #0]
 800b40e:	685b      	ldreq	r3, [r3, #4]
 800b410:	1809      	addeq	r1, r1, r0
 800b412:	6021      	streq	r1, [r4, #0]
 800b414:	e7ed      	b.n	800b3f2 <_free_r+0x1e>
 800b416:	461a      	mov	r2, r3
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	b10b      	cbz	r3, 800b420 <_free_r+0x4c>
 800b41c:	42a3      	cmp	r3, r4
 800b41e:	d9fa      	bls.n	800b416 <_free_r+0x42>
 800b420:	6811      	ldr	r1, [r2, #0]
 800b422:	1850      	adds	r0, r2, r1
 800b424:	42a0      	cmp	r0, r4
 800b426:	d10b      	bne.n	800b440 <_free_r+0x6c>
 800b428:	6820      	ldr	r0, [r4, #0]
 800b42a:	4401      	add	r1, r0
 800b42c:	1850      	adds	r0, r2, r1
 800b42e:	4283      	cmp	r3, r0
 800b430:	6011      	str	r1, [r2, #0]
 800b432:	d1e0      	bne.n	800b3f6 <_free_r+0x22>
 800b434:	6818      	ldr	r0, [r3, #0]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	6053      	str	r3, [r2, #4]
 800b43a:	4408      	add	r0, r1
 800b43c:	6010      	str	r0, [r2, #0]
 800b43e:	e7da      	b.n	800b3f6 <_free_r+0x22>
 800b440:	d902      	bls.n	800b448 <_free_r+0x74>
 800b442:	230c      	movs	r3, #12
 800b444:	602b      	str	r3, [r5, #0]
 800b446:	e7d6      	b.n	800b3f6 <_free_r+0x22>
 800b448:	6820      	ldr	r0, [r4, #0]
 800b44a:	1821      	adds	r1, r4, r0
 800b44c:	428b      	cmp	r3, r1
 800b44e:	bf04      	itt	eq
 800b450:	6819      	ldreq	r1, [r3, #0]
 800b452:	685b      	ldreq	r3, [r3, #4]
 800b454:	6063      	str	r3, [r4, #4]
 800b456:	bf04      	itt	eq
 800b458:	1809      	addeq	r1, r1, r0
 800b45a:	6021      	streq	r1, [r4, #0]
 800b45c:	6054      	str	r4, [r2, #4]
 800b45e:	e7ca      	b.n	800b3f6 <_free_r+0x22>
 800b460:	bd38      	pop	{r3, r4, r5, pc}
 800b462:	bf00      	nop
 800b464:	20004128 	.word	0x20004128

0800b468 <malloc>:
 800b468:	4b02      	ldr	r3, [pc, #8]	@ (800b474 <malloc+0xc>)
 800b46a:	4601      	mov	r1, r0
 800b46c:	6818      	ldr	r0, [r3, #0]
 800b46e:	f000 b825 	b.w	800b4bc <_malloc_r>
 800b472:	bf00      	nop
 800b474:	2000001c 	.word	0x2000001c

0800b478 <sbrk_aligned>:
 800b478:	b570      	push	{r4, r5, r6, lr}
 800b47a:	4e0f      	ldr	r6, [pc, #60]	@ (800b4b8 <sbrk_aligned+0x40>)
 800b47c:	460c      	mov	r4, r1
 800b47e:	6831      	ldr	r1, [r6, #0]
 800b480:	4605      	mov	r5, r0
 800b482:	b911      	cbnz	r1, 800b48a <sbrk_aligned+0x12>
 800b484:	f000 fccc 	bl	800be20 <_sbrk_r>
 800b488:	6030      	str	r0, [r6, #0]
 800b48a:	4621      	mov	r1, r4
 800b48c:	4628      	mov	r0, r5
 800b48e:	f000 fcc7 	bl	800be20 <_sbrk_r>
 800b492:	1c43      	adds	r3, r0, #1
 800b494:	d103      	bne.n	800b49e <sbrk_aligned+0x26>
 800b496:	f04f 34ff 	mov.w	r4, #4294967295
 800b49a:	4620      	mov	r0, r4
 800b49c:	bd70      	pop	{r4, r5, r6, pc}
 800b49e:	1cc4      	adds	r4, r0, #3
 800b4a0:	f024 0403 	bic.w	r4, r4, #3
 800b4a4:	42a0      	cmp	r0, r4
 800b4a6:	d0f8      	beq.n	800b49a <sbrk_aligned+0x22>
 800b4a8:	1a21      	subs	r1, r4, r0
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f000 fcb8 	bl	800be20 <_sbrk_r>
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	d1f2      	bne.n	800b49a <sbrk_aligned+0x22>
 800b4b4:	e7ef      	b.n	800b496 <sbrk_aligned+0x1e>
 800b4b6:	bf00      	nop
 800b4b8:	20004124 	.word	0x20004124

0800b4bc <_malloc_r>:
 800b4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4c0:	1ccd      	adds	r5, r1, #3
 800b4c2:	f025 0503 	bic.w	r5, r5, #3
 800b4c6:	3508      	adds	r5, #8
 800b4c8:	2d0c      	cmp	r5, #12
 800b4ca:	bf38      	it	cc
 800b4cc:	250c      	movcc	r5, #12
 800b4ce:	2d00      	cmp	r5, #0
 800b4d0:	4606      	mov	r6, r0
 800b4d2:	db01      	blt.n	800b4d8 <_malloc_r+0x1c>
 800b4d4:	42a9      	cmp	r1, r5
 800b4d6:	d904      	bls.n	800b4e2 <_malloc_r+0x26>
 800b4d8:	230c      	movs	r3, #12
 800b4da:	6033      	str	r3, [r6, #0]
 800b4dc:	2000      	movs	r0, #0
 800b4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5b8 <_malloc_r+0xfc>
 800b4e6:	f000 f869 	bl	800b5bc <__malloc_lock>
 800b4ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b4ee:	461c      	mov	r4, r3
 800b4f0:	bb44      	cbnz	r4, 800b544 <_malloc_r+0x88>
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	f7ff ffbf 	bl	800b478 <sbrk_aligned>
 800b4fa:	1c43      	adds	r3, r0, #1
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	d158      	bne.n	800b5b2 <_malloc_r+0xf6>
 800b500:	f8d8 4000 	ldr.w	r4, [r8]
 800b504:	4627      	mov	r7, r4
 800b506:	2f00      	cmp	r7, #0
 800b508:	d143      	bne.n	800b592 <_malloc_r+0xd6>
 800b50a:	2c00      	cmp	r4, #0
 800b50c:	d04b      	beq.n	800b5a6 <_malloc_r+0xea>
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	4639      	mov	r1, r7
 800b512:	4630      	mov	r0, r6
 800b514:	eb04 0903 	add.w	r9, r4, r3
 800b518:	f000 fc82 	bl	800be20 <_sbrk_r>
 800b51c:	4581      	cmp	r9, r0
 800b51e:	d142      	bne.n	800b5a6 <_malloc_r+0xea>
 800b520:	6821      	ldr	r1, [r4, #0]
 800b522:	1a6d      	subs	r5, r5, r1
 800b524:	4629      	mov	r1, r5
 800b526:	4630      	mov	r0, r6
 800b528:	f7ff ffa6 	bl	800b478 <sbrk_aligned>
 800b52c:	3001      	adds	r0, #1
 800b52e:	d03a      	beq.n	800b5a6 <_malloc_r+0xea>
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	442b      	add	r3, r5
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	f8d8 3000 	ldr.w	r3, [r8]
 800b53a:	685a      	ldr	r2, [r3, #4]
 800b53c:	bb62      	cbnz	r2, 800b598 <_malloc_r+0xdc>
 800b53e:	f8c8 7000 	str.w	r7, [r8]
 800b542:	e00f      	b.n	800b564 <_malloc_r+0xa8>
 800b544:	6822      	ldr	r2, [r4, #0]
 800b546:	1b52      	subs	r2, r2, r5
 800b548:	d420      	bmi.n	800b58c <_malloc_r+0xd0>
 800b54a:	2a0b      	cmp	r2, #11
 800b54c:	d917      	bls.n	800b57e <_malloc_r+0xc2>
 800b54e:	1961      	adds	r1, r4, r5
 800b550:	42a3      	cmp	r3, r4
 800b552:	6025      	str	r5, [r4, #0]
 800b554:	bf18      	it	ne
 800b556:	6059      	strne	r1, [r3, #4]
 800b558:	6863      	ldr	r3, [r4, #4]
 800b55a:	bf08      	it	eq
 800b55c:	f8c8 1000 	streq.w	r1, [r8]
 800b560:	5162      	str	r2, [r4, r5]
 800b562:	604b      	str	r3, [r1, #4]
 800b564:	4630      	mov	r0, r6
 800b566:	f000 f82f 	bl	800b5c8 <__malloc_unlock>
 800b56a:	f104 000b 	add.w	r0, r4, #11
 800b56e:	1d23      	adds	r3, r4, #4
 800b570:	f020 0007 	bic.w	r0, r0, #7
 800b574:	1ac2      	subs	r2, r0, r3
 800b576:	bf1c      	itt	ne
 800b578:	1a1b      	subne	r3, r3, r0
 800b57a:	50a3      	strne	r3, [r4, r2]
 800b57c:	e7af      	b.n	800b4de <_malloc_r+0x22>
 800b57e:	6862      	ldr	r2, [r4, #4]
 800b580:	42a3      	cmp	r3, r4
 800b582:	bf0c      	ite	eq
 800b584:	f8c8 2000 	streq.w	r2, [r8]
 800b588:	605a      	strne	r2, [r3, #4]
 800b58a:	e7eb      	b.n	800b564 <_malloc_r+0xa8>
 800b58c:	4623      	mov	r3, r4
 800b58e:	6864      	ldr	r4, [r4, #4]
 800b590:	e7ae      	b.n	800b4f0 <_malloc_r+0x34>
 800b592:	463c      	mov	r4, r7
 800b594:	687f      	ldr	r7, [r7, #4]
 800b596:	e7b6      	b.n	800b506 <_malloc_r+0x4a>
 800b598:	461a      	mov	r2, r3
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	42a3      	cmp	r3, r4
 800b59e:	d1fb      	bne.n	800b598 <_malloc_r+0xdc>
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	6053      	str	r3, [r2, #4]
 800b5a4:	e7de      	b.n	800b564 <_malloc_r+0xa8>
 800b5a6:	230c      	movs	r3, #12
 800b5a8:	6033      	str	r3, [r6, #0]
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	f000 f80c 	bl	800b5c8 <__malloc_unlock>
 800b5b0:	e794      	b.n	800b4dc <_malloc_r+0x20>
 800b5b2:	6005      	str	r5, [r0, #0]
 800b5b4:	e7d6      	b.n	800b564 <_malloc_r+0xa8>
 800b5b6:	bf00      	nop
 800b5b8:	20004128 	.word	0x20004128

0800b5bc <__malloc_lock>:
 800b5bc:	4801      	ldr	r0, [pc, #4]	@ (800b5c4 <__malloc_lock+0x8>)
 800b5be:	f7ff b910 	b.w	800a7e2 <__retarget_lock_acquire_recursive>
 800b5c2:	bf00      	nop
 800b5c4:	20004120 	.word	0x20004120

0800b5c8 <__malloc_unlock>:
 800b5c8:	4801      	ldr	r0, [pc, #4]	@ (800b5d0 <__malloc_unlock+0x8>)
 800b5ca:	f7ff b90b 	b.w	800a7e4 <__retarget_lock_release_recursive>
 800b5ce:	bf00      	nop
 800b5d0:	20004120 	.word	0x20004120

0800b5d4 <_Balloc>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	69c6      	ldr	r6, [r0, #28]
 800b5d8:	4604      	mov	r4, r0
 800b5da:	460d      	mov	r5, r1
 800b5dc:	b976      	cbnz	r6, 800b5fc <_Balloc+0x28>
 800b5de:	2010      	movs	r0, #16
 800b5e0:	f7ff ff42 	bl	800b468 <malloc>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	61e0      	str	r0, [r4, #28]
 800b5e8:	b920      	cbnz	r0, 800b5f4 <_Balloc+0x20>
 800b5ea:	4b18      	ldr	r3, [pc, #96]	@ (800b64c <_Balloc+0x78>)
 800b5ec:	4818      	ldr	r0, [pc, #96]	@ (800b650 <_Balloc+0x7c>)
 800b5ee:	216b      	movs	r1, #107	@ 0x6b
 800b5f0:	f000 fc26 	bl	800be40 <__assert_func>
 800b5f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5f8:	6006      	str	r6, [r0, #0]
 800b5fa:	60c6      	str	r6, [r0, #12]
 800b5fc:	69e6      	ldr	r6, [r4, #28]
 800b5fe:	68f3      	ldr	r3, [r6, #12]
 800b600:	b183      	cbz	r3, 800b624 <_Balloc+0x50>
 800b602:	69e3      	ldr	r3, [r4, #28]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b60a:	b9b8      	cbnz	r0, 800b63c <_Balloc+0x68>
 800b60c:	2101      	movs	r1, #1
 800b60e:	fa01 f605 	lsl.w	r6, r1, r5
 800b612:	1d72      	adds	r2, r6, #5
 800b614:	0092      	lsls	r2, r2, #2
 800b616:	4620      	mov	r0, r4
 800b618:	f000 fc30 	bl	800be7c <_calloc_r>
 800b61c:	b160      	cbz	r0, 800b638 <_Balloc+0x64>
 800b61e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b622:	e00e      	b.n	800b642 <_Balloc+0x6e>
 800b624:	2221      	movs	r2, #33	@ 0x21
 800b626:	2104      	movs	r1, #4
 800b628:	4620      	mov	r0, r4
 800b62a:	f000 fc27 	bl	800be7c <_calloc_r>
 800b62e:	69e3      	ldr	r3, [r4, #28]
 800b630:	60f0      	str	r0, [r6, #12]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d1e4      	bne.n	800b602 <_Balloc+0x2e>
 800b638:	2000      	movs	r0, #0
 800b63a:	bd70      	pop	{r4, r5, r6, pc}
 800b63c:	6802      	ldr	r2, [r0, #0]
 800b63e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b642:	2300      	movs	r3, #0
 800b644:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b648:	e7f7      	b.n	800b63a <_Balloc+0x66>
 800b64a:	bf00      	nop
 800b64c:	08020521 	.word	0x08020521
 800b650:	080205a1 	.word	0x080205a1

0800b654 <_Bfree>:
 800b654:	b570      	push	{r4, r5, r6, lr}
 800b656:	69c6      	ldr	r6, [r0, #28]
 800b658:	4605      	mov	r5, r0
 800b65a:	460c      	mov	r4, r1
 800b65c:	b976      	cbnz	r6, 800b67c <_Bfree+0x28>
 800b65e:	2010      	movs	r0, #16
 800b660:	f7ff ff02 	bl	800b468 <malloc>
 800b664:	4602      	mov	r2, r0
 800b666:	61e8      	str	r0, [r5, #28]
 800b668:	b920      	cbnz	r0, 800b674 <_Bfree+0x20>
 800b66a:	4b09      	ldr	r3, [pc, #36]	@ (800b690 <_Bfree+0x3c>)
 800b66c:	4809      	ldr	r0, [pc, #36]	@ (800b694 <_Bfree+0x40>)
 800b66e:	218f      	movs	r1, #143	@ 0x8f
 800b670:	f000 fbe6 	bl	800be40 <__assert_func>
 800b674:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b678:	6006      	str	r6, [r0, #0]
 800b67a:	60c6      	str	r6, [r0, #12]
 800b67c:	b13c      	cbz	r4, 800b68e <_Bfree+0x3a>
 800b67e:	69eb      	ldr	r3, [r5, #28]
 800b680:	6862      	ldr	r2, [r4, #4]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b688:	6021      	str	r1, [r4, #0]
 800b68a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b68e:	bd70      	pop	{r4, r5, r6, pc}
 800b690:	08020521 	.word	0x08020521
 800b694:	080205a1 	.word	0x080205a1

0800b698 <__multadd>:
 800b698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b69c:	690d      	ldr	r5, [r1, #16]
 800b69e:	4607      	mov	r7, r0
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	461e      	mov	r6, r3
 800b6a4:	f101 0c14 	add.w	ip, r1, #20
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	f8dc 3000 	ldr.w	r3, [ip]
 800b6ae:	b299      	uxth	r1, r3
 800b6b0:	fb02 6101 	mla	r1, r2, r1, r6
 800b6b4:	0c1e      	lsrs	r6, r3, #16
 800b6b6:	0c0b      	lsrs	r3, r1, #16
 800b6b8:	fb02 3306 	mla	r3, r2, r6, r3
 800b6bc:	b289      	uxth	r1, r1
 800b6be:	3001      	adds	r0, #1
 800b6c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b6c4:	4285      	cmp	r5, r0
 800b6c6:	f84c 1b04 	str.w	r1, [ip], #4
 800b6ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b6ce:	dcec      	bgt.n	800b6aa <__multadd+0x12>
 800b6d0:	b30e      	cbz	r6, 800b716 <__multadd+0x7e>
 800b6d2:	68a3      	ldr	r3, [r4, #8]
 800b6d4:	42ab      	cmp	r3, r5
 800b6d6:	dc19      	bgt.n	800b70c <__multadd+0x74>
 800b6d8:	6861      	ldr	r1, [r4, #4]
 800b6da:	4638      	mov	r0, r7
 800b6dc:	3101      	adds	r1, #1
 800b6de:	f7ff ff79 	bl	800b5d4 <_Balloc>
 800b6e2:	4680      	mov	r8, r0
 800b6e4:	b928      	cbnz	r0, 800b6f2 <__multadd+0x5a>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	4b0c      	ldr	r3, [pc, #48]	@ (800b71c <__multadd+0x84>)
 800b6ea:	480d      	ldr	r0, [pc, #52]	@ (800b720 <__multadd+0x88>)
 800b6ec:	21ba      	movs	r1, #186	@ 0xba
 800b6ee:	f000 fba7 	bl	800be40 <__assert_func>
 800b6f2:	6922      	ldr	r2, [r4, #16]
 800b6f4:	3202      	adds	r2, #2
 800b6f6:	f104 010c 	add.w	r1, r4, #12
 800b6fa:	0092      	lsls	r2, r2, #2
 800b6fc:	300c      	adds	r0, #12
 800b6fe:	f7ff f872 	bl	800a7e6 <memcpy>
 800b702:	4621      	mov	r1, r4
 800b704:	4638      	mov	r0, r7
 800b706:	f7ff ffa5 	bl	800b654 <_Bfree>
 800b70a:	4644      	mov	r4, r8
 800b70c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b710:	3501      	adds	r5, #1
 800b712:	615e      	str	r6, [r3, #20]
 800b714:	6125      	str	r5, [r4, #16]
 800b716:	4620      	mov	r0, r4
 800b718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b71c:	08020590 	.word	0x08020590
 800b720:	080205a1 	.word	0x080205a1

0800b724 <__hi0bits>:
 800b724:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b728:	4603      	mov	r3, r0
 800b72a:	bf36      	itet	cc
 800b72c:	0403      	lslcc	r3, r0, #16
 800b72e:	2000      	movcs	r0, #0
 800b730:	2010      	movcc	r0, #16
 800b732:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b736:	bf3c      	itt	cc
 800b738:	021b      	lslcc	r3, r3, #8
 800b73a:	3008      	addcc	r0, #8
 800b73c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b740:	bf3c      	itt	cc
 800b742:	011b      	lslcc	r3, r3, #4
 800b744:	3004      	addcc	r0, #4
 800b746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b74a:	bf3c      	itt	cc
 800b74c:	009b      	lslcc	r3, r3, #2
 800b74e:	3002      	addcc	r0, #2
 800b750:	2b00      	cmp	r3, #0
 800b752:	db05      	blt.n	800b760 <__hi0bits+0x3c>
 800b754:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b758:	f100 0001 	add.w	r0, r0, #1
 800b75c:	bf08      	it	eq
 800b75e:	2020      	moveq	r0, #32
 800b760:	4770      	bx	lr

0800b762 <__lo0bits>:
 800b762:	6803      	ldr	r3, [r0, #0]
 800b764:	4602      	mov	r2, r0
 800b766:	f013 0007 	ands.w	r0, r3, #7
 800b76a:	d00b      	beq.n	800b784 <__lo0bits+0x22>
 800b76c:	07d9      	lsls	r1, r3, #31
 800b76e:	d421      	bmi.n	800b7b4 <__lo0bits+0x52>
 800b770:	0798      	lsls	r0, r3, #30
 800b772:	bf49      	itett	mi
 800b774:	085b      	lsrmi	r3, r3, #1
 800b776:	089b      	lsrpl	r3, r3, #2
 800b778:	2001      	movmi	r0, #1
 800b77a:	6013      	strmi	r3, [r2, #0]
 800b77c:	bf5c      	itt	pl
 800b77e:	6013      	strpl	r3, [r2, #0]
 800b780:	2002      	movpl	r0, #2
 800b782:	4770      	bx	lr
 800b784:	b299      	uxth	r1, r3
 800b786:	b909      	cbnz	r1, 800b78c <__lo0bits+0x2a>
 800b788:	0c1b      	lsrs	r3, r3, #16
 800b78a:	2010      	movs	r0, #16
 800b78c:	b2d9      	uxtb	r1, r3
 800b78e:	b909      	cbnz	r1, 800b794 <__lo0bits+0x32>
 800b790:	3008      	adds	r0, #8
 800b792:	0a1b      	lsrs	r3, r3, #8
 800b794:	0719      	lsls	r1, r3, #28
 800b796:	bf04      	itt	eq
 800b798:	091b      	lsreq	r3, r3, #4
 800b79a:	3004      	addeq	r0, #4
 800b79c:	0799      	lsls	r1, r3, #30
 800b79e:	bf04      	itt	eq
 800b7a0:	089b      	lsreq	r3, r3, #2
 800b7a2:	3002      	addeq	r0, #2
 800b7a4:	07d9      	lsls	r1, r3, #31
 800b7a6:	d403      	bmi.n	800b7b0 <__lo0bits+0x4e>
 800b7a8:	085b      	lsrs	r3, r3, #1
 800b7aa:	f100 0001 	add.w	r0, r0, #1
 800b7ae:	d003      	beq.n	800b7b8 <__lo0bits+0x56>
 800b7b0:	6013      	str	r3, [r2, #0]
 800b7b2:	4770      	bx	lr
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	4770      	bx	lr
 800b7b8:	2020      	movs	r0, #32
 800b7ba:	4770      	bx	lr

0800b7bc <__i2b>:
 800b7bc:	b510      	push	{r4, lr}
 800b7be:	460c      	mov	r4, r1
 800b7c0:	2101      	movs	r1, #1
 800b7c2:	f7ff ff07 	bl	800b5d4 <_Balloc>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	b928      	cbnz	r0, 800b7d6 <__i2b+0x1a>
 800b7ca:	4b05      	ldr	r3, [pc, #20]	@ (800b7e0 <__i2b+0x24>)
 800b7cc:	4805      	ldr	r0, [pc, #20]	@ (800b7e4 <__i2b+0x28>)
 800b7ce:	f240 1145 	movw	r1, #325	@ 0x145
 800b7d2:	f000 fb35 	bl	800be40 <__assert_func>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	6144      	str	r4, [r0, #20]
 800b7da:	6103      	str	r3, [r0, #16]
 800b7dc:	bd10      	pop	{r4, pc}
 800b7de:	bf00      	nop
 800b7e0:	08020590 	.word	0x08020590
 800b7e4:	080205a1 	.word	0x080205a1

0800b7e8 <__multiply>:
 800b7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ec:	4617      	mov	r7, r2
 800b7ee:	690a      	ldr	r2, [r1, #16]
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	bfa8      	it	ge
 800b7f6:	463b      	movge	r3, r7
 800b7f8:	4689      	mov	r9, r1
 800b7fa:	bfa4      	itt	ge
 800b7fc:	460f      	movge	r7, r1
 800b7fe:	4699      	movge	r9, r3
 800b800:	693d      	ldr	r5, [r7, #16]
 800b802:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	6879      	ldr	r1, [r7, #4]
 800b80a:	eb05 060a 	add.w	r6, r5, sl
 800b80e:	42b3      	cmp	r3, r6
 800b810:	b085      	sub	sp, #20
 800b812:	bfb8      	it	lt
 800b814:	3101      	addlt	r1, #1
 800b816:	f7ff fedd 	bl	800b5d4 <_Balloc>
 800b81a:	b930      	cbnz	r0, 800b82a <__multiply+0x42>
 800b81c:	4602      	mov	r2, r0
 800b81e:	4b41      	ldr	r3, [pc, #260]	@ (800b924 <__multiply+0x13c>)
 800b820:	4841      	ldr	r0, [pc, #260]	@ (800b928 <__multiply+0x140>)
 800b822:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b826:	f000 fb0b 	bl	800be40 <__assert_func>
 800b82a:	f100 0414 	add.w	r4, r0, #20
 800b82e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b832:	4623      	mov	r3, r4
 800b834:	2200      	movs	r2, #0
 800b836:	4573      	cmp	r3, lr
 800b838:	d320      	bcc.n	800b87c <__multiply+0x94>
 800b83a:	f107 0814 	add.w	r8, r7, #20
 800b83e:	f109 0114 	add.w	r1, r9, #20
 800b842:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b846:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b84a:	9302      	str	r3, [sp, #8]
 800b84c:	1beb      	subs	r3, r5, r7
 800b84e:	3b15      	subs	r3, #21
 800b850:	f023 0303 	bic.w	r3, r3, #3
 800b854:	3304      	adds	r3, #4
 800b856:	3715      	adds	r7, #21
 800b858:	42bd      	cmp	r5, r7
 800b85a:	bf38      	it	cc
 800b85c:	2304      	movcc	r3, #4
 800b85e:	9301      	str	r3, [sp, #4]
 800b860:	9b02      	ldr	r3, [sp, #8]
 800b862:	9103      	str	r1, [sp, #12]
 800b864:	428b      	cmp	r3, r1
 800b866:	d80c      	bhi.n	800b882 <__multiply+0x9a>
 800b868:	2e00      	cmp	r6, #0
 800b86a:	dd03      	ble.n	800b874 <__multiply+0x8c>
 800b86c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b870:	2b00      	cmp	r3, #0
 800b872:	d055      	beq.n	800b920 <__multiply+0x138>
 800b874:	6106      	str	r6, [r0, #16]
 800b876:	b005      	add	sp, #20
 800b878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b87c:	f843 2b04 	str.w	r2, [r3], #4
 800b880:	e7d9      	b.n	800b836 <__multiply+0x4e>
 800b882:	f8b1 a000 	ldrh.w	sl, [r1]
 800b886:	f1ba 0f00 	cmp.w	sl, #0
 800b88a:	d01f      	beq.n	800b8cc <__multiply+0xe4>
 800b88c:	46c4      	mov	ip, r8
 800b88e:	46a1      	mov	r9, r4
 800b890:	2700      	movs	r7, #0
 800b892:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b896:	f8d9 3000 	ldr.w	r3, [r9]
 800b89a:	fa1f fb82 	uxth.w	fp, r2
 800b89e:	b29b      	uxth	r3, r3
 800b8a0:	fb0a 330b 	mla	r3, sl, fp, r3
 800b8a4:	443b      	add	r3, r7
 800b8a6:	f8d9 7000 	ldr.w	r7, [r9]
 800b8aa:	0c12      	lsrs	r2, r2, #16
 800b8ac:	0c3f      	lsrs	r7, r7, #16
 800b8ae:	fb0a 7202 	mla	r2, sl, r2, r7
 800b8b2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8bc:	4565      	cmp	r5, ip
 800b8be:	f849 3b04 	str.w	r3, [r9], #4
 800b8c2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b8c6:	d8e4      	bhi.n	800b892 <__multiply+0xaa>
 800b8c8:	9b01      	ldr	r3, [sp, #4]
 800b8ca:	50e7      	str	r7, [r4, r3]
 800b8cc:	9b03      	ldr	r3, [sp, #12]
 800b8ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b8d2:	3104      	adds	r1, #4
 800b8d4:	f1b9 0f00 	cmp.w	r9, #0
 800b8d8:	d020      	beq.n	800b91c <__multiply+0x134>
 800b8da:	6823      	ldr	r3, [r4, #0]
 800b8dc:	4647      	mov	r7, r8
 800b8de:	46a4      	mov	ip, r4
 800b8e0:	f04f 0a00 	mov.w	sl, #0
 800b8e4:	f8b7 b000 	ldrh.w	fp, [r7]
 800b8e8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b8ec:	fb09 220b 	mla	r2, r9, fp, r2
 800b8f0:	4452      	add	r2, sl
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8f8:	f84c 3b04 	str.w	r3, [ip], #4
 800b8fc:	f857 3b04 	ldr.w	r3, [r7], #4
 800b900:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b904:	f8bc 3000 	ldrh.w	r3, [ip]
 800b908:	fb09 330a 	mla	r3, r9, sl, r3
 800b90c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b910:	42bd      	cmp	r5, r7
 800b912:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b916:	d8e5      	bhi.n	800b8e4 <__multiply+0xfc>
 800b918:	9a01      	ldr	r2, [sp, #4]
 800b91a:	50a3      	str	r3, [r4, r2]
 800b91c:	3404      	adds	r4, #4
 800b91e:	e79f      	b.n	800b860 <__multiply+0x78>
 800b920:	3e01      	subs	r6, #1
 800b922:	e7a1      	b.n	800b868 <__multiply+0x80>
 800b924:	08020590 	.word	0x08020590
 800b928:	080205a1 	.word	0x080205a1

0800b92c <__pow5mult>:
 800b92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b930:	4615      	mov	r5, r2
 800b932:	f012 0203 	ands.w	r2, r2, #3
 800b936:	4607      	mov	r7, r0
 800b938:	460e      	mov	r6, r1
 800b93a:	d007      	beq.n	800b94c <__pow5mult+0x20>
 800b93c:	4c25      	ldr	r4, [pc, #148]	@ (800b9d4 <__pow5mult+0xa8>)
 800b93e:	3a01      	subs	r2, #1
 800b940:	2300      	movs	r3, #0
 800b942:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b946:	f7ff fea7 	bl	800b698 <__multadd>
 800b94a:	4606      	mov	r6, r0
 800b94c:	10ad      	asrs	r5, r5, #2
 800b94e:	d03d      	beq.n	800b9cc <__pow5mult+0xa0>
 800b950:	69fc      	ldr	r4, [r7, #28]
 800b952:	b97c      	cbnz	r4, 800b974 <__pow5mult+0x48>
 800b954:	2010      	movs	r0, #16
 800b956:	f7ff fd87 	bl	800b468 <malloc>
 800b95a:	4602      	mov	r2, r0
 800b95c:	61f8      	str	r0, [r7, #28]
 800b95e:	b928      	cbnz	r0, 800b96c <__pow5mult+0x40>
 800b960:	4b1d      	ldr	r3, [pc, #116]	@ (800b9d8 <__pow5mult+0xac>)
 800b962:	481e      	ldr	r0, [pc, #120]	@ (800b9dc <__pow5mult+0xb0>)
 800b964:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b968:	f000 fa6a 	bl	800be40 <__assert_func>
 800b96c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b970:	6004      	str	r4, [r0, #0]
 800b972:	60c4      	str	r4, [r0, #12]
 800b974:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b978:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b97c:	b94c      	cbnz	r4, 800b992 <__pow5mult+0x66>
 800b97e:	f240 2171 	movw	r1, #625	@ 0x271
 800b982:	4638      	mov	r0, r7
 800b984:	f7ff ff1a 	bl	800b7bc <__i2b>
 800b988:	2300      	movs	r3, #0
 800b98a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b98e:	4604      	mov	r4, r0
 800b990:	6003      	str	r3, [r0, #0]
 800b992:	f04f 0900 	mov.w	r9, #0
 800b996:	07eb      	lsls	r3, r5, #31
 800b998:	d50a      	bpl.n	800b9b0 <__pow5mult+0x84>
 800b99a:	4631      	mov	r1, r6
 800b99c:	4622      	mov	r2, r4
 800b99e:	4638      	mov	r0, r7
 800b9a0:	f7ff ff22 	bl	800b7e8 <__multiply>
 800b9a4:	4631      	mov	r1, r6
 800b9a6:	4680      	mov	r8, r0
 800b9a8:	4638      	mov	r0, r7
 800b9aa:	f7ff fe53 	bl	800b654 <_Bfree>
 800b9ae:	4646      	mov	r6, r8
 800b9b0:	106d      	asrs	r5, r5, #1
 800b9b2:	d00b      	beq.n	800b9cc <__pow5mult+0xa0>
 800b9b4:	6820      	ldr	r0, [r4, #0]
 800b9b6:	b938      	cbnz	r0, 800b9c8 <__pow5mult+0x9c>
 800b9b8:	4622      	mov	r2, r4
 800b9ba:	4621      	mov	r1, r4
 800b9bc:	4638      	mov	r0, r7
 800b9be:	f7ff ff13 	bl	800b7e8 <__multiply>
 800b9c2:	6020      	str	r0, [r4, #0]
 800b9c4:	f8c0 9000 	str.w	r9, [r0]
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	e7e4      	b.n	800b996 <__pow5mult+0x6a>
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d2:	bf00      	nop
 800b9d4:	08020654 	.word	0x08020654
 800b9d8:	08020521 	.word	0x08020521
 800b9dc:	080205a1 	.word	0x080205a1

0800b9e0 <__lshift>:
 800b9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e4:	460c      	mov	r4, r1
 800b9e6:	6849      	ldr	r1, [r1, #4]
 800b9e8:	6923      	ldr	r3, [r4, #16]
 800b9ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9ee:	68a3      	ldr	r3, [r4, #8]
 800b9f0:	4607      	mov	r7, r0
 800b9f2:	4691      	mov	r9, r2
 800b9f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9f8:	f108 0601 	add.w	r6, r8, #1
 800b9fc:	42b3      	cmp	r3, r6
 800b9fe:	db0b      	blt.n	800ba18 <__lshift+0x38>
 800ba00:	4638      	mov	r0, r7
 800ba02:	f7ff fde7 	bl	800b5d4 <_Balloc>
 800ba06:	4605      	mov	r5, r0
 800ba08:	b948      	cbnz	r0, 800ba1e <__lshift+0x3e>
 800ba0a:	4602      	mov	r2, r0
 800ba0c:	4b28      	ldr	r3, [pc, #160]	@ (800bab0 <__lshift+0xd0>)
 800ba0e:	4829      	ldr	r0, [pc, #164]	@ (800bab4 <__lshift+0xd4>)
 800ba10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ba14:	f000 fa14 	bl	800be40 <__assert_func>
 800ba18:	3101      	adds	r1, #1
 800ba1a:	005b      	lsls	r3, r3, #1
 800ba1c:	e7ee      	b.n	800b9fc <__lshift+0x1c>
 800ba1e:	2300      	movs	r3, #0
 800ba20:	f100 0114 	add.w	r1, r0, #20
 800ba24:	f100 0210 	add.w	r2, r0, #16
 800ba28:	4618      	mov	r0, r3
 800ba2a:	4553      	cmp	r3, sl
 800ba2c:	db33      	blt.n	800ba96 <__lshift+0xb6>
 800ba2e:	6920      	ldr	r0, [r4, #16]
 800ba30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba34:	f104 0314 	add.w	r3, r4, #20
 800ba38:	f019 091f 	ands.w	r9, r9, #31
 800ba3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba44:	d02b      	beq.n	800ba9e <__lshift+0xbe>
 800ba46:	f1c9 0e20 	rsb	lr, r9, #32
 800ba4a:	468a      	mov	sl, r1
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	6818      	ldr	r0, [r3, #0]
 800ba50:	fa00 f009 	lsl.w	r0, r0, r9
 800ba54:	4310      	orrs	r0, r2
 800ba56:	f84a 0b04 	str.w	r0, [sl], #4
 800ba5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba5e:	459c      	cmp	ip, r3
 800ba60:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba64:	d8f3      	bhi.n	800ba4e <__lshift+0x6e>
 800ba66:	ebac 0304 	sub.w	r3, ip, r4
 800ba6a:	3b15      	subs	r3, #21
 800ba6c:	f023 0303 	bic.w	r3, r3, #3
 800ba70:	3304      	adds	r3, #4
 800ba72:	f104 0015 	add.w	r0, r4, #21
 800ba76:	4560      	cmp	r0, ip
 800ba78:	bf88      	it	hi
 800ba7a:	2304      	movhi	r3, #4
 800ba7c:	50ca      	str	r2, [r1, r3]
 800ba7e:	b10a      	cbz	r2, 800ba84 <__lshift+0xa4>
 800ba80:	f108 0602 	add.w	r6, r8, #2
 800ba84:	3e01      	subs	r6, #1
 800ba86:	4638      	mov	r0, r7
 800ba88:	612e      	str	r6, [r5, #16]
 800ba8a:	4621      	mov	r1, r4
 800ba8c:	f7ff fde2 	bl	800b654 <_Bfree>
 800ba90:	4628      	mov	r0, r5
 800ba92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba96:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	e7c5      	b.n	800ba2a <__lshift+0x4a>
 800ba9e:	3904      	subs	r1, #4
 800baa0:	f853 2b04 	ldr.w	r2, [r3], #4
 800baa4:	f841 2f04 	str.w	r2, [r1, #4]!
 800baa8:	459c      	cmp	ip, r3
 800baaa:	d8f9      	bhi.n	800baa0 <__lshift+0xc0>
 800baac:	e7ea      	b.n	800ba84 <__lshift+0xa4>
 800baae:	bf00      	nop
 800bab0:	08020590 	.word	0x08020590
 800bab4:	080205a1 	.word	0x080205a1

0800bab8 <__mcmp>:
 800bab8:	690a      	ldr	r2, [r1, #16]
 800baba:	4603      	mov	r3, r0
 800babc:	6900      	ldr	r0, [r0, #16]
 800babe:	1a80      	subs	r0, r0, r2
 800bac0:	b530      	push	{r4, r5, lr}
 800bac2:	d10e      	bne.n	800bae2 <__mcmp+0x2a>
 800bac4:	3314      	adds	r3, #20
 800bac6:	3114      	adds	r1, #20
 800bac8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bacc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bad0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bad4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bad8:	4295      	cmp	r5, r2
 800bada:	d003      	beq.n	800bae4 <__mcmp+0x2c>
 800badc:	d205      	bcs.n	800baea <__mcmp+0x32>
 800bade:	f04f 30ff 	mov.w	r0, #4294967295
 800bae2:	bd30      	pop	{r4, r5, pc}
 800bae4:	42a3      	cmp	r3, r4
 800bae6:	d3f3      	bcc.n	800bad0 <__mcmp+0x18>
 800bae8:	e7fb      	b.n	800bae2 <__mcmp+0x2a>
 800baea:	2001      	movs	r0, #1
 800baec:	e7f9      	b.n	800bae2 <__mcmp+0x2a>
	...

0800baf0 <__mdiff>:
 800baf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	4689      	mov	r9, r1
 800baf6:	4606      	mov	r6, r0
 800baf8:	4611      	mov	r1, r2
 800bafa:	4648      	mov	r0, r9
 800bafc:	4614      	mov	r4, r2
 800bafe:	f7ff ffdb 	bl	800bab8 <__mcmp>
 800bb02:	1e05      	subs	r5, r0, #0
 800bb04:	d112      	bne.n	800bb2c <__mdiff+0x3c>
 800bb06:	4629      	mov	r1, r5
 800bb08:	4630      	mov	r0, r6
 800bb0a:	f7ff fd63 	bl	800b5d4 <_Balloc>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	b928      	cbnz	r0, 800bb1e <__mdiff+0x2e>
 800bb12:	4b3f      	ldr	r3, [pc, #252]	@ (800bc10 <__mdiff+0x120>)
 800bb14:	f240 2137 	movw	r1, #567	@ 0x237
 800bb18:	483e      	ldr	r0, [pc, #248]	@ (800bc14 <__mdiff+0x124>)
 800bb1a:	f000 f991 	bl	800be40 <__assert_func>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb24:	4610      	mov	r0, r2
 800bb26:	b003      	add	sp, #12
 800bb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2c:	bfbc      	itt	lt
 800bb2e:	464b      	movlt	r3, r9
 800bb30:	46a1      	movlt	r9, r4
 800bb32:	4630      	mov	r0, r6
 800bb34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bb38:	bfba      	itte	lt
 800bb3a:	461c      	movlt	r4, r3
 800bb3c:	2501      	movlt	r5, #1
 800bb3e:	2500      	movge	r5, #0
 800bb40:	f7ff fd48 	bl	800b5d4 <_Balloc>
 800bb44:	4602      	mov	r2, r0
 800bb46:	b918      	cbnz	r0, 800bb50 <__mdiff+0x60>
 800bb48:	4b31      	ldr	r3, [pc, #196]	@ (800bc10 <__mdiff+0x120>)
 800bb4a:	f240 2145 	movw	r1, #581	@ 0x245
 800bb4e:	e7e3      	b.n	800bb18 <__mdiff+0x28>
 800bb50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bb54:	6926      	ldr	r6, [r4, #16]
 800bb56:	60c5      	str	r5, [r0, #12]
 800bb58:	f109 0310 	add.w	r3, r9, #16
 800bb5c:	f109 0514 	add.w	r5, r9, #20
 800bb60:	f104 0e14 	add.w	lr, r4, #20
 800bb64:	f100 0b14 	add.w	fp, r0, #20
 800bb68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bb6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bb70:	9301      	str	r3, [sp, #4]
 800bb72:	46d9      	mov	r9, fp
 800bb74:	f04f 0c00 	mov.w	ip, #0
 800bb78:	9b01      	ldr	r3, [sp, #4]
 800bb7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bb7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bb82:	9301      	str	r3, [sp, #4]
 800bb84:	fa1f f38a 	uxth.w	r3, sl
 800bb88:	4619      	mov	r1, r3
 800bb8a:	b283      	uxth	r3, r0
 800bb8c:	1acb      	subs	r3, r1, r3
 800bb8e:	0c00      	lsrs	r0, r0, #16
 800bb90:	4463      	add	r3, ip
 800bb92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bb96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bba0:	4576      	cmp	r6, lr
 800bba2:	f849 3b04 	str.w	r3, [r9], #4
 800bba6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bbaa:	d8e5      	bhi.n	800bb78 <__mdiff+0x88>
 800bbac:	1b33      	subs	r3, r6, r4
 800bbae:	3b15      	subs	r3, #21
 800bbb0:	f023 0303 	bic.w	r3, r3, #3
 800bbb4:	3415      	adds	r4, #21
 800bbb6:	3304      	adds	r3, #4
 800bbb8:	42a6      	cmp	r6, r4
 800bbba:	bf38      	it	cc
 800bbbc:	2304      	movcc	r3, #4
 800bbbe:	441d      	add	r5, r3
 800bbc0:	445b      	add	r3, fp
 800bbc2:	461e      	mov	r6, r3
 800bbc4:	462c      	mov	r4, r5
 800bbc6:	4544      	cmp	r4, r8
 800bbc8:	d30e      	bcc.n	800bbe8 <__mdiff+0xf8>
 800bbca:	f108 0103 	add.w	r1, r8, #3
 800bbce:	1b49      	subs	r1, r1, r5
 800bbd0:	f021 0103 	bic.w	r1, r1, #3
 800bbd4:	3d03      	subs	r5, #3
 800bbd6:	45a8      	cmp	r8, r5
 800bbd8:	bf38      	it	cc
 800bbda:	2100      	movcc	r1, #0
 800bbdc:	440b      	add	r3, r1
 800bbde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbe2:	b191      	cbz	r1, 800bc0a <__mdiff+0x11a>
 800bbe4:	6117      	str	r7, [r2, #16]
 800bbe6:	e79d      	b.n	800bb24 <__mdiff+0x34>
 800bbe8:	f854 1b04 	ldr.w	r1, [r4], #4
 800bbec:	46e6      	mov	lr, ip
 800bbee:	0c08      	lsrs	r0, r1, #16
 800bbf0:	fa1c fc81 	uxtah	ip, ip, r1
 800bbf4:	4471      	add	r1, lr
 800bbf6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bbfa:	b289      	uxth	r1, r1
 800bbfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bc00:	f846 1b04 	str.w	r1, [r6], #4
 800bc04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc08:	e7dd      	b.n	800bbc6 <__mdiff+0xd6>
 800bc0a:	3f01      	subs	r7, #1
 800bc0c:	e7e7      	b.n	800bbde <__mdiff+0xee>
 800bc0e:	bf00      	nop
 800bc10:	08020590 	.word	0x08020590
 800bc14:	080205a1 	.word	0x080205a1

0800bc18 <__d2b>:
 800bc18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc1c:	460f      	mov	r7, r1
 800bc1e:	2101      	movs	r1, #1
 800bc20:	ec59 8b10 	vmov	r8, r9, d0
 800bc24:	4616      	mov	r6, r2
 800bc26:	f7ff fcd5 	bl	800b5d4 <_Balloc>
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	b930      	cbnz	r0, 800bc3c <__d2b+0x24>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	4b23      	ldr	r3, [pc, #140]	@ (800bcc0 <__d2b+0xa8>)
 800bc32:	4824      	ldr	r0, [pc, #144]	@ (800bcc4 <__d2b+0xac>)
 800bc34:	f240 310f 	movw	r1, #783	@ 0x30f
 800bc38:	f000 f902 	bl	800be40 <__assert_func>
 800bc3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bc40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc44:	b10d      	cbz	r5, 800bc4a <__d2b+0x32>
 800bc46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc4a:	9301      	str	r3, [sp, #4]
 800bc4c:	f1b8 0300 	subs.w	r3, r8, #0
 800bc50:	d023      	beq.n	800bc9a <__d2b+0x82>
 800bc52:	4668      	mov	r0, sp
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	f7ff fd84 	bl	800b762 <__lo0bits>
 800bc5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc5e:	b1d0      	cbz	r0, 800bc96 <__d2b+0x7e>
 800bc60:	f1c0 0320 	rsb	r3, r0, #32
 800bc64:	fa02 f303 	lsl.w	r3, r2, r3
 800bc68:	430b      	orrs	r3, r1
 800bc6a:	40c2      	lsrs	r2, r0
 800bc6c:	6163      	str	r3, [r4, #20]
 800bc6e:	9201      	str	r2, [sp, #4]
 800bc70:	9b01      	ldr	r3, [sp, #4]
 800bc72:	61a3      	str	r3, [r4, #24]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	bf0c      	ite	eq
 800bc78:	2201      	moveq	r2, #1
 800bc7a:	2202      	movne	r2, #2
 800bc7c:	6122      	str	r2, [r4, #16]
 800bc7e:	b1a5      	cbz	r5, 800bcaa <__d2b+0x92>
 800bc80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bc84:	4405      	add	r5, r0
 800bc86:	603d      	str	r5, [r7, #0]
 800bc88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bc8c:	6030      	str	r0, [r6, #0]
 800bc8e:	4620      	mov	r0, r4
 800bc90:	b003      	add	sp, #12
 800bc92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc96:	6161      	str	r1, [r4, #20]
 800bc98:	e7ea      	b.n	800bc70 <__d2b+0x58>
 800bc9a:	a801      	add	r0, sp, #4
 800bc9c:	f7ff fd61 	bl	800b762 <__lo0bits>
 800bca0:	9b01      	ldr	r3, [sp, #4]
 800bca2:	6163      	str	r3, [r4, #20]
 800bca4:	3020      	adds	r0, #32
 800bca6:	2201      	movs	r2, #1
 800bca8:	e7e8      	b.n	800bc7c <__d2b+0x64>
 800bcaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bcae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bcb2:	6038      	str	r0, [r7, #0]
 800bcb4:	6918      	ldr	r0, [r3, #16]
 800bcb6:	f7ff fd35 	bl	800b724 <__hi0bits>
 800bcba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bcbe:	e7e5      	b.n	800bc8c <__d2b+0x74>
 800bcc0:	08020590 	.word	0x08020590
 800bcc4:	080205a1 	.word	0x080205a1

0800bcc8 <__sflush_r>:
 800bcc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd0:	0716      	lsls	r6, r2, #28
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	460c      	mov	r4, r1
 800bcd6:	d454      	bmi.n	800bd82 <__sflush_r+0xba>
 800bcd8:	684b      	ldr	r3, [r1, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	dc02      	bgt.n	800bce4 <__sflush_r+0x1c>
 800bcde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	dd48      	ble.n	800bd76 <__sflush_r+0xae>
 800bce4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bce6:	2e00      	cmp	r6, #0
 800bce8:	d045      	beq.n	800bd76 <__sflush_r+0xae>
 800bcea:	2300      	movs	r3, #0
 800bcec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bcf0:	682f      	ldr	r7, [r5, #0]
 800bcf2:	6a21      	ldr	r1, [r4, #32]
 800bcf4:	602b      	str	r3, [r5, #0]
 800bcf6:	d030      	beq.n	800bd5a <__sflush_r+0x92>
 800bcf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	0759      	lsls	r1, r3, #29
 800bcfe:	d505      	bpl.n	800bd0c <__sflush_r+0x44>
 800bd00:	6863      	ldr	r3, [r4, #4]
 800bd02:	1ad2      	subs	r2, r2, r3
 800bd04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd06:	b10b      	cbz	r3, 800bd0c <__sflush_r+0x44>
 800bd08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd0a:	1ad2      	subs	r2, r2, r3
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd10:	6a21      	ldr	r1, [r4, #32]
 800bd12:	4628      	mov	r0, r5
 800bd14:	47b0      	blx	r6
 800bd16:	1c43      	adds	r3, r0, #1
 800bd18:	89a3      	ldrh	r3, [r4, #12]
 800bd1a:	d106      	bne.n	800bd2a <__sflush_r+0x62>
 800bd1c:	6829      	ldr	r1, [r5, #0]
 800bd1e:	291d      	cmp	r1, #29
 800bd20:	d82b      	bhi.n	800bd7a <__sflush_r+0xb2>
 800bd22:	4a2a      	ldr	r2, [pc, #168]	@ (800bdcc <__sflush_r+0x104>)
 800bd24:	40ca      	lsrs	r2, r1
 800bd26:	07d6      	lsls	r6, r2, #31
 800bd28:	d527      	bpl.n	800bd7a <__sflush_r+0xb2>
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	6062      	str	r2, [r4, #4]
 800bd2e:	04d9      	lsls	r1, r3, #19
 800bd30:	6922      	ldr	r2, [r4, #16]
 800bd32:	6022      	str	r2, [r4, #0]
 800bd34:	d504      	bpl.n	800bd40 <__sflush_r+0x78>
 800bd36:	1c42      	adds	r2, r0, #1
 800bd38:	d101      	bne.n	800bd3e <__sflush_r+0x76>
 800bd3a:	682b      	ldr	r3, [r5, #0]
 800bd3c:	b903      	cbnz	r3, 800bd40 <__sflush_r+0x78>
 800bd3e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd42:	602f      	str	r7, [r5, #0]
 800bd44:	b1b9      	cbz	r1, 800bd76 <__sflush_r+0xae>
 800bd46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd4a:	4299      	cmp	r1, r3
 800bd4c:	d002      	beq.n	800bd54 <__sflush_r+0x8c>
 800bd4e:	4628      	mov	r0, r5
 800bd50:	f7ff fb40 	bl	800b3d4 <_free_r>
 800bd54:	2300      	movs	r3, #0
 800bd56:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd58:	e00d      	b.n	800bd76 <__sflush_r+0xae>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	47b0      	blx	r6
 800bd60:	4602      	mov	r2, r0
 800bd62:	1c50      	adds	r0, r2, #1
 800bd64:	d1c9      	bne.n	800bcfa <__sflush_r+0x32>
 800bd66:	682b      	ldr	r3, [r5, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d0c6      	beq.n	800bcfa <__sflush_r+0x32>
 800bd6c:	2b1d      	cmp	r3, #29
 800bd6e:	d001      	beq.n	800bd74 <__sflush_r+0xac>
 800bd70:	2b16      	cmp	r3, #22
 800bd72:	d11e      	bne.n	800bdb2 <__sflush_r+0xea>
 800bd74:	602f      	str	r7, [r5, #0]
 800bd76:	2000      	movs	r0, #0
 800bd78:	e022      	b.n	800bdc0 <__sflush_r+0xf8>
 800bd7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd7e:	b21b      	sxth	r3, r3
 800bd80:	e01b      	b.n	800bdba <__sflush_r+0xf2>
 800bd82:	690f      	ldr	r7, [r1, #16]
 800bd84:	2f00      	cmp	r7, #0
 800bd86:	d0f6      	beq.n	800bd76 <__sflush_r+0xae>
 800bd88:	0793      	lsls	r3, r2, #30
 800bd8a:	680e      	ldr	r6, [r1, #0]
 800bd8c:	bf08      	it	eq
 800bd8e:	694b      	ldreq	r3, [r1, #20]
 800bd90:	600f      	str	r7, [r1, #0]
 800bd92:	bf18      	it	ne
 800bd94:	2300      	movne	r3, #0
 800bd96:	eba6 0807 	sub.w	r8, r6, r7
 800bd9a:	608b      	str	r3, [r1, #8]
 800bd9c:	f1b8 0f00 	cmp.w	r8, #0
 800bda0:	dde9      	ble.n	800bd76 <__sflush_r+0xae>
 800bda2:	6a21      	ldr	r1, [r4, #32]
 800bda4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bda6:	4643      	mov	r3, r8
 800bda8:	463a      	mov	r2, r7
 800bdaa:	4628      	mov	r0, r5
 800bdac:	47b0      	blx	r6
 800bdae:	2800      	cmp	r0, #0
 800bdb0:	dc08      	bgt.n	800bdc4 <__sflush_r+0xfc>
 800bdb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdba:	81a3      	strh	r3, [r4, #12]
 800bdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc4:	4407      	add	r7, r0
 800bdc6:	eba8 0800 	sub.w	r8, r8, r0
 800bdca:	e7e7      	b.n	800bd9c <__sflush_r+0xd4>
 800bdcc:	20400001 	.word	0x20400001

0800bdd0 <_fflush_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	690b      	ldr	r3, [r1, #16]
 800bdd4:	4605      	mov	r5, r0
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	b913      	cbnz	r3, 800bde0 <_fflush_r+0x10>
 800bdda:	2500      	movs	r5, #0
 800bddc:	4628      	mov	r0, r5
 800bdde:	bd38      	pop	{r3, r4, r5, pc}
 800bde0:	b118      	cbz	r0, 800bdea <_fflush_r+0x1a>
 800bde2:	6a03      	ldr	r3, [r0, #32]
 800bde4:	b90b      	cbnz	r3, 800bdea <_fflush_r+0x1a>
 800bde6:	f7fe fc05 	bl	800a5f4 <__sinit>
 800bdea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0f3      	beq.n	800bdda <_fflush_r+0xa>
 800bdf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdf4:	07d0      	lsls	r0, r2, #31
 800bdf6:	d404      	bmi.n	800be02 <_fflush_r+0x32>
 800bdf8:	0599      	lsls	r1, r3, #22
 800bdfa:	d402      	bmi.n	800be02 <_fflush_r+0x32>
 800bdfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdfe:	f7fe fcf0 	bl	800a7e2 <__retarget_lock_acquire_recursive>
 800be02:	4628      	mov	r0, r5
 800be04:	4621      	mov	r1, r4
 800be06:	f7ff ff5f 	bl	800bcc8 <__sflush_r>
 800be0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be0c:	07da      	lsls	r2, r3, #31
 800be0e:	4605      	mov	r5, r0
 800be10:	d4e4      	bmi.n	800bddc <_fflush_r+0xc>
 800be12:	89a3      	ldrh	r3, [r4, #12]
 800be14:	059b      	lsls	r3, r3, #22
 800be16:	d4e1      	bmi.n	800bddc <_fflush_r+0xc>
 800be18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be1a:	f7fe fce3 	bl	800a7e4 <__retarget_lock_release_recursive>
 800be1e:	e7dd      	b.n	800bddc <_fflush_r+0xc>

0800be20 <_sbrk_r>:
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	4d06      	ldr	r5, [pc, #24]	@ (800be3c <_sbrk_r+0x1c>)
 800be24:	2300      	movs	r3, #0
 800be26:	4604      	mov	r4, r0
 800be28:	4608      	mov	r0, r1
 800be2a:	602b      	str	r3, [r5, #0]
 800be2c:	f7f5 fd0c 	bl	8001848 <_sbrk>
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	d102      	bne.n	800be3a <_sbrk_r+0x1a>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	b103      	cbz	r3, 800be3a <_sbrk_r+0x1a>
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	bd38      	pop	{r3, r4, r5, pc}
 800be3c:	2000411c 	.word	0x2000411c

0800be40 <__assert_func>:
 800be40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be42:	4614      	mov	r4, r2
 800be44:	461a      	mov	r2, r3
 800be46:	4b09      	ldr	r3, [pc, #36]	@ (800be6c <__assert_func+0x2c>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4605      	mov	r5, r0
 800be4c:	68d8      	ldr	r0, [r3, #12]
 800be4e:	b14c      	cbz	r4, 800be64 <__assert_func+0x24>
 800be50:	4b07      	ldr	r3, [pc, #28]	@ (800be70 <__assert_func+0x30>)
 800be52:	9100      	str	r1, [sp, #0]
 800be54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be58:	4906      	ldr	r1, [pc, #24]	@ (800be74 <__assert_func+0x34>)
 800be5a:	462b      	mov	r3, r5
 800be5c:	f000 f842 	bl	800bee4 <fiprintf>
 800be60:	f000 f852 	bl	800bf08 <abort>
 800be64:	4b04      	ldr	r3, [pc, #16]	@ (800be78 <__assert_func+0x38>)
 800be66:	461c      	mov	r4, r3
 800be68:	e7f3      	b.n	800be52 <__assert_func+0x12>
 800be6a:	bf00      	nop
 800be6c:	2000001c 	.word	0x2000001c
 800be70:	08020604 	.word	0x08020604
 800be74:	08020611 	.word	0x08020611
 800be78:	0802063f 	.word	0x0802063f

0800be7c <_calloc_r>:
 800be7c:	b570      	push	{r4, r5, r6, lr}
 800be7e:	fba1 5402 	umull	r5, r4, r1, r2
 800be82:	b934      	cbnz	r4, 800be92 <_calloc_r+0x16>
 800be84:	4629      	mov	r1, r5
 800be86:	f7ff fb19 	bl	800b4bc <_malloc_r>
 800be8a:	4606      	mov	r6, r0
 800be8c:	b928      	cbnz	r0, 800be9a <_calloc_r+0x1e>
 800be8e:	4630      	mov	r0, r6
 800be90:	bd70      	pop	{r4, r5, r6, pc}
 800be92:	220c      	movs	r2, #12
 800be94:	6002      	str	r2, [r0, #0]
 800be96:	2600      	movs	r6, #0
 800be98:	e7f9      	b.n	800be8e <_calloc_r+0x12>
 800be9a:	462a      	mov	r2, r5
 800be9c:	4621      	mov	r1, r4
 800be9e:	f7fe fc22 	bl	800a6e6 <memset>
 800bea2:	e7f4      	b.n	800be8e <_calloc_r+0x12>

0800bea4 <__ascii_mbtowc>:
 800bea4:	b082      	sub	sp, #8
 800bea6:	b901      	cbnz	r1, 800beaa <__ascii_mbtowc+0x6>
 800bea8:	a901      	add	r1, sp, #4
 800beaa:	b142      	cbz	r2, 800bebe <__ascii_mbtowc+0x1a>
 800beac:	b14b      	cbz	r3, 800bec2 <__ascii_mbtowc+0x1e>
 800beae:	7813      	ldrb	r3, [r2, #0]
 800beb0:	600b      	str	r3, [r1, #0]
 800beb2:	7812      	ldrb	r2, [r2, #0]
 800beb4:	1e10      	subs	r0, r2, #0
 800beb6:	bf18      	it	ne
 800beb8:	2001      	movne	r0, #1
 800beba:	b002      	add	sp, #8
 800bebc:	4770      	bx	lr
 800bebe:	4610      	mov	r0, r2
 800bec0:	e7fb      	b.n	800beba <__ascii_mbtowc+0x16>
 800bec2:	f06f 0001 	mvn.w	r0, #1
 800bec6:	e7f8      	b.n	800beba <__ascii_mbtowc+0x16>

0800bec8 <__ascii_wctomb>:
 800bec8:	4603      	mov	r3, r0
 800beca:	4608      	mov	r0, r1
 800becc:	b141      	cbz	r1, 800bee0 <__ascii_wctomb+0x18>
 800bece:	2aff      	cmp	r2, #255	@ 0xff
 800bed0:	d904      	bls.n	800bedc <__ascii_wctomb+0x14>
 800bed2:	228a      	movs	r2, #138	@ 0x8a
 800bed4:	601a      	str	r2, [r3, #0]
 800bed6:	f04f 30ff 	mov.w	r0, #4294967295
 800beda:	4770      	bx	lr
 800bedc:	700a      	strb	r2, [r1, #0]
 800bede:	2001      	movs	r0, #1
 800bee0:	4770      	bx	lr
	...

0800bee4 <fiprintf>:
 800bee4:	b40e      	push	{r1, r2, r3}
 800bee6:	b503      	push	{r0, r1, lr}
 800bee8:	4601      	mov	r1, r0
 800beea:	ab03      	add	r3, sp, #12
 800beec:	4805      	ldr	r0, [pc, #20]	@ (800bf04 <fiprintf+0x20>)
 800beee:	f853 2b04 	ldr.w	r2, [r3], #4
 800bef2:	6800      	ldr	r0, [r0, #0]
 800bef4:	9301      	str	r3, [sp, #4]
 800bef6:	f000 f837 	bl	800bf68 <_vfiprintf_r>
 800befa:	b002      	add	sp, #8
 800befc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf00:	b003      	add	sp, #12
 800bf02:	4770      	bx	lr
 800bf04:	2000001c 	.word	0x2000001c

0800bf08 <abort>:
 800bf08:	b508      	push	{r3, lr}
 800bf0a:	2006      	movs	r0, #6
 800bf0c:	f000 fa00 	bl	800c310 <raise>
 800bf10:	2001      	movs	r0, #1
 800bf12:	f7f5 fc21 	bl	8001758 <_exit>

0800bf16 <__sfputc_r>:
 800bf16:	6893      	ldr	r3, [r2, #8]
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	b410      	push	{r4}
 800bf1e:	6093      	str	r3, [r2, #8]
 800bf20:	da08      	bge.n	800bf34 <__sfputc_r+0x1e>
 800bf22:	6994      	ldr	r4, [r2, #24]
 800bf24:	42a3      	cmp	r3, r4
 800bf26:	db01      	blt.n	800bf2c <__sfputc_r+0x16>
 800bf28:	290a      	cmp	r1, #10
 800bf2a:	d103      	bne.n	800bf34 <__sfputc_r+0x1e>
 800bf2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf30:	f000 b932 	b.w	800c198 <__swbuf_r>
 800bf34:	6813      	ldr	r3, [r2, #0]
 800bf36:	1c58      	adds	r0, r3, #1
 800bf38:	6010      	str	r0, [r2, #0]
 800bf3a:	7019      	strb	r1, [r3, #0]
 800bf3c:	4608      	mov	r0, r1
 800bf3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <__sfputs_r>:
 800bf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf46:	4606      	mov	r6, r0
 800bf48:	460f      	mov	r7, r1
 800bf4a:	4614      	mov	r4, r2
 800bf4c:	18d5      	adds	r5, r2, r3
 800bf4e:	42ac      	cmp	r4, r5
 800bf50:	d101      	bne.n	800bf56 <__sfputs_r+0x12>
 800bf52:	2000      	movs	r0, #0
 800bf54:	e007      	b.n	800bf66 <__sfputs_r+0x22>
 800bf56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf5a:	463a      	mov	r2, r7
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	f7ff ffda 	bl	800bf16 <__sfputc_r>
 800bf62:	1c43      	adds	r3, r0, #1
 800bf64:	d1f3      	bne.n	800bf4e <__sfputs_r+0xa>
 800bf66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf68 <_vfiprintf_r>:
 800bf68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6c:	460d      	mov	r5, r1
 800bf6e:	b09d      	sub	sp, #116	@ 0x74
 800bf70:	4614      	mov	r4, r2
 800bf72:	4698      	mov	r8, r3
 800bf74:	4606      	mov	r6, r0
 800bf76:	b118      	cbz	r0, 800bf80 <_vfiprintf_r+0x18>
 800bf78:	6a03      	ldr	r3, [r0, #32]
 800bf7a:	b90b      	cbnz	r3, 800bf80 <_vfiprintf_r+0x18>
 800bf7c:	f7fe fb3a 	bl	800a5f4 <__sinit>
 800bf80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf82:	07d9      	lsls	r1, r3, #31
 800bf84:	d405      	bmi.n	800bf92 <_vfiprintf_r+0x2a>
 800bf86:	89ab      	ldrh	r3, [r5, #12]
 800bf88:	059a      	lsls	r2, r3, #22
 800bf8a:	d402      	bmi.n	800bf92 <_vfiprintf_r+0x2a>
 800bf8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf8e:	f7fe fc28 	bl	800a7e2 <__retarget_lock_acquire_recursive>
 800bf92:	89ab      	ldrh	r3, [r5, #12]
 800bf94:	071b      	lsls	r3, r3, #28
 800bf96:	d501      	bpl.n	800bf9c <_vfiprintf_r+0x34>
 800bf98:	692b      	ldr	r3, [r5, #16]
 800bf9a:	b99b      	cbnz	r3, 800bfc4 <_vfiprintf_r+0x5c>
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	f000 f938 	bl	800c214 <__swsetup_r>
 800bfa4:	b170      	cbz	r0, 800bfc4 <_vfiprintf_r+0x5c>
 800bfa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfa8:	07dc      	lsls	r4, r3, #31
 800bfaa:	d504      	bpl.n	800bfb6 <_vfiprintf_r+0x4e>
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb0:	b01d      	add	sp, #116	@ 0x74
 800bfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb6:	89ab      	ldrh	r3, [r5, #12]
 800bfb8:	0598      	lsls	r0, r3, #22
 800bfba:	d4f7      	bmi.n	800bfac <_vfiprintf_r+0x44>
 800bfbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfbe:	f7fe fc11 	bl	800a7e4 <__retarget_lock_release_recursive>
 800bfc2:	e7f3      	b.n	800bfac <_vfiprintf_r+0x44>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfc8:	2320      	movs	r3, #32
 800bfca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bfce:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfd2:	2330      	movs	r3, #48	@ 0x30
 800bfd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c184 <_vfiprintf_r+0x21c>
 800bfd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfdc:	f04f 0901 	mov.w	r9, #1
 800bfe0:	4623      	mov	r3, r4
 800bfe2:	469a      	mov	sl, r3
 800bfe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfe8:	b10a      	cbz	r2, 800bfee <_vfiprintf_r+0x86>
 800bfea:	2a25      	cmp	r2, #37	@ 0x25
 800bfec:	d1f9      	bne.n	800bfe2 <_vfiprintf_r+0x7a>
 800bfee:	ebba 0b04 	subs.w	fp, sl, r4
 800bff2:	d00b      	beq.n	800c00c <_vfiprintf_r+0xa4>
 800bff4:	465b      	mov	r3, fp
 800bff6:	4622      	mov	r2, r4
 800bff8:	4629      	mov	r1, r5
 800bffa:	4630      	mov	r0, r6
 800bffc:	f7ff ffa2 	bl	800bf44 <__sfputs_r>
 800c000:	3001      	adds	r0, #1
 800c002:	f000 80a7 	beq.w	800c154 <_vfiprintf_r+0x1ec>
 800c006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c008:	445a      	add	r2, fp
 800c00a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c00c:	f89a 3000 	ldrb.w	r3, [sl]
 800c010:	2b00      	cmp	r3, #0
 800c012:	f000 809f 	beq.w	800c154 <_vfiprintf_r+0x1ec>
 800c016:	2300      	movs	r3, #0
 800c018:	f04f 32ff 	mov.w	r2, #4294967295
 800c01c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c020:	f10a 0a01 	add.w	sl, sl, #1
 800c024:	9304      	str	r3, [sp, #16]
 800c026:	9307      	str	r3, [sp, #28]
 800c028:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c02c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c02e:	4654      	mov	r4, sl
 800c030:	2205      	movs	r2, #5
 800c032:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c036:	4853      	ldr	r0, [pc, #332]	@ (800c184 <_vfiprintf_r+0x21c>)
 800c038:	f7f4 f902 	bl	8000240 <memchr>
 800c03c:	9a04      	ldr	r2, [sp, #16]
 800c03e:	b9d8      	cbnz	r0, 800c078 <_vfiprintf_r+0x110>
 800c040:	06d1      	lsls	r1, r2, #27
 800c042:	bf44      	itt	mi
 800c044:	2320      	movmi	r3, #32
 800c046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c04a:	0713      	lsls	r3, r2, #28
 800c04c:	bf44      	itt	mi
 800c04e:	232b      	movmi	r3, #43	@ 0x2b
 800c050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c054:	f89a 3000 	ldrb.w	r3, [sl]
 800c058:	2b2a      	cmp	r3, #42	@ 0x2a
 800c05a:	d015      	beq.n	800c088 <_vfiprintf_r+0x120>
 800c05c:	9a07      	ldr	r2, [sp, #28]
 800c05e:	4654      	mov	r4, sl
 800c060:	2000      	movs	r0, #0
 800c062:	f04f 0c0a 	mov.w	ip, #10
 800c066:	4621      	mov	r1, r4
 800c068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c06c:	3b30      	subs	r3, #48	@ 0x30
 800c06e:	2b09      	cmp	r3, #9
 800c070:	d94b      	bls.n	800c10a <_vfiprintf_r+0x1a2>
 800c072:	b1b0      	cbz	r0, 800c0a2 <_vfiprintf_r+0x13a>
 800c074:	9207      	str	r2, [sp, #28]
 800c076:	e014      	b.n	800c0a2 <_vfiprintf_r+0x13a>
 800c078:	eba0 0308 	sub.w	r3, r0, r8
 800c07c:	fa09 f303 	lsl.w	r3, r9, r3
 800c080:	4313      	orrs	r3, r2
 800c082:	9304      	str	r3, [sp, #16]
 800c084:	46a2      	mov	sl, r4
 800c086:	e7d2      	b.n	800c02e <_vfiprintf_r+0xc6>
 800c088:	9b03      	ldr	r3, [sp, #12]
 800c08a:	1d19      	adds	r1, r3, #4
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	9103      	str	r1, [sp, #12]
 800c090:	2b00      	cmp	r3, #0
 800c092:	bfbb      	ittet	lt
 800c094:	425b      	neglt	r3, r3
 800c096:	f042 0202 	orrlt.w	r2, r2, #2
 800c09a:	9307      	strge	r3, [sp, #28]
 800c09c:	9307      	strlt	r3, [sp, #28]
 800c09e:	bfb8      	it	lt
 800c0a0:	9204      	strlt	r2, [sp, #16]
 800c0a2:	7823      	ldrb	r3, [r4, #0]
 800c0a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0a6:	d10a      	bne.n	800c0be <_vfiprintf_r+0x156>
 800c0a8:	7863      	ldrb	r3, [r4, #1]
 800c0aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0ac:	d132      	bne.n	800c114 <_vfiprintf_r+0x1ac>
 800c0ae:	9b03      	ldr	r3, [sp, #12]
 800c0b0:	1d1a      	adds	r2, r3, #4
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	9203      	str	r2, [sp, #12]
 800c0b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c0ba:	3402      	adds	r4, #2
 800c0bc:	9305      	str	r3, [sp, #20]
 800c0be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c194 <_vfiprintf_r+0x22c>
 800c0c2:	7821      	ldrb	r1, [r4, #0]
 800c0c4:	2203      	movs	r2, #3
 800c0c6:	4650      	mov	r0, sl
 800c0c8:	f7f4 f8ba 	bl	8000240 <memchr>
 800c0cc:	b138      	cbz	r0, 800c0de <_vfiprintf_r+0x176>
 800c0ce:	9b04      	ldr	r3, [sp, #16]
 800c0d0:	eba0 000a 	sub.w	r0, r0, sl
 800c0d4:	2240      	movs	r2, #64	@ 0x40
 800c0d6:	4082      	lsls	r2, r0
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	3401      	adds	r4, #1
 800c0dc:	9304      	str	r3, [sp, #16]
 800c0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0e2:	4829      	ldr	r0, [pc, #164]	@ (800c188 <_vfiprintf_r+0x220>)
 800c0e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0e8:	2206      	movs	r2, #6
 800c0ea:	f7f4 f8a9 	bl	8000240 <memchr>
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	d03f      	beq.n	800c172 <_vfiprintf_r+0x20a>
 800c0f2:	4b26      	ldr	r3, [pc, #152]	@ (800c18c <_vfiprintf_r+0x224>)
 800c0f4:	bb1b      	cbnz	r3, 800c13e <_vfiprintf_r+0x1d6>
 800c0f6:	9b03      	ldr	r3, [sp, #12]
 800c0f8:	3307      	adds	r3, #7
 800c0fa:	f023 0307 	bic.w	r3, r3, #7
 800c0fe:	3308      	adds	r3, #8
 800c100:	9303      	str	r3, [sp, #12]
 800c102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c104:	443b      	add	r3, r7
 800c106:	9309      	str	r3, [sp, #36]	@ 0x24
 800c108:	e76a      	b.n	800bfe0 <_vfiprintf_r+0x78>
 800c10a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c10e:	460c      	mov	r4, r1
 800c110:	2001      	movs	r0, #1
 800c112:	e7a8      	b.n	800c066 <_vfiprintf_r+0xfe>
 800c114:	2300      	movs	r3, #0
 800c116:	3401      	adds	r4, #1
 800c118:	9305      	str	r3, [sp, #20]
 800c11a:	4619      	mov	r1, r3
 800c11c:	f04f 0c0a 	mov.w	ip, #10
 800c120:	4620      	mov	r0, r4
 800c122:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c126:	3a30      	subs	r2, #48	@ 0x30
 800c128:	2a09      	cmp	r2, #9
 800c12a:	d903      	bls.n	800c134 <_vfiprintf_r+0x1cc>
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d0c6      	beq.n	800c0be <_vfiprintf_r+0x156>
 800c130:	9105      	str	r1, [sp, #20]
 800c132:	e7c4      	b.n	800c0be <_vfiprintf_r+0x156>
 800c134:	fb0c 2101 	mla	r1, ip, r1, r2
 800c138:	4604      	mov	r4, r0
 800c13a:	2301      	movs	r3, #1
 800c13c:	e7f0      	b.n	800c120 <_vfiprintf_r+0x1b8>
 800c13e:	ab03      	add	r3, sp, #12
 800c140:	9300      	str	r3, [sp, #0]
 800c142:	462a      	mov	r2, r5
 800c144:	4b12      	ldr	r3, [pc, #72]	@ (800c190 <_vfiprintf_r+0x228>)
 800c146:	a904      	add	r1, sp, #16
 800c148:	4630      	mov	r0, r6
 800c14a:	f7fd fe21 	bl	8009d90 <_printf_float>
 800c14e:	4607      	mov	r7, r0
 800c150:	1c78      	adds	r0, r7, #1
 800c152:	d1d6      	bne.n	800c102 <_vfiprintf_r+0x19a>
 800c154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c156:	07d9      	lsls	r1, r3, #31
 800c158:	d405      	bmi.n	800c166 <_vfiprintf_r+0x1fe>
 800c15a:	89ab      	ldrh	r3, [r5, #12]
 800c15c:	059a      	lsls	r2, r3, #22
 800c15e:	d402      	bmi.n	800c166 <_vfiprintf_r+0x1fe>
 800c160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c162:	f7fe fb3f 	bl	800a7e4 <__retarget_lock_release_recursive>
 800c166:	89ab      	ldrh	r3, [r5, #12]
 800c168:	065b      	lsls	r3, r3, #25
 800c16a:	f53f af1f 	bmi.w	800bfac <_vfiprintf_r+0x44>
 800c16e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c170:	e71e      	b.n	800bfb0 <_vfiprintf_r+0x48>
 800c172:	ab03      	add	r3, sp, #12
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	462a      	mov	r2, r5
 800c178:	4b05      	ldr	r3, [pc, #20]	@ (800c190 <_vfiprintf_r+0x228>)
 800c17a:	a904      	add	r1, sp, #16
 800c17c:	4630      	mov	r0, r6
 800c17e:	f7fe f88f 	bl	800a2a0 <_printf_i>
 800c182:	e7e4      	b.n	800c14e <_vfiprintf_r+0x1e6>
 800c184:	08020640 	.word	0x08020640
 800c188:	0802064a 	.word	0x0802064a
 800c18c:	08009d91 	.word	0x08009d91
 800c190:	0800bf45 	.word	0x0800bf45
 800c194:	08020646 	.word	0x08020646

0800c198 <__swbuf_r>:
 800c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19a:	460e      	mov	r6, r1
 800c19c:	4614      	mov	r4, r2
 800c19e:	4605      	mov	r5, r0
 800c1a0:	b118      	cbz	r0, 800c1aa <__swbuf_r+0x12>
 800c1a2:	6a03      	ldr	r3, [r0, #32]
 800c1a4:	b90b      	cbnz	r3, 800c1aa <__swbuf_r+0x12>
 800c1a6:	f7fe fa25 	bl	800a5f4 <__sinit>
 800c1aa:	69a3      	ldr	r3, [r4, #24]
 800c1ac:	60a3      	str	r3, [r4, #8]
 800c1ae:	89a3      	ldrh	r3, [r4, #12]
 800c1b0:	071a      	lsls	r2, r3, #28
 800c1b2:	d501      	bpl.n	800c1b8 <__swbuf_r+0x20>
 800c1b4:	6923      	ldr	r3, [r4, #16]
 800c1b6:	b943      	cbnz	r3, 800c1ca <__swbuf_r+0x32>
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f000 f82a 	bl	800c214 <__swsetup_r>
 800c1c0:	b118      	cbz	r0, 800c1ca <__swbuf_r+0x32>
 800c1c2:	f04f 37ff 	mov.w	r7, #4294967295
 800c1c6:	4638      	mov	r0, r7
 800c1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1ca:	6823      	ldr	r3, [r4, #0]
 800c1cc:	6922      	ldr	r2, [r4, #16]
 800c1ce:	1a98      	subs	r0, r3, r2
 800c1d0:	6963      	ldr	r3, [r4, #20]
 800c1d2:	b2f6      	uxtb	r6, r6
 800c1d4:	4283      	cmp	r3, r0
 800c1d6:	4637      	mov	r7, r6
 800c1d8:	dc05      	bgt.n	800c1e6 <__swbuf_r+0x4e>
 800c1da:	4621      	mov	r1, r4
 800c1dc:	4628      	mov	r0, r5
 800c1de:	f7ff fdf7 	bl	800bdd0 <_fflush_r>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	d1ed      	bne.n	800c1c2 <__swbuf_r+0x2a>
 800c1e6:	68a3      	ldr	r3, [r4, #8]
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	60a3      	str	r3, [r4, #8]
 800c1ec:	6823      	ldr	r3, [r4, #0]
 800c1ee:	1c5a      	adds	r2, r3, #1
 800c1f0:	6022      	str	r2, [r4, #0]
 800c1f2:	701e      	strb	r6, [r3, #0]
 800c1f4:	6962      	ldr	r2, [r4, #20]
 800c1f6:	1c43      	adds	r3, r0, #1
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d004      	beq.n	800c206 <__swbuf_r+0x6e>
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	07db      	lsls	r3, r3, #31
 800c200:	d5e1      	bpl.n	800c1c6 <__swbuf_r+0x2e>
 800c202:	2e0a      	cmp	r6, #10
 800c204:	d1df      	bne.n	800c1c6 <__swbuf_r+0x2e>
 800c206:	4621      	mov	r1, r4
 800c208:	4628      	mov	r0, r5
 800c20a:	f7ff fde1 	bl	800bdd0 <_fflush_r>
 800c20e:	2800      	cmp	r0, #0
 800c210:	d0d9      	beq.n	800c1c6 <__swbuf_r+0x2e>
 800c212:	e7d6      	b.n	800c1c2 <__swbuf_r+0x2a>

0800c214 <__swsetup_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	4b29      	ldr	r3, [pc, #164]	@ (800c2bc <__swsetup_r+0xa8>)
 800c218:	4605      	mov	r5, r0
 800c21a:	6818      	ldr	r0, [r3, #0]
 800c21c:	460c      	mov	r4, r1
 800c21e:	b118      	cbz	r0, 800c228 <__swsetup_r+0x14>
 800c220:	6a03      	ldr	r3, [r0, #32]
 800c222:	b90b      	cbnz	r3, 800c228 <__swsetup_r+0x14>
 800c224:	f7fe f9e6 	bl	800a5f4 <__sinit>
 800c228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c22c:	0719      	lsls	r1, r3, #28
 800c22e:	d422      	bmi.n	800c276 <__swsetup_r+0x62>
 800c230:	06da      	lsls	r2, r3, #27
 800c232:	d407      	bmi.n	800c244 <__swsetup_r+0x30>
 800c234:	2209      	movs	r2, #9
 800c236:	602a      	str	r2, [r5, #0]
 800c238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c23c:	81a3      	strh	r3, [r4, #12]
 800c23e:	f04f 30ff 	mov.w	r0, #4294967295
 800c242:	e033      	b.n	800c2ac <__swsetup_r+0x98>
 800c244:	0758      	lsls	r0, r3, #29
 800c246:	d512      	bpl.n	800c26e <__swsetup_r+0x5a>
 800c248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c24a:	b141      	cbz	r1, 800c25e <__swsetup_r+0x4a>
 800c24c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c250:	4299      	cmp	r1, r3
 800c252:	d002      	beq.n	800c25a <__swsetup_r+0x46>
 800c254:	4628      	mov	r0, r5
 800c256:	f7ff f8bd 	bl	800b3d4 <_free_r>
 800c25a:	2300      	movs	r3, #0
 800c25c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c264:	81a3      	strh	r3, [r4, #12]
 800c266:	2300      	movs	r3, #0
 800c268:	6063      	str	r3, [r4, #4]
 800c26a:	6923      	ldr	r3, [r4, #16]
 800c26c:	6023      	str	r3, [r4, #0]
 800c26e:	89a3      	ldrh	r3, [r4, #12]
 800c270:	f043 0308 	orr.w	r3, r3, #8
 800c274:	81a3      	strh	r3, [r4, #12]
 800c276:	6923      	ldr	r3, [r4, #16]
 800c278:	b94b      	cbnz	r3, 800c28e <__swsetup_r+0x7a>
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c284:	d003      	beq.n	800c28e <__swsetup_r+0x7a>
 800c286:	4621      	mov	r1, r4
 800c288:	4628      	mov	r0, r5
 800c28a:	f000 f883 	bl	800c394 <__smakebuf_r>
 800c28e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c292:	f013 0201 	ands.w	r2, r3, #1
 800c296:	d00a      	beq.n	800c2ae <__swsetup_r+0x9a>
 800c298:	2200      	movs	r2, #0
 800c29a:	60a2      	str	r2, [r4, #8]
 800c29c:	6962      	ldr	r2, [r4, #20]
 800c29e:	4252      	negs	r2, r2
 800c2a0:	61a2      	str	r2, [r4, #24]
 800c2a2:	6922      	ldr	r2, [r4, #16]
 800c2a4:	b942      	cbnz	r2, 800c2b8 <__swsetup_r+0xa4>
 800c2a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c2aa:	d1c5      	bne.n	800c238 <__swsetup_r+0x24>
 800c2ac:	bd38      	pop	{r3, r4, r5, pc}
 800c2ae:	0799      	lsls	r1, r3, #30
 800c2b0:	bf58      	it	pl
 800c2b2:	6962      	ldrpl	r2, [r4, #20]
 800c2b4:	60a2      	str	r2, [r4, #8]
 800c2b6:	e7f4      	b.n	800c2a2 <__swsetup_r+0x8e>
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	e7f7      	b.n	800c2ac <__swsetup_r+0x98>
 800c2bc:	2000001c 	.word	0x2000001c

0800c2c0 <_raise_r>:
 800c2c0:	291f      	cmp	r1, #31
 800c2c2:	b538      	push	{r3, r4, r5, lr}
 800c2c4:	4605      	mov	r5, r0
 800c2c6:	460c      	mov	r4, r1
 800c2c8:	d904      	bls.n	800c2d4 <_raise_r+0x14>
 800c2ca:	2316      	movs	r3, #22
 800c2cc:	6003      	str	r3, [r0, #0]
 800c2ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d2:	bd38      	pop	{r3, r4, r5, pc}
 800c2d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c2d6:	b112      	cbz	r2, 800c2de <_raise_r+0x1e>
 800c2d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2dc:	b94b      	cbnz	r3, 800c2f2 <_raise_r+0x32>
 800c2de:	4628      	mov	r0, r5
 800c2e0:	f000 f830 	bl	800c344 <_getpid_r>
 800c2e4:	4622      	mov	r2, r4
 800c2e6:	4601      	mov	r1, r0
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2ee:	f000 b817 	b.w	800c320 <_kill_r>
 800c2f2:	2b01      	cmp	r3, #1
 800c2f4:	d00a      	beq.n	800c30c <_raise_r+0x4c>
 800c2f6:	1c59      	adds	r1, r3, #1
 800c2f8:	d103      	bne.n	800c302 <_raise_r+0x42>
 800c2fa:	2316      	movs	r3, #22
 800c2fc:	6003      	str	r3, [r0, #0]
 800c2fe:	2001      	movs	r0, #1
 800c300:	e7e7      	b.n	800c2d2 <_raise_r+0x12>
 800c302:	2100      	movs	r1, #0
 800c304:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c308:	4620      	mov	r0, r4
 800c30a:	4798      	blx	r3
 800c30c:	2000      	movs	r0, #0
 800c30e:	e7e0      	b.n	800c2d2 <_raise_r+0x12>

0800c310 <raise>:
 800c310:	4b02      	ldr	r3, [pc, #8]	@ (800c31c <raise+0xc>)
 800c312:	4601      	mov	r1, r0
 800c314:	6818      	ldr	r0, [r3, #0]
 800c316:	f7ff bfd3 	b.w	800c2c0 <_raise_r>
 800c31a:	bf00      	nop
 800c31c:	2000001c 	.word	0x2000001c

0800c320 <_kill_r>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	4d07      	ldr	r5, [pc, #28]	@ (800c340 <_kill_r+0x20>)
 800c324:	2300      	movs	r3, #0
 800c326:	4604      	mov	r4, r0
 800c328:	4608      	mov	r0, r1
 800c32a:	4611      	mov	r1, r2
 800c32c:	602b      	str	r3, [r5, #0]
 800c32e:	f7f5 fa03 	bl	8001738 <_kill>
 800c332:	1c43      	adds	r3, r0, #1
 800c334:	d102      	bne.n	800c33c <_kill_r+0x1c>
 800c336:	682b      	ldr	r3, [r5, #0]
 800c338:	b103      	cbz	r3, 800c33c <_kill_r+0x1c>
 800c33a:	6023      	str	r3, [r4, #0]
 800c33c:	bd38      	pop	{r3, r4, r5, pc}
 800c33e:	bf00      	nop
 800c340:	2000411c 	.word	0x2000411c

0800c344 <_getpid_r>:
 800c344:	f7f5 b9f0 	b.w	8001728 <_getpid>

0800c348 <__swhatbuf_r>:
 800c348:	b570      	push	{r4, r5, r6, lr}
 800c34a:	460c      	mov	r4, r1
 800c34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c350:	2900      	cmp	r1, #0
 800c352:	b096      	sub	sp, #88	@ 0x58
 800c354:	4615      	mov	r5, r2
 800c356:	461e      	mov	r6, r3
 800c358:	da0d      	bge.n	800c376 <__swhatbuf_r+0x2e>
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c360:	f04f 0100 	mov.w	r1, #0
 800c364:	bf14      	ite	ne
 800c366:	2340      	movne	r3, #64	@ 0x40
 800c368:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c36c:	2000      	movs	r0, #0
 800c36e:	6031      	str	r1, [r6, #0]
 800c370:	602b      	str	r3, [r5, #0]
 800c372:	b016      	add	sp, #88	@ 0x58
 800c374:	bd70      	pop	{r4, r5, r6, pc}
 800c376:	466a      	mov	r2, sp
 800c378:	f000 f848 	bl	800c40c <_fstat_r>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	dbec      	blt.n	800c35a <__swhatbuf_r+0x12>
 800c380:	9901      	ldr	r1, [sp, #4]
 800c382:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c386:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c38a:	4259      	negs	r1, r3
 800c38c:	4159      	adcs	r1, r3
 800c38e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c392:	e7eb      	b.n	800c36c <__swhatbuf_r+0x24>

0800c394 <__smakebuf_r>:
 800c394:	898b      	ldrh	r3, [r1, #12]
 800c396:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c398:	079d      	lsls	r5, r3, #30
 800c39a:	4606      	mov	r6, r0
 800c39c:	460c      	mov	r4, r1
 800c39e:	d507      	bpl.n	800c3b0 <__smakebuf_r+0x1c>
 800c3a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c3a4:	6023      	str	r3, [r4, #0]
 800c3a6:	6123      	str	r3, [r4, #16]
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	6163      	str	r3, [r4, #20]
 800c3ac:	b003      	add	sp, #12
 800c3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3b0:	ab01      	add	r3, sp, #4
 800c3b2:	466a      	mov	r2, sp
 800c3b4:	f7ff ffc8 	bl	800c348 <__swhatbuf_r>
 800c3b8:	9f00      	ldr	r7, [sp, #0]
 800c3ba:	4605      	mov	r5, r0
 800c3bc:	4639      	mov	r1, r7
 800c3be:	4630      	mov	r0, r6
 800c3c0:	f7ff f87c 	bl	800b4bc <_malloc_r>
 800c3c4:	b948      	cbnz	r0, 800c3da <__smakebuf_r+0x46>
 800c3c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ca:	059a      	lsls	r2, r3, #22
 800c3cc:	d4ee      	bmi.n	800c3ac <__smakebuf_r+0x18>
 800c3ce:	f023 0303 	bic.w	r3, r3, #3
 800c3d2:	f043 0302 	orr.w	r3, r3, #2
 800c3d6:	81a3      	strh	r3, [r4, #12]
 800c3d8:	e7e2      	b.n	800c3a0 <__smakebuf_r+0xc>
 800c3da:	89a3      	ldrh	r3, [r4, #12]
 800c3dc:	6020      	str	r0, [r4, #0]
 800c3de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3e2:	81a3      	strh	r3, [r4, #12]
 800c3e4:	9b01      	ldr	r3, [sp, #4]
 800c3e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c3ea:	b15b      	cbz	r3, 800c404 <__smakebuf_r+0x70>
 800c3ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	f000 f81d 	bl	800c430 <_isatty_r>
 800c3f6:	b128      	cbz	r0, 800c404 <__smakebuf_r+0x70>
 800c3f8:	89a3      	ldrh	r3, [r4, #12]
 800c3fa:	f023 0303 	bic.w	r3, r3, #3
 800c3fe:	f043 0301 	orr.w	r3, r3, #1
 800c402:	81a3      	strh	r3, [r4, #12]
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	431d      	orrs	r5, r3
 800c408:	81a5      	strh	r5, [r4, #12]
 800c40a:	e7cf      	b.n	800c3ac <__smakebuf_r+0x18>

0800c40c <_fstat_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	4d07      	ldr	r5, [pc, #28]	@ (800c42c <_fstat_r+0x20>)
 800c410:	2300      	movs	r3, #0
 800c412:	4604      	mov	r4, r0
 800c414:	4608      	mov	r0, r1
 800c416:	4611      	mov	r1, r2
 800c418:	602b      	str	r3, [r5, #0]
 800c41a:	f7f5 f9ed 	bl	80017f8 <_fstat>
 800c41e:	1c43      	adds	r3, r0, #1
 800c420:	d102      	bne.n	800c428 <_fstat_r+0x1c>
 800c422:	682b      	ldr	r3, [r5, #0]
 800c424:	b103      	cbz	r3, 800c428 <_fstat_r+0x1c>
 800c426:	6023      	str	r3, [r4, #0]
 800c428:	bd38      	pop	{r3, r4, r5, pc}
 800c42a:	bf00      	nop
 800c42c:	2000411c 	.word	0x2000411c

0800c430 <_isatty_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	4d06      	ldr	r5, [pc, #24]	@ (800c44c <_isatty_r+0x1c>)
 800c434:	2300      	movs	r3, #0
 800c436:	4604      	mov	r4, r0
 800c438:	4608      	mov	r0, r1
 800c43a:	602b      	str	r3, [r5, #0]
 800c43c:	f7f5 f9ec 	bl	8001818 <_isatty>
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	d102      	bne.n	800c44a <_isatty_r+0x1a>
 800c444:	682b      	ldr	r3, [r5, #0]
 800c446:	b103      	cbz	r3, 800c44a <_isatty_r+0x1a>
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	bd38      	pop	{r3, r4, r5, pc}
 800c44c:	2000411c 	.word	0x2000411c

0800c450 <sin>:
 800c450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c452:	eeb0 7b40 	vmov.f64	d7, d0
 800c456:	ee17 3a90 	vmov	r3, s15
 800c45a:	4a21      	ldr	r2, [pc, #132]	@ (800c4e0 <sin+0x90>)
 800c45c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c460:	4293      	cmp	r3, r2
 800c462:	d807      	bhi.n	800c474 <sin+0x24>
 800c464:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800c4d8 <sin+0x88>
 800c468:	2000      	movs	r0, #0
 800c46a:	b005      	add	sp, #20
 800c46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c470:	f000 b8a2 	b.w	800c5b8 <__kernel_sin>
 800c474:	4a1b      	ldr	r2, [pc, #108]	@ (800c4e4 <sin+0x94>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d904      	bls.n	800c484 <sin+0x34>
 800c47a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800c47e:	b005      	add	sp, #20
 800c480:	f85d fb04 	ldr.w	pc, [sp], #4
 800c484:	4668      	mov	r0, sp
 800c486:	f000 f8ef 	bl	800c668 <__ieee754_rem_pio2>
 800c48a:	f000 0003 	and.w	r0, r0, #3
 800c48e:	2801      	cmp	r0, #1
 800c490:	d00a      	beq.n	800c4a8 <sin+0x58>
 800c492:	2802      	cmp	r0, #2
 800c494:	d00f      	beq.n	800c4b6 <sin+0x66>
 800c496:	b9c0      	cbnz	r0, 800c4ca <sin+0x7a>
 800c498:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c49c:	ed9d 0b00 	vldr	d0, [sp]
 800c4a0:	2001      	movs	r0, #1
 800c4a2:	f000 f889 	bl	800c5b8 <__kernel_sin>
 800c4a6:	e7ea      	b.n	800c47e <sin+0x2e>
 800c4a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4ac:	ed9d 0b00 	vldr	d0, [sp]
 800c4b0:	f000 f81a 	bl	800c4e8 <__kernel_cos>
 800c4b4:	e7e3      	b.n	800c47e <sin+0x2e>
 800c4b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4ba:	ed9d 0b00 	vldr	d0, [sp]
 800c4be:	2001      	movs	r0, #1
 800c4c0:	f000 f87a 	bl	800c5b8 <__kernel_sin>
 800c4c4:	eeb1 0b40 	vneg.f64	d0, d0
 800c4c8:	e7d9      	b.n	800c47e <sin+0x2e>
 800c4ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4ce:	ed9d 0b00 	vldr	d0, [sp]
 800c4d2:	f000 f809 	bl	800c4e8 <__kernel_cos>
 800c4d6:	e7f5      	b.n	800c4c4 <sin+0x74>
	...
 800c4e0:	3fe921fb 	.word	0x3fe921fb
 800c4e4:	7fefffff 	.word	0x7fefffff

0800c4e8 <__kernel_cos>:
 800c4e8:	eeb0 5b40 	vmov.f64	d5, d0
 800c4ec:	ee15 1a90 	vmov	r1, s11
 800c4f0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800c4f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c4f8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800c4fc:	d204      	bcs.n	800c508 <__kernel_cos+0x20>
 800c4fe:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800c502:	ee17 3a90 	vmov	r3, s15
 800c506:	b343      	cbz	r3, 800c55a <__kernel_cos+0x72>
 800c508:	ee25 6b05 	vmul.f64	d6, d5, d5
 800c50c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800c510:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800c580 <__kernel_cos+0x98>
 800c514:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800c588 <__kernel_cos+0xa0>
 800c518:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c51c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c590 <__kernel_cos+0xa8>
 800c520:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c524:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800c598 <__kernel_cos+0xb0>
 800c528:	eea7 4b06 	vfma.f64	d4, d7, d6
 800c52c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800c5a0 <__kernel_cos+0xb8>
 800c530:	4b1f      	ldr	r3, [pc, #124]	@ (800c5b0 <__kernel_cos+0xc8>)
 800c532:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c536:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800c5a8 <__kernel_cos+0xc0>
 800c53a:	4299      	cmp	r1, r3
 800c53c:	eea7 4b06 	vfma.f64	d4, d7, d6
 800c540:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800c544:	ee24 4b06 	vmul.f64	d4, d4, d6
 800c548:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c54c:	eea6 1b04 	vfma.f64	d1, d6, d4
 800c550:	d804      	bhi.n	800c55c <__kernel_cos+0x74>
 800c552:	ee37 7b41 	vsub.f64	d7, d7, d1
 800c556:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c55a:	4770      	bx	lr
 800c55c:	4b15      	ldr	r3, [pc, #84]	@ (800c5b4 <__kernel_cos+0xcc>)
 800c55e:	4299      	cmp	r1, r3
 800c560:	d809      	bhi.n	800c576 <__kernel_cos+0x8e>
 800c562:	2200      	movs	r2, #0
 800c564:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800c568:	ec43 2b16 	vmov	d6, r2, r3
 800c56c:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c570:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c574:	e7ed      	b.n	800c552 <__kernel_cos+0x6a>
 800c576:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800c57a:	e7f7      	b.n	800c56c <__kernel_cos+0x84>
 800c57c:	f3af 8000 	nop.w
 800c580:	be8838d4 	.word	0xbe8838d4
 800c584:	bda8fae9 	.word	0xbda8fae9
 800c588:	bdb4b1c4 	.word	0xbdb4b1c4
 800c58c:	3e21ee9e 	.word	0x3e21ee9e
 800c590:	809c52ad 	.word	0x809c52ad
 800c594:	be927e4f 	.word	0xbe927e4f
 800c598:	19cb1590 	.word	0x19cb1590
 800c59c:	3efa01a0 	.word	0x3efa01a0
 800c5a0:	16c15177 	.word	0x16c15177
 800c5a4:	bf56c16c 	.word	0xbf56c16c
 800c5a8:	5555554c 	.word	0x5555554c
 800c5ac:	3fa55555 	.word	0x3fa55555
 800c5b0:	3fd33332 	.word	0x3fd33332
 800c5b4:	3fe90000 	.word	0x3fe90000

0800c5b8 <__kernel_sin>:
 800c5b8:	ee10 3a90 	vmov	r3, s1
 800c5bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c5c0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c5c4:	d204      	bcs.n	800c5d0 <__kernel_sin+0x18>
 800c5c6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c5ca:	ee17 3a90 	vmov	r3, s15
 800c5ce:	b35b      	cbz	r3, 800c628 <__kernel_sin+0x70>
 800c5d0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800c5d4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800c5d8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800c630 <__kernel_sin+0x78>
 800c5dc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800c638 <__kernel_sin+0x80>
 800c5e0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c5e4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800c640 <__kernel_sin+0x88>
 800c5e8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c5ec:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800c648 <__kernel_sin+0x90>
 800c5f0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800c5f4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800c650 <__kernel_sin+0x98>
 800c5f8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c5fc:	b930      	cbnz	r0, 800c60c <__kernel_sin+0x54>
 800c5fe:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800c658 <__kernel_sin+0xa0>
 800c602:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c606:	eea4 0b05 	vfma.f64	d0, d4, d5
 800c60a:	4770      	bx	lr
 800c60c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800c610:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800c614:	eea1 7b04 	vfma.f64	d7, d1, d4
 800c618:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800c61c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800c660 <__kernel_sin+0xa8>
 800c620:	eea5 1b07 	vfma.f64	d1, d5, d7
 800c624:	ee30 0b41 	vsub.f64	d0, d0, d1
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	f3af 8000 	nop.w
 800c630:	5acfd57c 	.word	0x5acfd57c
 800c634:	3de5d93a 	.word	0x3de5d93a
 800c638:	8a2b9ceb 	.word	0x8a2b9ceb
 800c63c:	be5ae5e6 	.word	0xbe5ae5e6
 800c640:	57b1fe7d 	.word	0x57b1fe7d
 800c644:	3ec71de3 	.word	0x3ec71de3
 800c648:	19c161d5 	.word	0x19c161d5
 800c64c:	bf2a01a0 	.word	0xbf2a01a0
 800c650:	1110f8a6 	.word	0x1110f8a6
 800c654:	3f811111 	.word	0x3f811111
 800c658:	55555549 	.word	0x55555549
 800c65c:	bfc55555 	.word	0xbfc55555
 800c660:	55555549 	.word	0x55555549
 800c664:	3fc55555 	.word	0x3fc55555

0800c668 <__ieee754_rem_pio2>:
 800c668:	b570      	push	{r4, r5, r6, lr}
 800c66a:	eeb0 7b40 	vmov.f64	d7, d0
 800c66e:	ee17 5a90 	vmov	r5, s15
 800c672:	4b99      	ldr	r3, [pc, #612]	@ (800c8d8 <__ieee754_rem_pio2+0x270>)
 800c674:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800c678:	429e      	cmp	r6, r3
 800c67a:	b088      	sub	sp, #32
 800c67c:	4604      	mov	r4, r0
 800c67e:	d807      	bhi.n	800c690 <__ieee754_rem_pio2+0x28>
 800c680:	2200      	movs	r2, #0
 800c682:	2300      	movs	r3, #0
 800c684:	ed84 0b00 	vstr	d0, [r4]
 800c688:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c68c:	2000      	movs	r0, #0
 800c68e:	e01b      	b.n	800c6c8 <__ieee754_rem_pio2+0x60>
 800c690:	4b92      	ldr	r3, [pc, #584]	@ (800c8dc <__ieee754_rem_pio2+0x274>)
 800c692:	429e      	cmp	r6, r3
 800c694:	d83b      	bhi.n	800c70e <__ieee754_rem_pio2+0xa6>
 800c696:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800c69a:	2d00      	cmp	r5, #0
 800c69c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800c898 <__ieee754_rem_pio2+0x230>
 800c6a0:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800c6a4:	dd19      	ble.n	800c6da <__ieee754_rem_pio2+0x72>
 800c6a6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c6aa:	429e      	cmp	r6, r3
 800c6ac:	d00e      	beq.n	800c6cc <__ieee754_rem_pio2+0x64>
 800c6ae:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800c8a0 <__ieee754_rem_pio2+0x238>
 800c6b2:	ee37 6b45 	vsub.f64	d6, d7, d5
 800c6b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c6ba:	ed84 6b00 	vstr	d6, [r4]
 800c6be:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c6c2:	ed84 7b02 	vstr	d7, [r4, #8]
 800c6c6:	2001      	movs	r0, #1
 800c6c8:	b008      	add	sp, #32
 800c6ca:	bd70      	pop	{r4, r5, r6, pc}
 800c6cc:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800c8a8 <__ieee754_rem_pio2+0x240>
 800c6d0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800c8b0 <__ieee754_rem_pio2+0x248>
 800c6d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c6d8:	e7eb      	b.n	800c6b2 <__ieee754_rem_pio2+0x4a>
 800c6da:	429e      	cmp	r6, r3
 800c6dc:	ee30 7b06 	vadd.f64	d7, d0, d6
 800c6e0:	d00e      	beq.n	800c700 <__ieee754_rem_pio2+0x98>
 800c6e2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800c8a0 <__ieee754_rem_pio2+0x238>
 800c6e6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c6ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c6ee:	ed84 6b00 	vstr	d6, [r4]
 800c6f2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6fa:	ed84 7b02 	vstr	d7, [r4, #8]
 800c6fe:	e7e3      	b.n	800c6c8 <__ieee754_rem_pio2+0x60>
 800c700:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800c8a8 <__ieee754_rem_pio2+0x240>
 800c704:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800c8b0 <__ieee754_rem_pio2+0x248>
 800c708:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c70c:	e7eb      	b.n	800c6e6 <__ieee754_rem_pio2+0x7e>
 800c70e:	4b74      	ldr	r3, [pc, #464]	@ (800c8e0 <__ieee754_rem_pio2+0x278>)
 800c710:	429e      	cmp	r6, r3
 800c712:	d870      	bhi.n	800c7f6 <__ieee754_rem_pio2+0x18e>
 800c714:	f000 f8ec 	bl	800c8f0 <fabs>
 800c718:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800c71c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c8b8 <__ieee754_rem_pio2+0x250>
 800c720:	eea0 7b06 	vfma.f64	d7, d0, d6
 800c724:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c728:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c72c:	ee17 0a90 	vmov	r0, s15
 800c730:	eeb1 4b45 	vneg.f64	d4, d5
 800c734:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800c898 <__ieee754_rem_pio2+0x230>
 800c738:	eea5 0b47 	vfms.f64	d0, d5, d7
 800c73c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800c8a0 <__ieee754_rem_pio2+0x238>
 800c740:	281f      	cmp	r0, #31
 800c742:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c746:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c74a:	dc05      	bgt.n	800c758 <__ieee754_rem_pio2+0xf0>
 800c74c:	4b65      	ldr	r3, [pc, #404]	@ (800c8e4 <__ieee754_rem_pio2+0x27c>)
 800c74e:	1e42      	subs	r2, r0, #1
 800c750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c754:	42b3      	cmp	r3, r6
 800c756:	d109      	bne.n	800c76c <__ieee754_rem_pio2+0x104>
 800c758:	ee16 3a90 	vmov	r3, s13
 800c75c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c760:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800c764:	2b10      	cmp	r3, #16
 800c766:	ea4f 5226 	mov.w	r2, r6, asr #20
 800c76a:	dc02      	bgt.n	800c772 <__ieee754_rem_pio2+0x10a>
 800c76c:	ed84 6b00 	vstr	d6, [r4]
 800c770:	e01a      	b.n	800c7a8 <__ieee754_rem_pio2+0x140>
 800c772:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800c8a8 <__ieee754_rem_pio2+0x240>
 800c776:	eeb0 6b40 	vmov.f64	d6, d0
 800c77a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800c77e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c782:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c786:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800c8b0 <__ieee754_rem_pio2+0x248>
 800c78a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800c78e:	ee36 3b47 	vsub.f64	d3, d6, d7
 800c792:	ee13 3a90 	vmov	r3, s7
 800c796:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c79a:	1ad3      	subs	r3, r2, r3
 800c79c:	2b31      	cmp	r3, #49	@ 0x31
 800c79e:	dc17      	bgt.n	800c7d0 <__ieee754_rem_pio2+0x168>
 800c7a0:	eeb0 0b46 	vmov.f64	d0, d6
 800c7a4:	ed84 3b00 	vstr	d3, [r4]
 800c7a8:	ed94 6b00 	vldr	d6, [r4]
 800c7ac:	2d00      	cmp	r5, #0
 800c7ae:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c7b2:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c7b6:	ed84 0b02 	vstr	d0, [r4, #8]
 800c7ba:	da85      	bge.n	800c6c8 <__ieee754_rem_pio2+0x60>
 800c7bc:	eeb1 6b46 	vneg.f64	d6, d6
 800c7c0:	eeb1 0b40 	vneg.f64	d0, d0
 800c7c4:	ed84 6b00 	vstr	d6, [r4]
 800c7c8:	ed84 0b02 	vstr	d0, [r4, #8]
 800c7cc:	4240      	negs	r0, r0
 800c7ce:	e77b      	b.n	800c6c8 <__ieee754_rem_pio2+0x60>
 800c7d0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800c8c0 <__ieee754_rem_pio2+0x258>
 800c7d4:	eeb0 0b46 	vmov.f64	d0, d6
 800c7d8:	eea4 0b07 	vfma.f64	d0, d4, d7
 800c7dc:	ee36 6b40 	vsub.f64	d6, d6, d0
 800c7e0:	eea4 6b07 	vfma.f64	d6, d4, d7
 800c7e4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800c8c8 <__ieee754_rem_pio2+0x260>
 800c7e8:	eeb0 7b46 	vmov.f64	d7, d6
 800c7ec:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800c7f0:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c7f4:	e7ba      	b.n	800c76c <__ieee754_rem_pio2+0x104>
 800c7f6:	4b3c      	ldr	r3, [pc, #240]	@ (800c8e8 <__ieee754_rem_pio2+0x280>)
 800c7f8:	429e      	cmp	r6, r3
 800c7fa:	d906      	bls.n	800c80a <__ieee754_rem_pio2+0x1a2>
 800c7fc:	ee30 7b40 	vsub.f64	d7, d0, d0
 800c800:	ed80 7b02 	vstr	d7, [r0, #8]
 800c804:	ed80 7b00 	vstr	d7, [r0]
 800c808:	e740      	b.n	800c68c <__ieee754_rem_pio2+0x24>
 800c80a:	ee10 3a10 	vmov	r3, s0
 800c80e:	1532      	asrs	r2, r6, #20
 800c810:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800c814:	4618      	mov	r0, r3
 800c816:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800c81a:	ec41 0b17 	vmov	d7, r0, r1
 800c81e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c822:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800c8d0 <__ieee754_rem_pio2+0x268>
 800c826:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c82a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c82e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c832:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c836:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c83a:	a808      	add	r0, sp, #32
 800c83c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c840:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c844:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c848:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c84c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c850:	2103      	movs	r1, #3
 800c852:	ed30 7b02 	vldmdb	r0!, {d7}
 800c856:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c85e:	460b      	mov	r3, r1
 800c860:	f101 31ff 	add.w	r1, r1, #4294967295
 800c864:	d0f5      	beq.n	800c852 <__ieee754_rem_pio2+0x1ea>
 800c866:	4921      	ldr	r1, [pc, #132]	@ (800c8ec <__ieee754_rem_pio2+0x284>)
 800c868:	9101      	str	r1, [sp, #4]
 800c86a:	2102      	movs	r1, #2
 800c86c:	9100      	str	r1, [sp, #0]
 800c86e:	a802      	add	r0, sp, #8
 800c870:	4621      	mov	r1, r4
 800c872:	f000 f845 	bl	800c900 <__kernel_rem_pio2>
 800c876:	2d00      	cmp	r5, #0
 800c878:	f6bf af26 	bge.w	800c6c8 <__ieee754_rem_pio2+0x60>
 800c87c:	ed94 7b00 	vldr	d7, [r4]
 800c880:	eeb1 7b47 	vneg.f64	d7, d7
 800c884:	ed84 7b00 	vstr	d7, [r4]
 800c888:	ed94 7b02 	vldr	d7, [r4, #8]
 800c88c:	eeb1 7b47 	vneg.f64	d7, d7
 800c890:	ed84 7b02 	vstr	d7, [r4, #8]
 800c894:	e79a      	b.n	800c7cc <__ieee754_rem_pio2+0x164>
 800c896:	bf00      	nop
 800c898:	54400000 	.word	0x54400000
 800c89c:	3ff921fb 	.word	0x3ff921fb
 800c8a0:	1a626331 	.word	0x1a626331
 800c8a4:	3dd0b461 	.word	0x3dd0b461
 800c8a8:	1a600000 	.word	0x1a600000
 800c8ac:	3dd0b461 	.word	0x3dd0b461
 800c8b0:	2e037073 	.word	0x2e037073
 800c8b4:	3ba3198a 	.word	0x3ba3198a
 800c8b8:	6dc9c883 	.word	0x6dc9c883
 800c8bc:	3fe45f30 	.word	0x3fe45f30
 800c8c0:	2e000000 	.word	0x2e000000
 800c8c4:	3ba3198a 	.word	0x3ba3198a
 800c8c8:	252049c1 	.word	0x252049c1
 800c8cc:	397b839a 	.word	0x397b839a
 800c8d0:	00000000 	.word	0x00000000
 800c8d4:	41700000 	.word	0x41700000
 800c8d8:	3fe921fb 	.word	0x3fe921fb
 800c8dc:	4002d97b 	.word	0x4002d97b
 800c8e0:	413921fb 	.word	0x413921fb
 800c8e4:	08020854 	.word	0x08020854
 800c8e8:	7fefffff 	.word	0x7fefffff
 800c8ec:	080208d4 	.word	0x080208d4

0800c8f0 <fabs>:
 800c8f0:	ec51 0b10 	vmov	r0, r1, d0
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c8fa:	ec43 2b10 	vmov	d0, r2, r3
 800c8fe:	4770      	bx	lr

0800c900 <__kernel_rem_pio2>:
 800c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c904:	ed2d 8b06 	vpush	{d8-d10}
 800c908:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800c90c:	469b      	mov	fp, r3
 800c90e:	460f      	mov	r7, r1
 800c910:	4bb9      	ldr	r3, [pc, #740]	@ (800cbf8 <__kernel_rem_pio2+0x2f8>)
 800c912:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800c914:	9ea3      	ldr	r6, [sp, #652]	@ 0x28c
 800c916:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800c91a:	9001      	str	r0, [sp, #4]
 800c91c:	f112 0f14 	cmn.w	r2, #20
 800c920:	bfa8      	it	ge
 800c922:	1ed3      	subge	r3, r2, #3
 800c924:	f10b 3aff 	add.w	sl, fp, #4294967295
 800c928:	bfb8      	it	lt
 800c92a:	2300      	movlt	r3, #0
 800c92c:	f06f 0517 	mvn.w	r5, #23
 800c930:	ed9f 6bab 	vldr	d6, [pc, #684]	@ 800cbe0 <__kernel_rem_pio2+0x2e0>
 800c934:	bfa4      	itt	ge
 800c936:	2018      	movge	r0, #24
 800c938:	fb93 f3f0 	sdivge	r3, r3, r0
 800c93c:	fb03 5505 	mla	r5, r3, r5, r5
 800c940:	eba3 040a 	sub.w	r4, r3, sl
 800c944:	4415      	add	r5, r2
 800c946:	eb09 0c0a 	add.w	ip, r9, sl
 800c94a:	a81a      	add	r0, sp, #104	@ 0x68
 800c94c:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
 800c950:	2200      	movs	r2, #0
 800c952:	4562      	cmp	r2, ip
 800c954:	dd0e      	ble.n	800c974 <__kernel_rem_pio2+0x74>
 800c956:	aa1a      	add	r2, sp, #104	@ 0x68
 800c958:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800c95c:	f50d 78d4 	add.w	r8, sp, #424	@ 0x1a8
 800c960:	2400      	movs	r4, #0
 800c962:	454c      	cmp	r4, r9
 800c964:	dc23      	bgt.n	800c9ae <__kernel_rem_pio2+0xae>
 800c966:	ed9f 7b9e 	vldr	d7, [pc, #632]	@ 800cbe0 <__kernel_rem_pio2+0x2e0>
 800c96a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c96e:	4694      	mov	ip, r2
 800c970:	2000      	movs	r0, #0
 800c972:	e015      	b.n	800c9a0 <__kernel_rem_pio2+0xa0>
 800c974:	42d4      	cmn	r4, r2
 800c976:	d409      	bmi.n	800c98c <__kernel_rem_pio2+0x8c>
 800c978:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800c97c:	ee07 1a90 	vmov	s15, r1
 800c980:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c984:	eca0 7b02 	vstmia	r0!, {d7}
 800c988:	3201      	adds	r2, #1
 800c98a:	e7e2      	b.n	800c952 <__kernel_rem_pio2+0x52>
 800c98c:	eeb0 7b46 	vmov.f64	d7, d6
 800c990:	e7f8      	b.n	800c984 <__kernel_rem_pio2+0x84>
 800c992:	ecbe 5b02 	vldmia	lr!, {d5}
 800c996:	ed3c 6b02 	vldmdb	ip!, {d6}
 800c99a:	3001      	adds	r0, #1
 800c99c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c9a0:	4550      	cmp	r0, sl
 800c9a2:	ddf6      	ble.n	800c992 <__kernel_rem_pio2+0x92>
 800c9a4:	eca8 7b02 	vstmia	r8!, {d7}
 800c9a8:	3401      	adds	r4, #1
 800c9aa:	3208      	adds	r2, #8
 800c9ac:	e7d9      	b.n	800c962 <__kernel_rem_pio2+0x62>
 800c9ae:	aa06      	add	r2, sp, #24
 800c9b0:	ed9f 9b8d 	vldr	d9, [pc, #564]	@ 800cbe8 <__kernel_rem_pio2+0x2e8>
 800c9b4:	ed9f ab8e 	vldr	d10, [pc, #568]	@ 800cbf0 <__kernel_rem_pio2+0x2f0>
 800c9b8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800c9bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c9c0:	9203      	str	r2, [sp, #12]
 800c9c2:	9302      	str	r3, [sp, #8]
 800c9c4:	464c      	mov	r4, r9
 800c9c6:	00e3      	lsls	r3, r4, #3
 800c9c8:	9304      	str	r3, [sp, #16]
 800c9ca:	ab92      	add	r3, sp, #584	@ 0x248
 800c9cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c9d0:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800c9d4:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800c9d6:	ab06      	add	r3, sp, #24
 800c9d8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800c9dc:	461e      	mov	r6, r3
 800c9de:	4620      	mov	r0, r4
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	dc4a      	bgt.n	800ca7a <__kernel_rem_pio2+0x17a>
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	9305      	str	r3, [sp, #20]
 800c9e8:	f000 f9fe 	bl	800cde8 <scalbn>
 800c9ec:	eeb0 8b40 	vmov.f64	d8, d0
 800c9f0:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800c9f4:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c9f8:	f000 fa72 	bl	800cee0 <floor>
 800c9fc:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800ca00:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ca04:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ca08:	2d00      	cmp	r5, #0
 800ca0a:	ee17 8a90 	vmov	r8, s15
 800ca0e:	9b05      	ldr	r3, [sp, #20]
 800ca10:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ca14:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ca18:	dd41      	ble.n	800ca9e <__kernel_rem_pio2+0x19e>
 800ca1a:	1e60      	subs	r0, r4, #1
 800ca1c:	aa06      	add	r2, sp, #24
 800ca1e:	f1c5 0c18 	rsb	ip, r5, #24
 800ca22:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800ca26:	fa46 f20c 	asr.w	r2, r6, ip
 800ca2a:	4490      	add	r8, r2
 800ca2c:	fa02 f20c 	lsl.w	r2, r2, ip
 800ca30:	1ab6      	subs	r6, r6, r2
 800ca32:	aa06      	add	r2, sp, #24
 800ca34:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800ca38:	f1c5 0217 	rsb	r2, r5, #23
 800ca3c:	4116      	asrs	r6, r2
 800ca3e:	2e00      	cmp	r6, #0
 800ca40:	dd3c      	ble.n	800cabc <__kernel_rem_pio2+0x1bc>
 800ca42:	f04f 0c00 	mov.w	ip, #0
 800ca46:	f108 0801 	add.w	r8, r8, #1
 800ca4a:	4660      	mov	r0, ip
 800ca4c:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800ca50:	4564      	cmp	r4, ip
 800ca52:	dc66      	bgt.n	800cb22 <__kernel_rem_pio2+0x222>
 800ca54:	2d00      	cmp	r5, #0
 800ca56:	dd03      	ble.n	800ca60 <__kernel_rem_pio2+0x160>
 800ca58:	2d01      	cmp	r5, #1
 800ca5a:	d072      	beq.n	800cb42 <__kernel_rem_pio2+0x242>
 800ca5c:	2d02      	cmp	r5, #2
 800ca5e:	d07a      	beq.n	800cb56 <__kernel_rem_pio2+0x256>
 800ca60:	2e02      	cmp	r6, #2
 800ca62:	d12b      	bne.n	800cabc <__kernel_rem_pio2+0x1bc>
 800ca64:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800ca68:	ee30 8b48 	vsub.f64	d8, d0, d8
 800ca6c:	b330      	cbz	r0, 800cabc <__kernel_rem_pio2+0x1bc>
 800ca6e:	4628      	mov	r0, r5
 800ca70:	f000 f9ba 	bl	800cde8 <scalbn>
 800ca74:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ca78:	e020      	b.n	800cabc <__kernel_rem_pio2+0x1bc>
 800ca7a:	ee20 7b09 	vmul.f64	d7, d0, d9
 800ca7e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800ca82:	3801      	subs	r0, #1
 800ca84:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800ca88:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800ca8c:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800ca90:	eca6 0a01 	vstmia	r6!, {s0}
 800ca94:	ed32 0b02 	vldmdb	r2!, {d0}
 800ca98:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ca9c:	e7a0      	b.n	800c9e0 <__kernel_rem_pio2+0xe0>
 800ca9e:	d105      	bne.n	800caac <__kernel_rem_pio2+0x1ac>
 800caa0:	1e62      	subs	r2, r4, #1
 800caa2:	a906      	add	r1, sp, #24
 800caa4:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800caa8:	15f6      	asrs	r6, r6, #23
 800caaa:	e7c8      	b.n	800ca3e <__kernel_rem_pio2+0x13e>
 800caac:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800cab0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab8:	da31      	bge.n	800cb1e <__kernel_rem_pio2+0x21e>
 800caba:	2600      	movs	r6, #0
 800cabc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac4:	f040 809c 	bne.w	800cc00 <__kernel_rem_pio2+0x300>
 800cac8:	1e62      	subs	r2, r4, #1
 800caca:	2000      	movs	r0, #0
 800cacc:	454a      	cmp	r2, r9
 800cace:	da49      	bge.n	800cb64 <__kernel_rem_pio2+0x264>
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d062      	beq.n	800cb9a <__kernel_rem_pio2+0x29a>
 800cad4:	3c01      	subs	r4, #1
 800cad6:	ab06      	add	r3, sp, #24
 800cad8:	3d18      	subs	r5, #24
 800cada:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d0f8      	beq.n	800cad4 <__kernel_rem_pio2+0x1d4>
 800cae2:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800cae6:	4628      	mov	r0, r5
 800cae8:	f000 f97e 	bl	800cde8 <scalbn>
 800caec:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800cbe8 <__kernel_rem_pio2+0x2e8>
 800caf0:	1c62      	adds	r2, r4, #1
 800caf2:	a96a      	add	r1, sp, #424	@ 0x1a8
 800caf4:	00d3      	lsls	r3, r2, #3
 800caf6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800cafa:	4622      	mov	r2, r4
 800cafc:	2a00      	cmp	r2, #0
 800cafe:	f280 80a9 	bge.w	800cc54 <__kernel_rem_pio2+0x354>
 800cb02:	4622      	mov	r2, r4
 800cb04:	2a00      	cmp	r2, #0
 800cb06:	f2c0 80c7 	blt.w	800cc98 <__kernel_rem_pio2+0x398>
 800cb0a:	a96a      	add	r1, sp, #424	@ 0x1a8
 800cb0c:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800cb10:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800cbe0 <__kernel_rem_pio2+0x2e0>
 800cb14:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800cbfc <__kernel_rem_pio2+0x2fc>
 800cb18:	2000      	movs	r0, #0
 800cb1a:	1aa1      	subs	r1, r4, r2
 800cb1c:	e0b1      	b.n	800cc82 <__kernel_rem_pio2+0x382>
 800cb1e:	2602      	movs	r6, #2
 800cb20:	e78f      	b.n	800ca42 <__kernel_rem_pio2+0x142>
 800cb22:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb26:	b948      	cbnz	r0, 800cb3c <__kernel_rem_pio2+0x23c>
 800cb28:	b122      	cbz	r2, 800cb34 <__kernel_rem_pio2+0x234>
 800cb2a:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800cb2e:	f843 2c04 	str.w	r2, [r3, #-4]
 800cb32:	2201      	movs	r2, #1
 800cb34:	f10c 0c01 	add.w	ip, ip, #1
 800cb38:	4610      	mov	r0, r2
 800cb3a:	e789      	b.n	800ca50 <__kernel_rem_pio2+0x150>
 800cb3c:	ebae 0202 	sub.w	r2, lr, r2
 800cb40:	e7f5      	b.n	800cb2e <__kernel_rem_pio2+0x22e>
 800cb42:	1e62      	subs	r2, r4, #1
 800cb44:	ab06      	add	r3, sp, #24
 800cb46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb4a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cb4e:	a906      	add	r1, sp, #24
 800cb50:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cb54:	e784      	b.n	800ca60 <__kernel_rem_pio2+0x160>
 800cb56:	1e62      	subs	r2, r4, #1
 800cb58:	ab06      	add	r3, sp, #24
 800cb5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb5e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cb62:	e7f4      	b.n	800cb4e <__kernel_rem_pio2+0x24e>
 800cb64:	ab06      	add	r3, sp, #24
 800cb66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb6a:	3a01      	subs	r2, #1
 800cb6c:	4318      	orrs	r0, r3
 800cb6e:	e7ad      	b.n	800cacc <__kernel_rem_pio2+0x1cc>
 800cb70:	3301      	adds	r3, #1
 800cb72:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d0fa      	beq.n	800cb70 <__kernel_rem_pio2+0x270>
 800cb7a:	9a04      	ldr	r2, [sp, #16]
 800cb7c:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800cb80:	446a      	add	r2, sp
 800cb82:	eb04 000b 	add.w	r0, r4, fp
 800cb86:	a91a      	add	r1, sp, #104	@ 0x68
 800cb88:	1c66      	adds	r6, r4, #1
 800cb8a:	3a98      	subs	r2, #152	@ 0x98
 800cb8c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800cb90:	4423      	add	r3, r4
 800cb92:	42b3      	cmp	r3, r6
 800cb94:	da04      	bge.n	800cba0 <__kernel_rem_pio2+0x2a0>
 800cb96:	461c      	mov	r4, r3
 800cb98:	e715      	b.n	800c9c6 <__kernel_rem_pio2+0xc6>
 800cb9a:	9a03      	ldr	r2, [sp, #12]
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	e7e8      	b.n	800cb72 <__kernel_rem_pio2+0x272>
 800cba0:	9902      	ldr	r1, [sp, #8]
 800cba2:	f8dd c004 	ldr.w	ip, [sp, #4]
 800cba6:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800cbaa:	9104      	str	r1, [sp, #16]
 800cbac:	ee07 1a90 	vmov	s15, r1
 800cbb0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cbb4:	2400      	movs	r4, #0
 800cbb6:	eca0 7b02 	vstmia	r0!, {d7}
 800cbba:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800cbe0 <__kernel_rem_pio2+0x2e0>
 800cbbe:	4686      	mov	lr, r0
 800cbc0:	4554      	cmp	r4, sl
 800cbc2:	dd03      	ble.n	800cbcc <__kernel_rem_pio2+0x2cc>
 800cbc4:	eca2 7b02 	vstmia	r2!, {d7}
 800cbc8:	3601      	adds	r6, #1
 800cbca:	e7e2      	b.n	800cb92 <__kernel_rem_pio2+0x292>
 800cbcc:	ecbc 5b02 	vldmia	ip!, {d5}
 800cbd0:	ed3e 6b02 	vldmdb	lr!, {d6}
 800cbd4:	3401      	adds	r4, #1
 800cbd6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cbda:	e7f1      	b.n	800cbc0 <__kernel_rem_pio2+0x2c0>
 800cbdc:	f3af 8000 	nop.w
	...
 800cbec:	3e700000 	.word	0x3e700000
 800cbf0:	00000000 	.word	0x00000000
 800cbf4:	41700000 	.word	0x41700000
 800cbf8:	08020a20 	.word	0x08020a20
 800cbfc:	080209e0 	.word	0x080209e0
 800cc00:	4268      	negs	r0, r5
 800cc02:	eeb0 0b48 	vmov.f64	d0, d8
 800cc06:	f000 f8ef 	bl	800cde8 <scalbn>
 800cc0a:	ed9f 6b71 	vldr	d6, [pc, #452]	@ 800cdd0 <__kernel_rem_pio2+0x4d0>
 800cc0e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800cc12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc16:	db17      	blt.n	800cc48 <__kernel_rem_pio2+0x348>
 800cc18:	ed9f 7b6f 	vldr	d7, [pc, #444]	@ 800cdd8 <__kernel_rem_pio2+0x4d8>
 800cc1c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800cc20:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800cc24:	aa06      	add	r2, sp, #24
 800cc26:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800cc2a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800cc2e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cc32:	3518      	adds	r5, #24
 800cc34:	ee10 3a10 	vmov	r3, s0
 800cc38:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cc3c:	ee17 3a10 	vmov	r3, s14
 800cc40:	3401      	adds	r4, #1
 800cc42:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cc46:	e74c      	b.n	800cae2 <__kernel_rem_pio2+0x1e2>
 800cc48:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cc4c:	aa06      	add	r2, sp, #24
 800cc4e:	ee10 3a10 	vmov	r3, s0
 800cc52:	e7f6      	b.n	800cc42 <__kernel_rem_pio2+0x342>
 800cc54:	a806      	add	r0, sp, #24
 800cc56:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800cc5a:	9001      	str	r0, [sp, #4]
 800cc5c:	ee07 0a90 	vmov	s15, r0
 800cc60:	3a01      	subs	r2, #1
 800cc62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cc66:	ee27 7b00 	vmul.f64	d7, d7, d0
 800cc6a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800cc6e:	ed21 7b02 	vstmdb	r1!, {d7}
 800cc72:	e743      	b.n	800cafc <__kernel_rem_pio2+0x1fc>
 800cc74:	ecbc 5b02 	vldmia	ip!, {d5}
 800cc78:	ecb5 6b02 	vldmia	r5!, {d6}
 800cc7c:	3001      	adds	r0, #1
 800cc7e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cc82:	4548      	cmp	r0, r9
 800cc84:	dc01      	bgt.n	800cc8a <__kernel_rem_pio2+0x38a>
 800cc86:	4288      	cmp	r0, r1
 800cc88:	ddf4      	ble.n	800cc74 <__kernel_rem_pio2+0x374>
 800cc8a:	a842      	add	r0, sp, #264	@ 0x108
 800cc8c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800cc90:	ed81 7b00 	vstr	d7, [r1]
 800cc94:	3a01      	subs	r2, #1
 800cc96:	e735      	b.n	800cb04 <__kernel_rem_pio2+0x204>
 800cc98:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800cc9a:	2a02      	cmp	r2, #2
 800cc9c:	dc0a      	bgt.n	800ccb4 <__kernel_rem_pio2+0x3b4>
 800cc9e:	2a00      	cmp	r2, #0
 800cca0:	dc29      	bgt.n	800ccf6 <__kernel_rem_pio2+0x3f6>
 800cca2:	d042      	beq.n	800cd2a <__kernel_rem_pio2+0x42a>
 800cca4:	f008 0007 	and.w	r0, r8, #7
 800cca8:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800ccac:	ecbd 8b06 	vpop	{d8-d10}
 800ccb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccb4:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800ccb6:	2a03      	cmp	r2, #3
 800ccb8:	d1f4      	bne.n	800cca4 <__kernel_rem_pio2+0x3a4>
 800ccba:	a942      	add	r1, sp, #264	@ 0x108
 800ccbc:	f1a3 0208 	sub.w	r2, r3, #8
 800ccc0:	440a      	add	r2, r1
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	dc50      	bgt.n	800cd6c <__kernel_rem_pio2+0x46c>
 800ccca:	4621      	mov	r1, r4
 800cccc:	2901      	cmp	r1, #1
 800ccce:	dc5d      	bgt.n	800cd8c <__kernel_rem_pio2+0x48c>
 800ccd0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800cde0 <__kernel_rem_pio2+0x4e0>
 800ccd4:	aa42      	add	r2, sp, #264	@ 0x108
 800ccd6:	4413      	add	r3, r2
 800ccd8:	2c01      	cmp	r4, #1
 800ccda:	dc67      	bgt.n	800cdac <__kernel_rem_pio2+0x4ac>
 800ccdc:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800cce0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800cce4:	2e00      	cmp	r6, #0
 800cce6:	d167      	bne.n	800cdb8 <__kernel_rem_pio2+0x4b8>
 800cce8:	ed87 5b00 	vstr	d5, [r7]
 800ccec:	ed87 6b02 	vstr	d6, [r7, #8]
 800ccf0:	ed87 7b04 	vstr	d7, [r7, #16]
 800ccf4:	e7d6      	b.n	800cca4 <__kernel_rem_pio2+0x3a4>
 800ccf6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800cde0 <__kernel_rem_pio2+0x4e0>
 800ccfa:	aa42      	add	r2, sp, #264	@ 0x108
 800ccfc:	4413      	add	r3, r2
 800ccfe:	4622      	mov	r2, r4
 800cd00:	2a00      	cmp	r2, #0
 800cd02:	da24      	bge.n	800cd4e <__kernel_rem_pio2+0x44e>
 800cd04:	b34e      	cbz	r6, 800cd5a <__kernel_rem_pio2+0x45a>
 800cd06:	eeb1 7b46 	vneg.f64	d7, d6
 800cd0a:	ed87 7b00 	vstr	d7, [r7]
 800cd0e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800cd12:	aa44      	add	r2, sp, #272	@ 0x110
 800cd14:	2301      	movs	r3, #1
 800cd16:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cd1a:	429c      	cmp	r4, r3
 800cd1c:	da20      	bge.n	800cd60 <__kernel_rem_pio2+0x460>
 800cd1e:	b10e      	cbz	r6, 800cd24 <__kernel_rem_pio2+0x424>
 800cd20:	eeb1 7b47 	vneg.f64	d7, d7
 800cd24:	ed87 7b02 	vstr	d7, [r7, #8]
 800cd28:	e7bc      	b.n	800cca4 <__kernel_rem_pio2+0x3a4>
 800cd2a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800cde0 <__kernel_rem_pio2+0x4e0>
 800cd2e:	aa42      	add	r2, sp, #264	@ 0x108
 800cd30:	4413      	add	r3, r2
 800cd32:	2c00      	cmp	r4, #0
 800cd34:	da05      	bge.n	800cd42 <__kernel_rem_pio2+0x442>
 800cd36:	b10e      	cbz	r6, 800cd3c <__kernel_rem_pio2+0x43c>
 800cd38:	eeb1 7b47 	vneg.f64	d7, d7
 800cd3c:	ed87 7b00 	vstr	d7, [r7]
 800cd40:	e7b0      	b.n	800cca4 <__kernel_rem_pio2+0x3a4>
 800cd42:	ed33 6b02 	vldmdb	r3!, {d6}
 800cd46:	3c01      	subs	r4, #1
 800cd48:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cd4c:	e7f1      	b.n	800cd32 <__kernel_rem_pio2+0x432>
 800cd4e:	ed33 7b02 	vldmdb	r3!, {d7}
 800cd52:	3a01      	subs	r2, #1
 800cd54:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cd58:	e7d2      	b.n	800cd00 <__kernel_rem_pio2+0x400>
 800cd5a:	eeb0 7b46 	vmov.f64	d7, d6
 800cd5e:	e7d4      	b.n	800cd0a <__kernel_rem_pio2+0x40a>
 800cd60:	ecb2 6b02 	vldmia	r2!, {d6}
 800cd64:	3301      	adds	r3, #1
 800cd66:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cd6a:	e7d6      	b.n	800cd1a <__kernel_rem_pio2+0x41a>
 800cd6c:	ed31 7b02 	vldmdb	r1!, {d7}
 800cd70:	ed91 5b02 	vldr	d5, [r1, #8]
 800cd74:	3801      	subs	r0, #1
 800cd76:	ee37 6b05 	vadd.f64	d6, d7, d5
 800cd7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cd7e:	ed81 6b00 	vstr	d6, [r1]
 800cd82:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cd86:	ed81 7b02 	vstr	d7, [r1, #8]
 800cd8a:	e79c      	b.n	800ccc6 <__kernel_rem_pio2+0x3c6>
 800cd8c:	ed32 7b02 	vldmdb	r2!, {d7}
 800cd90:	ed92 5b02 	vldr	d5, [r2, #8]
 800cd94:	3901      	subs	r1, #1
 800cd96:	ee37 6b05 	vadd.f64	d6, d7, d5
 800cd9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cd9e:	ed82 6b00 	vstr	d6, [r2]
 800cda2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cda6:	ed82 7b02 	vstr	d7, [r2, #8]
 800cdaa:	e78f      	b.n	800cccc <__kernel_rem_pio2+0x3cc>
 800cdac:	ed33 6b02 	vldmdb	r3!, {d6}
 800cdb0:	3c01      	subs	r4, #1
 800cdb2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cdb6:	e78f      	b.n	800ccd8 <__kernel_rem_pio2+0x3d8>
 800cdb8:	eeb1 5b45 	vneg.f64	d5, d5
 800cdbc:	eeb1 6b46 	vneg.f64	d6, d6
 800cdc0:	ed87 5b00 	vstr	d5, [r7]
 800cdc4:	eeb1 7b47 	vneg.f64	d7, d7
 800cdc8:	ed87 6b02 	vstr	d6, [r7, #8]
 800cdcc:	e790      	b.n	800ccf0 <__kernel_rem_pio2+0x3f0>
 800cdce:	bf00      	nop
 800cdd0:	00000000 	.word	0x00000000
 800cdd4:	41700000 	.word	0x41700000
 800cdd8:	00000000 	.word	0x00000000
 800cddc:	3e700000 	.word	0x3e700000
	...

0800cde8 <scalbn>:
 800cde8:	ee10 1a90 	vmov	r1, s1
 800cdec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cdf0:	b98b      	cbnz	r3, 800ce16 <scalbn+0x2e>
 800cdf2:	ee10 3a10 	vmov	r3, s0
 800cdf6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800cdfa:	4319      	orrs	r1, r3
 800cdfc:	d00a      	beq.n	800ce14 <scalbn+0x2c>
 800cdfe:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800cea8 <scalbn+0xc0>
 800ce02:	4b35      	ldr	r3, [pc, #212]	@ (800ced8 <scalbn+0xf0>)
 800ce04:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ce08:	4298      	cmp	r0, r3
 800ce0a:	da0b      	bge.n	800ce24 <scalbn+0x3c>
 800ce0c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800ceb0 <scalbn+0xc8>
 800ce10:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ce14:	4770      	bx	lr
 800ce16:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d107      	bne.n	800ce2e <scalbn+0x46>
 800ce1e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ce22:	4770      	bx	lr
 800ce24:	ee10 1a90 	vmov	r1, s1
 800ce28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ce2c:	3b36      	subs	r3, #54	@ 0x36
 800ce2e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ce32:	4290      	cmp	r0, r2
 800ce34:	dd0d      	ble.n	800ce52 <scalbn+0x6a>
 800ce36:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800ceb8 <scalbn+0xd0>
 800ce3a:	ee10 3a90 	vmov	r3, s1
 800ce3e:	eeb0 6b47 	vmov.f64	d6, d7
 800ce42:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 800cec0 <scalbn+0xd8>
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	fe27 7b05 	vselge.f64	d7, d7, d5
 800ce4c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800ce50:	4770      	bx	lr
 800ce52:	4418      	add	r0, r3
 800ce54:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800ce58:	4298      	cmp	r0, r3
 800ce5a:	dcec      	bgt.n	800ce36 <scalbn+0x4e>
 800ce5c:	2800      	cmp	r0, #0
 800ce5e:	dd08      	ble.n	800ce72 <scalbn+0x8a>
 800ce60:	ec53 2b10 	vmov	r2, r3, d0
 800ce64:	f36f 511e 	bfc	r1, #20, #11
 800ce68:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800ce6c:	ec43 2b10 	vmov	d0, r2, r3
 800ce70:	4770      	bx	lr
 800ce72:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800ce76:	da09      	bge.n	800ce8c <scalbn+0xa4>
 800ce78:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800ceb0 <scalbn+0xc8>
 800ce7c:	ee10 3a90 	vmov	r3, s1
 800ce80:	eeb0 6b47 	vmov.f64	d6, d7
 800ce84:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 800cec8 <scalbn+0xe0>
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	e7dd      	b.n	800ce48 <scalbn+0x60>
 800ce8c:	ec53 2b10 	vmov	r2, r3, d0
 800ce90:	3036      	adds	r0, #54	@ 0x36
 800ce92:	f36f 511e 	bfc	r1, #20, #11
 800ce96:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800ce9a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800ced0 <scalbn+0xe8>
 800ce9e:	ec43 2b10 	vmov	d0, r2, r3
 800cea2:	e7b5      	b.n	800ce10 <scalbn+0x28>
 800cea4:	f3af 8000 	nop.w
 800cea8:	00000000 	.word	0x00000000
 800ceac:	43500000 	.word	0x43500000
 800ceb0:	c2f8f359 	.word	0xc2f8f359
 800ceb4:	01a56e1f 	.word	0x01a56e1f
 800ceb8:	8800759c 	.word	0x8800759c
 800cebc:	7e37e43c 	.word	0x7e37e43c
 800cec0:	8800759c 	.word	0x8800759c
 800cec4:	fe37e43c 	.word	0xfe37e43c
 800cec8:	c2f8f359 	.word	0xc2f8f359
 800cecc:	81a56e1f 	.word	0x81a56e1f
 800ced0:	00000000 	.word	0x00000000
 800ced4:	3c900000 	.word	0x3c900000
 800ced8:	ffff3cb0 	.word	0xffff3cb0
 800cedc:	00000000 	.word	0x00000000

0800cee0 <floor>:
 800cee0:	ee10 3a90 	vmov	r3, s1
 800cee4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800cee8:	ee10 2a10 	vmov	r2, s0
 800ceec:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800cef0:	2913      	cmp	r1, #19
 800cef2:	b530      	push	{r4, r5, lr}
 800cef4:	4615      	mov	r5, r2
 800cef6:	dc33      	bgt.n	800cf60 <floor+0x80>
 800cef8:	2900      	cmp	r1, #0
 800cefa:	da18      	bge.n	800cf2e <floor+0x4e>
 800cefc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800cfc0 <floor+0xe0>
 800cf00:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cf04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cf08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0c:	dd0a      	ble.n	800cf24 <floor+0x44>
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	da50      	bge.n	800cfb4 <floor+0xd4>
 800cf12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cf16:	4313      	orrs	r3, r2
 800cf18:	2200      	movs	r2, #0
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	4b2a      	ldr	r3, [pc, #168]	@ (800cfc8 <floor+0xe8>)
 800cf1e:	bf08      	it	eq
 800cf20:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800cf24:	4619      	mov	r1, r3
 800cf26:	4610      	mov	r0, r2
 800cf28:	ec41 0b10 	vmov	d0, r0, r1
 800cf2c:	e01f      	b.n	800cf6e <floor+0x8e>
 800cf2e:	4827      	ldr	r0, [pc, #156]	@ (800cfcc <floor+0xec>)
 800cf30:	4108      	asrs	r0, r1
 800cf32:	ea03 0400 	and.w	r4, r3, r0
 800cf36:	4314      	orrs	r4, r2
 800cf38:	d019      	beq.n	800cf6e <floor+0x8e>
 800cf3a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800cfc0 <floor+0xe0>
 800cf3e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cf42:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cf46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf4a:	ddeb      	ble.n	800cf24 <floor+0x44>
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	bfbe      	ittt	lt
 800cf50:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800cf54:	410a      	asrlt	r2, r1
 800cf56:	189b      	addlt	r3, r3, r2
 800cf58:	ea23 0300 	bic.w	r3, r3, r0
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	e7e1      	b.n	800cf24 <floor+0x44>
 800cf60:	2933      	cmp	r1, #51	@ 0x33
 800cf62:	dd05      	ble.n	800cf70 <floor+0x90>
 800cf64:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cf68:	d101      	bne.n	800cf6e <floor+0x8e>
 800cf6a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800cf6e:	bd30      	pop	{r4, r5, pc}
 800cf70:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800cf74:	f04f 30ff 	mov.w	r0, #4294967295
 800cf78:	40e0      	lsrs	r0, r4
 800cf7a:	4210      	tst	r0, r2
 800cf7c:	d0f7      	beq.n	800cf6e <floor+0x8e>
 800cf7e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800cfc0 <floor+0xe0>
 800cf82:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cf86:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cf8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf8e:	ddc9      	ble.n	800cf24 <floor+0x44>
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	da02      	bge.n	800cf9a <floor+0xba>
 800cf94:	2914      	cmp	r1, #20
 800cf96:	d103      	bne.n	800cfa0 <floor+0xc0>
 800cf98:	3301      	adds	r3, #1
 800cf9a:	ea22 0200 	bic.w	r2, r2, r0
 800cf9e:	e7c1      	b.n	800cf24 <floor+0x44>
 800cfa0:	2401      	movs	r4, #1
 800cfa2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800cfa6:	fa04 f101 	lsl.w	r1, r4, r1
 800cfaa:	440a      	add	r2, r1
 800cfac:	42aa      	cmp	r2, r5
 800cfae:	bf38      	it	cc
 800cfb0:	191b      	addcc	r3, r3, r4
 800cfb2:	e7f2      	b.n	800cf9a <floor+0xba>
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	e7b4      	b.n	800cf24 <floor+0x44>
 800cfba:	bf00      	nop
 800cfbc:	f3af 8000 	nop.w
 800cfc0:	8800759c 	.word	0x8800759c
 800cfc4:	7e37e43c 	.word	0x7e37e43c
 800cfc8:	bff00000 	.word	0xbff00000
 800cfcc:	000fffff 	.word	0x000fffff

0800cfd0 <_init>:
 800cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd2:	bf00      	nop
 800cfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfd6:	bc08      	pop	{r3}
 800cfd8:	469e      	mov	lr, r3
 800cfda:	4770      	bx	lr

0800cfdc <_fini>:
 800cfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfde:	bf00      	nop
 800cfe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfe2:	bc08      	pop	{r3}
 800cfe4:	469e      	mov	lr, r3
 800cfe6:	4770      	bx	lr
